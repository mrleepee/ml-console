// Generated from XQueryParser.g4 by ANTLR 4.13.0
// jshint ignore: start
import antlr4 from 'antlr4';
import XQueryParserListener from './XQueryParserListener.js';
const serializedATN = [4,1,205,2165,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,1,0,3,0,486,8,0,1,0,3,0,
489,8,0,1,0,3,0,492,8,0,1,0,1,0,1,0,1,0,3,0,498,8,0,1,0,5,0,501,8,0,10,0,
12,0,504,9,0,3,0,506,8,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,3,2,515,8,2,1,2,1,2,
1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
1,7,1,7,3,7,539,8,7,1,7,1,7,5,7,543,8,7,10,7,12,7,546,9,7,1,7,3,7,549,8,
7,1,7,1,7,1,7,1,7,3,7,555,8,7,1,7,1,7,5,7,559,8,7,10,7,12,7,562,9,7,1,8,
1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,578,8,9,1,10,1,10,
1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,
13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,3,19,622,8,19,1,19,
1,19,1,19,5,19,627,8,19,10,19,12,19,630,9,19,1,20,1,20,1,20,3,20,635,8,20,
1,20,1,20,1,20,1,20,1,20,5,20,642,8,20,10,20,12,20,645,9,20,3,20,647,8,20,
1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,656,8,21,1,22,1,22,1,22,1,22,1,22,
1,22,3,22,664,8,22,1,22,1,22,1,22,1,22,1,22,5,22,671,8,22,10,22,12,22,674,
9,22,3,22,676,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,3,24,687,
8,24,1,24,1,24,1,24,1,24,3,24,693,8,24,1,24,1,24,1,24,1,24,1,24,3,24,700,
8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,711,8,24,3,24,713,
8,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,27,3,27,724,8,27,1,27,1,27,
1,27,1,27,1,27,3,27,731,8,27,3,27,733,8,27,1,28,1,28,1,28,3,28,738,8,28,
1,28,1,28,1,28,1,28,3,28,744,8,28,1,28,1,28,3,28,748,8,28,1,28,1,28,3,28,
752,8,28,1,29,1,29,1,29,5,29,757,8,29,10,29,12,29,760,9,29,1,30,1,30,1,30,
3,30,765,8,30,1,31,5,31,768,8,31,10,31,12,31,771,9,31,1,32,1,32,1,32,1,32,
1,32,1,32,3,32,779,8,32,1,33,1,33,1,33,5,33,784,8,33,10,33,12,33,787,9,33,
1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,3,36,800,8,36,1,37,
1,37,1,38,1,38,1,38,5,38,807,8,38,10,38,12,38,810,9,38,1,39,1,39,1,39,1,
39,1,39,1,39,1,39,1,39,3,39,820,8,39,1,40,1,40,5,40,824,8,40,10,40,12,40,
827,9,40,1,40,1,40,1,41,1,41,1,41,3,41,834,8,41,1,42,1,42,1,42,1,42,1,42,
3,42,841,8,42,1,43,1,43,1,43,1,43,5,43,847,8,43,10,43,12,43,850,9,43,1,44,
1,44,1,44,3,44,855,8,44,1,44,3,44,858,8,44,1,44,3,44,861,8,44,1,44,1,44,
1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,5,47,877,8,47,
10,47,12,47,880,9,47,1,48,1,48,1,48,3,48,885,8,48,1,48,1,48,1,48,1,49,1,
49,1,49,3,49,893,8,49,1,50,1,50,1,50,1,50,1,50,3,50,900,8,50,1,50,1,50,1,
50,1,50,3,50,906,8,50,1,51,1,51,1,51,1,51,1,51,3,51,913,8,51,1,51,1,51,1,
51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,53,3,53,926,8,53,1,53,1,53,1,53,
1,53,1,53,1,54,1,54,3,54,935,8,54,1,54,3,54,938,8,54,1,54,1,54,1,54,3,54,
943,8,54,1,54,1,54,1,54,3,54,948,8,54,1,55,1,55,1,55,1,55,1,56,1,56,1,56,
1,57,1,57,1,57,1,57,1,58,1,58,1,58,5,58,964,8,58,10,58,12,58,967,9,58,1,
59,1,59,1,59,3,59,972,8,59,1,59,1,59,3,59,976,8,59,1,59,1,59,3,59,980,8,
59,1,60,3,60,983,8,60,1,60,1,60,1,60,1,60,1,60,5,60,990,8,60,10,60,12,60,
993,9,60,1,61,1,61,3,61,997,8,61,1,61,1,61,3,61,1001,8,61,1,61,1,61,3,61,
1005,8,61,1,62,1,62,1,62,1,63,1,63,1,63,1,63,5,63,1014,8,63,10,63,12,63,
1017,9,63,1,63,1,63,1,63,1,64,1,64,1,64,3,64,1025,8,64,1,64,1,64,1,64,1,
65,1,65,1,65,1,65,1,65,4,65,1035,8,65,11,65,12,65,1036,1,65,1,65,1,65,1,
65,1,66,1,66,4,66,1045,8,66,11,66,12,66,1046,1,66,1,66,1,66,1,67,1,67,1,
68,1,68,1,68,1,68,1,68,4,68,1059,8,68,11,68,12,68,1060,1,68,1,68,1,68,3,
68,1066,8,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,3,69,1076,8,69,1,69,
1,69,1,69,1,69,1,70,1,70,1,70,5,70,1085,8,70,10,70,12,70,1088,9,70,1,71,
1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,4,72,1101,8,72,11,72,12,
72,1102,1,73,1,73,1,73,1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,
1117,8,75,1,75,1,75,1,76,1,76,3,76,1123,8,76,1,76,1,76,1,77,1,77,1,77,5,
77,1130,8,77,10,77,12,77,1133,9,77,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1141,
8,78,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,
81,1,81,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,5,84,1169,
8,84,10,84,12,84,1172,9,84,1,85,1,85,1,85,5,85,1177,8,85,10,85,12,85,1180,
9,85,1,86,1,86,1,86,1,86,3,86,1186,8,86,1,86,1,86,3,86,1190,8,86,1,87,1,
87,1,87,5,87,1195,8,87,10,87,12,87,1198,9,87,1,88,1,88,1,88,3,88,1203,8,
88,1,89,1,89,1,89,5,89,1208,8,89,10,89,12,89,1211,9,89,1,90,1,90,1,90,5,
90,1216,8,90,10,90,12,90,1219,9,90,1,91,1,91,1,91,5,91,1224,8,91,10,91,12,
91,1227,9,91,1,92,1,92,1,92,5,92,1232,8,92,10,92,12,92,1235,9,92,1,93,1,
93,1,93,1,93,3,93,1241,8,93,1,94,1,94,1,94,1,94,3,94,1247,8,94,1,95,1,95,
1,95,1,95,3,95,1253,8,95,1,96,1,96,1,96,1,96,3,96,1259,8,96,1,97,1,97,1,
97,1,97,1,97,5,97,1266,8,97,10,97,12,97,1269,9,97,1,98,5,98,1272,8,98,10,
98,12,98,1275,9,98,1,98,1,98,1,99,1,99,1,99,3,99,1282,8,99,1,100,1,100,1,
100,1,100,1,100,1,100,1,100,1,100,3,100,1292,8,100,1,101,1,101,1,102,1,102,
1,102,1,102,1,102,3,102,1301,8,102,1,103,1,103,1,103,1,103,3,103,1307,8,
103,1,103,1,103,1,104,1,104,1,105,4,105,1314,8,105,11,105,12,105,1315,1,
105,1,105,1,105,1,105,1,106,1,106,1,106,5,106,1325,8,106,10,106,12,106,1328,
9,106,1,107,1,107,3,107,1332,8,107,1,107,1,107,1,107,1,107,3,107,1338,8,
107,1,108,1,108,1,108,3,108,1343,8,108,1,108,5,108,1346,8,108,10,108,12,
108,1349,9,108,1,109,1,109,1,110,1,110,3,110,1355,8,110,1,111,1,111,3,111,
1359,8,111,1,111,1,111,1,112,1,112,1,112,1,112,3,112,1367,8,112,1,113,1,
113,1,113,1,113,1,114,3,114,1374,8,114,1,114,1,114,1,115,1,115,1,115,1,115,
3,115,1382,8,115,1,116,1,116,1,116,1,116,1,117,1,117,1,118,1,118,3,118,1392,
8,118,1,119,1,119,3,119,1396,8,119,1,120,1,120,1,120,3,120,1401,8,120,1,
121,1,121,1,121,1,121,5,121,1407,8,121,10,121,12,121,1410,9,121,1,122,1,
122,1,122,1,122,5,122,1416,8,122,10,122,12,122,1419,9,122,3,122,1421,8,122,
1,122,1,122,1,123,5,123,1426,8,123,10,123,12,123,1429,9,123,1,124,1,124,
1,124,1,124,1,125,1,125,1,125,1,126,1,126,1,126,1,126,3,126,1442,8,126,1,
127,1,127,1,127,3,127,1447,8,127,1,128,1,128,1,128,1,128,1,128,1,128,1,128,
1,128,1,128,1,128,1,128,1,128,1,128,3,128,1462,8,128,1,129,1,129,3,129,1466,
8,129,1,130,1,130,1,131,1,131,1,131,1,132,1,132,1,133,1,133,3,133,1477,8,
133,1,133,1,133,1,134,1,134,1,135,1,135,1,135,1,136,1,136,1,136,1,137,1,
137,1,137,1,138,1,138,3,138,1494,8,138,1,139,1,139,3,139,1498,8,139,1,140,
1,140,1,140,3,140,1503,8,140,1,141,1,141,1,141,1,141,1,141,5,141,1510,8,
141,10,141,12,141,1513,9,141,1,141,1,141,1,141,1,141,1,141,1,142,1,142,1,
142,1,142,1,142,1,142,1,143,1,143,1,143,1,143,5,143,1530,8,143,10,143,12,
143,1533,9,143,1,144,1,144,1,144,1,144,1,144,5,144,1540,8,144,10,144,12,
144,1543,9,144,1,144,1,144,1,145,1,145,1,145,1,145,1,145,5,145,1552,8,145,
10,145,12,145,1555,9,145,1,145,1,145,1,146,1,146,3,146,1561,8,146,1,147,
4,147,1564,8,147,11,147,12,147,1565,1,147,1,147,1,147,1,147,1,147,3,147,
1573,8,147,1,147,3,147,1576,8,147,1,148,4,148,1579,8,148,11,148,12,148,1580,
1,148,1,148,1,148,1,148,1,148,3,148,1588,8,148,1,148,3,148,1591,8,148,1,
149,1,149,1,149,1,149,1,149,1,149,3,149,1599,8,149,1,150,1,150,1,150,1,150,
1,150,1,150,1,150,1,150,1,150,3,150,1610,8,150,1,151,1,151,1,151,1,151,1,
151,1,151,1,151,1,151,3,151,1620,8,151,1,152,1,152,1,152,1,152,1,152,1,152,
3,152,1628,8,152,1,153,1,153,1,153,1,154,1,154,1,154,1,154,1,154,1,154,1,
154,1,154,1,154,1,154,5,154,1643,8,154,10,154,12,154,1646,9,154,3,154,1648,
8,154,1,154,1,154,1,155,1,155,1,155,1,156,1,156,1,156,1,156,1,156,1,157,
1,157,1,157,1,157,1,158,1,158,1,158,1,159,1,159,1,159,1,160,1,160,1,160,
1,160,1,160,1,160,3,160,1676,8,160,1,160,1,160,1,161,1,161,1,162,1,162,1,
162,1,162,1,162,1,162,3,162,1688,8,162,1,162,1,162,1,163,1,163,1,163,3,163,
1695,8,163,1,163,1,163,1,164,1,164,1,165,1,165,1,166,1,166,1,167,1,167,1,
167,1,168,1,168,1,168,1,169,1,169,1,169,1,169,1,169,1,169,3,169,1717,8,169,
1,169,1,169,1,170,1,170,3,170,1723,8,170,1,171,1,171,1,171,1,171,1,172,1,
172,1,172,1,172,3,172,1733,8,172,1,172,1,172,1,172,3,172,1738,8,172,1,172,
1,172,1,173,1,173,1,174,1,174,1,174,1,174,1,174,5,174,1749,8,174,10,174,
12,174,1752,9,174,3,174,1754,8,174,1,174,1,174,1,175,1,175,1,175,1,175,1,
176,1,176,3,176,1764,8,176,1,177,1,177,1,177,1,177,5,177,1770,8,177,10,177,
12,177,1773,9,177,3,177,1775,8,177,1,177,1,177,1,178,1,178,1,178,1,179,1,
179,1,179,1,179,1,180,1,180,1,180,1,180,5,180,1790,8,180,10,180,12,180,1793,
9,180,1,181,1,181,1,182,1,182,1,183,1,183,1,184,1,184,1,184,1,184,1,184,
1,184,1,184,1,184,1,184,1,184,5,184,1811,8,184,10,184,12,184,1814,9,184,
1,185,1,185,1,185,1,185,1,186,1,186,1,186,1,187,1,187,3,187,1825,8,187,1,
188,1,188,1,188,1,189,1,189,1,189,1,189,1,189,3,189,1835,8,189,3,189,1837,
8,189,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,3,190,1848,8,
190,1,191,1,191,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,
192,1,192,1,192,3,192,1864,8,192,1,193,1,193,1,193,3,193,1869,8,193,1,193,
1,193,1,194,1,194,1,194,1,194,1,195,1,195,1,195,1,195,3,195,1881,8,195,1,
195,1,195,1,196,1,196,1,197,1,197,1,197,1,197,1,198,1,198,1,198,1,198,1,
199,1,199,1,199,1,199,3,199,1899,8,199,1,199,1,199,1,200,1,200,1,200,1,200,
1,200,3,200,1908,8,200,3,200,1910,8,200,1,200,1,200,1,201,1,201,3,201,1916,
8,201,1,202,1,202,1,202,1,202,1,202,1,203,1,203,1,203,1,203,1,203,1,203,
3,203,1929,8,203,3,203,1931,8,203,3,203,1933,8,203,1,203,1,203,1,204,1,204,
3,204,1939,8,204,1,205,1,205,1,205,1,205,1,205,1,206,1,206,1,207,1,207,1,
208,1,208,1,209,1,209,1,210,1,210,1,211,5,211,1957,8,211,10,211,12,211,1960,
9,211,1,211,1,211,3,211,1964,8,211,1,212,1,212,1,212,1,212,1,212,1,213,1,
213,1,213,1,213,1,213,5,213,1976,8,213,10,213,12,213,1979,9,213,3,213,1981,
8,213,1,213,1,213,1,213,1,213,1,214,1,214,3,214,1989,8,214,1,215,1,215,1,
215,1,215,1,215,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,217,1,217,3,
217,2005,8,217,1,218,1,218,1,218,1,218,1,218,1,219,1,219,1,219,1,219,1,219,
1,220,1,220,1,220,1,220,1,221,1,221,1,222,1,222,1,222,1,222,1,222,3,222,
2028,8,222,1,223,1,223,1,223,3,223,2033,8,223,1,223,1,223,1,224,1,224,1,
224,3,224,2040,8,224,1,224,1,224,1,225,1,225,1,225,3,225,2047,8,225,1,225,
1,225,1,226,1,226,1,226,3,226,2054,8,226,1,226,1,226,1,227,1,227,1,227,3,
227,2061,8,227,1,227,1,227,1,228,1,228,3,228,2067,8,228,1,229,1,229,3,229,
2071,8,229,1,230,1,230,3,230,2075,8,230,1,231,1,231,1,231,1,231,3,231,2081,
8,231,1,232,1,232,3,232,2085,8,232,1,233,1,233,1,234,1,234,1,235,1,235,1,
236,1,236,1,236,1,236,1,236,5,236,2098,8,236,10,236,12,236,2101,9,236,1,
236,1,236,1,237,1,237,1,237,1,237,1,237,5,237,2110,8,237,10,237,12,237,2113,
9,237,1,237,1,237,1,238,1,238,3,238,2119,8,238,1,239,4,239,2122,8,239,11,
239,12,239,2123,1,239,1,239,3,239,2128,8,239,1,239,3,239,2131,8,239,1,239,
1,239,1,239,1,239,1,239,3,239,2138,8,239,1,240,4,240,2141,8,240,11,240,12,
240,2142,1,240,1,240,3,240,2147,8,240,1,240,3,240,2150,8,240,1,240,1,240,
1,240,1,240,1,240,3,240,2157,8,240,1,241,1,241,4,241,2161,8,241,11,241,12,
241,2162,1,241,0,0,242,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,
304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,
340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,
376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,
412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,
448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,
0,29,2,0,86,86,99,99,2,0,138,138,152,152,2,0,133,133,163,163,2,0,101,101,
115,115,2,0,126,126,138,138,2,0,108,108,125,125,2,0,59,59,81,81,2,0,93,93,
148,148,3,0,96,96,136,136,181,181,1,0,28,29,4,0,27,27,83,83,104,104,119,
119,2,0,39,39,162,162,2,0,94,94,110,110,6,0,92,92,100,100,103,103,114,114,
117,117,122,122,2,0,58,58,160,160,2,0,113,113,151,151,5,0,61,61,70,70,79,
80,96,97,146,146,2,0,54,55,135,137,1,0,5,7,2,0,13,13,15,15,1,0,9,10,1,0,
33,34,2,0,24,25,199,199,3,0,24,24,50,50,199,199,3,0,25,25,50,50,199,199,
2,0,27,28,42,42,28,0,8,8,53,53,57,57,61,61,64,64,69,69,72,72,74,74,76,76,
82,82,85,86,89,89,91,91,105,105,112,112,118,118,123,124,127,127,129,129,
140,140,144,145,147,147,153,154,158,161,164,164,168,168,170,170,172,183,
26,0,54,56,58,60,62,63,65,68,70,71,73,73,75,75,77,81,83,84,87,88,90,90,92,
104,106,111,113,117,119,122,125,126,128,128,130,138,141,143,146,146,148,
152,155,157,162,163,165,167,169,169,171,171,12,0,5,7,13,13,17,17,19,24,27,
39,41,50,52,52,123,123,139,139,184,188,191,191,198,198,2249,0,485,1,0,0,
0,2,507,1,0,0,0,4,509,1,0,0,0,6,518,1,0,0,0,8,521,1,0,0,0,10,523,1,0,0,0,
12,526,1,0,0,0,14,544,1,0,0,0,16,563,1,0,0,0,18,577,1,0,0,0,20,579,1,0,0,
0,22,583,1,0,0,0,24,588,1,0,0,0,26,592,1,0,0,0,28,596,1,0,0,0,30,600,1,0,
0,0,32,606,1,0,0,0,34,612,1,0,0,0,36,614,1,0,0,0,38,616,1,0,0,0,40,631,1,
0,0,0,42,655,1,0,0,0,44,657,1,0,0,0,46,677,1,0,0,0,48,683,1,0,0,0,50,714,
1,0,0,0,52,716,1,0,0,0,54,718,1,0,0,0,56,734,1,0,0,0,58,753,1,0,0,0,60,761,
1,0,0,0,62,769,1,0,0,0,64,772,1,0,0,0,66,780,1,0,0,0,68,788,1,0,0,0,70,790,
1,0,0,0,72,793,1,0,0,0,74,801,1,0,0,0,76,803,1,0,0,0,78,819,1,0,0,0,80,821,
1,0,0,0,82,833,1,0,0,0,84,840,1,0,0,0,86,842,1,0,0,0,88,851,1,0,0,0,90,865,
1,0,0,0,92,868,1,0,0,0,94,872,1,0,0,0,96,881,1,0,0,0,98,889,1,0,0,0,100,
894,1,0,0,0,102,907,1,0,0,0,104,919,1,0,0,0,106,925,1,0,0,0,108,934,1,0,
0,0,110,949,1,0,0,0,112,953,1,0,0,0,114,956,1,0,0,0,116,960,1,0,0,0,118,
968,1,0,0,0,120,982,1,0,0,0,122,994,1,0,0,0,124,1006,1,0,0,0,126,1009,1,
0,0,0,128,1021,1,0,0,0,130,1029,1,0,0,0,132,1044,1,0,0,0,134,1051,1,0,0,
0,136,1053,1,0,0,0,138,1070,1,0,0,0,140,1081,1,0,0,0,142,1089,1,0,0,0,144,
1098,1,0,0,0,146,1104,1,0,0,0,148,1107,1,0,0,0,150,1109,1,0,0,0,152,1120,
1,0,0,0,154,1126,1,0,0,0,156,1134,1,0,0,0,158,1142,1,0,0,0,160,1147,1,0,
0,0,162,1152,1,0,0,0,164,1157,1,0,0,0,166,1160,1,0,0,0,168,1165,1,0,0,0,
170,1173,1,0,0,0,172,1181,1,0,0,0,174,1191,1,0,0,0,176,1199,1,0,0,0,178,
1204,1,0,0,0,180,1212,1,0,0,0,182,1220,1,0,0,0,184,1228,1,0,0,0,186,1236,
1,0,0,0,188,1242,1,0,0,0,190,1248,1,0,0,0,192,1254,1,0,0,0,194,1260,1,0,
0,0,196,1273,1,0,0,0,198,1281,1,0,0,0,200,1291,1,0,0,0,202,1293,1,0,0,0,
204,1300,1,0,0,0,206,1302,1,0,0,0,208,1310,1,0,0,0,210,1313,1,0,0,0,212,
1321,1,0,0,0,214,1337,1,0,0,0,216,1339,1,0,0,0,218,1350,1,0,0,0,220,1354,
1,0,0,0,222,1358,1,0,0,0,224,1366,1,0,0,0,226,1368,1,0,0,0,228,1373,1,0,
0,0,230,1381,1,0,0,0,232,1383,1,0,0,0,234,1387,1,0,0,0,236,1391,1,0,0,0,
238,1395,1,0,0,0,240,1400,1,0,0,0,242,1402,1,0,0,0,244,1411,1,0,0,0,246,
1427,1,0,0,0,248,1430,1,0,0,0,250,1434,1,0,0,0,252,1441,1,0,0,0,254,1446,
1,0,0,0,256,1461,1,0,0,0,258,1465,1,0,0,0,260,1467,1,0,0,0,262,1469,1,0,
0,0,264,1472,1,0,0,0,266,1474,1,0,0,0,268,1480,1,0,0,0,270,1482,1,0,0,0,
272,1485,1,0,0,0,274,1488,1,0,0,0,276,1493,1,0,0,0,278,1497,1,0,0,0,280,
1502,1,0,0,0,282,1504,1,0,0,0,284,1519,1,0,0,0,286,1531,1,0,0,0,288,1534,
1,0,0,0,290,1546,1,0,0,0,292,1560,1,0,0,0,294,1575,1,0,0,0,296,1590,1,0,
0,0,298,1598,1,0,0,0,300,1609,1,0,0,0,302,1619,1,0,0,0,304,1627,1,0,0,0,
306,1629,1,0,0,0,308,1632,1,0,0,0,310,1651,1,0,0,0,312,1654,1,0,0,0,314,
1659,1,0,0,0,316,1663,1,0,0,0,318,1666,1,0,0,0,320,1669,1,0,0,0,322,1679,
1,0,0,0,324,1681,1,0,0,0,326,1691,1,0,0,0,328,1698,1,0,0,0,330,1700,1,0,
0,0,332,1702,1,0,0,0,334,1704,1,0,0,0,336,1707,1,0,0,0,338,1710,1,0,0,0,
340,1722,1,0,0,0,342,1724,1,0,0,0,344,1728,1,0,0,0,346,1741,1,0,0,0,348,
1743,1,0,0,0,350,1757,1,0,0,0,352,1763,1,0,0,0,354,1765,1,0,0,0,356,1778,
1,0,0,0,358,1781,1,0,0,0,360,1785,1,0,0,0,362,1794,1,0,0,0,364,1796,1,0,
0,0,366,1798,1,0,0,0,368,1812,1,0,0,0,370,1815,1,0,0,0,372,1819,1,0,0,0,
374,1822,1,0,0,0,376,1826,1,0,0,0,378,1836,1,0,0,0,380,1847,1,0,0,0,382,
1849,1,0,0,0,384,1863,1,0,0,0,386,1865,1,0,0,0,388,1872,1,0,0,0,390,1876,
1,0,0,0,392,1884,1,0,0,0,394,1886,1,0,0,0,396,1890,1,0,0,0,398,1894,1,0,
0,0,400,1902,1,0,0,0,402,1915,1,0,0,0,404,1917,1,0,0,0,406,1922,1,0,0,0,
408,1938,1,0,0,0,410,1940,1,0,0,0,412,1945,1,0,0,0,414,1947,1,0,0,0,416,
1949,1,0,0,0,418,1951,1,0,0,0,420,1953,1,0,0,0,422,1958,1,0,0,0,424,1965,
1,0,0,0,426,1970,1,0,0,0,428,1988,1,0,0,0,430,1990,1,0,0,0,432,1995,1,0,
0,0,434,2004,1,0,0,0,436,2006,1,0,0,0,438,2011,1,0,0,0,440,2016,1,0,0,0,
442,2020,1,0,0,0,444,2027,1,0,0,0,446,2029,1,0,0,0,448,2036,1,0,0,0,450,
2043,1,0,0,0,452,2050,1,0,0,0,454,2057,1,0,0,0,456,2066,1,0,0,0,458,2070,
1,0,0,0,460,2074,1,0,0,0,462,2080,1,0,0,0,464,2084,1,0,0,0,466,2086,1,0,
0,0,468,2088,1,0,0,0,470,2090,1,0,0,0,472,2092,1,0,0,0,474,2104,1,0,0,0,
476,2118,1,0,0,0,478,2137,1,0,0,0,480,2156,1,0,0,0,482,2160,1,0,0,0,484,
486,3,2,1,0,485,484,1,0,0,0,485,486,1,0,0,0,486,488,1,0,0,0,487,489,3,4,
2,0,488,487,1,0,0,0,488,489,1,0,0,0,489,491,1,0,0,0,490,492,3,2,1,0,491,
490,1,0,0,0,491,492,1,0,0,0,492,505,1,0,0,0,493,506,3,10,5,0,494,502,3,6,
3,0,495,497,5,35,0,0,496,498,3,4,2,0,497,496,1,0,0,0,497,498,1,0,0,0,498,
499,1,0,0,0,499,501,3,6,3,0,500,495,1,0,0,0,501,504,1,0,0,0,502,500,1,0,
0,0,502,503,1,0,0,0,503,506,1,0,0,0,504,502,1,0,0,0,505,493,1,0,0,0,505,
494,1,0,0,0,506,1,1,0,0,0,507,508,5,193,0,0,508,3,1,0,0,0,509,510,5,171,
0,0,510,511,5,167,0,0,511,514,3,476,238,0,512,513,5,90,0,0,513,515,3,476,
238,0,514,512,1,0,0,0,514,515,1,0,0,0,515,516,1,0,0,0,516,517,5,35,0,0,517,
5,1,0,0,0,518,519,3,14,7,0,519,520,3,8,4,0,520,7,1,0,0,0,521,522,3,76,38,
0,522,9,1,0,0,0,523,524,3,12,6,0,524,525,3,14,7,0,525,11,1,0,0,0,526,527,
5,120,0,0,527,528,5,121,0,0,528,529,3,460,230,0,529,530,5,19,0,0,530,531,
3,476,238,0,531,532,5,35,0,0,532,13,1,0,0,0,533,539,3,16,8,0,534,539,3,18,
9,0,535,539,3,46,23,0,536,539,3,40,20,0,537,539,3,44,22,0,538,533,1,0,0,
0,538,534,1,0,0,0,538,535,1,0,0,0,538,536,1,0,0,0,538,537,1,0,0,0,539,540,
1,0,0,0,540,541,5,35,0,0,541,543,1,0,0,0,542,538,1,0,0,0,543,546,1,0,0,0,
544,542,1,0,0,0,544,545,1,0,0,0,545,560,1,0,0,0,546,544,1,0,0,0,547,549,
3,2,1,0,548,547,1,0,0,0,548,549,1,0,0,0,549,554,1,0,0,0,550,555,3,48,24,
0,551,555,3,56,28,0,552,555,3,54,27,0,553,555,3,72,36,0,554,550,1,0,0,0,
554,551,1,0,0,0,554,552,1,0,0,0,554,553,1,0,0,0,555,556,1,0,0,0,556,557,
5,35,0,0,557,559,1,0,0,0,558,548,1,0,0,0,559,562,1,0,0,0,560,558,1,0,0,0,
560,561,1,0,0,0,561,15,1,0,0,0,562,560,1,0,0,0,563,564,5,77,0,0,564,565,
5,78,0,0,565,566,7,0,0,0,566,567,5,121,0,0,567,568,3,476,238,0,568,17,1,
0,0,0,569,578,3,20,10,0,570,578,3,22,11,0,571,578,3,24,12,0,572,578,3,26,
13,0,573,578,3,28,14,0,574,578,3,30,15,0,575,578,3,32,16,0,576,578,3,38,
19,0,577,569,1,0,0,0,577,570,1,0,0,0,577,571,1,0,0,0,577,572,1,0,0,0,577,
573,1,0,0,0,577,574,1,0,0,0,577,575,1,0,0,0,577,576,1,0,0,0,578,19,1,0,0,
0,579,580,5,77,0,0,580,581,5,63,0,0,581,582,7,1,0,0,582,21,1,0,0,0,583,584,
5,77,0,0,584,585,5,78,0,0,585,586,5,71,0,0,586,587,3,470,235,0,587,23,1,
0,0,0,588,589,5,77,0,0,589,590,5,62,0,0,590,591,3,470,235,0,591,25,1,0,0,
0,592,593,5,77,0,0,593,594,5,73,0,0,594,595,7,1,0,0,595,27,1,0,0,0,596,597,
5,77,0,0,597,598,5,134,0,0,598,599,7,2,0,0,599,29,1,0,0,0,600,601,5,77,0,
0,601,602,5,78,0,0,602,603,5,132,0,0,603,604,5,88,0,0,604,605,7,3,0,0,605,
31,1,0,0,0,606,607,5,77,0,0,607,608,5,75,0,0,608,609,3,34,17,0,609,610,5,
30,0,0,610,611,3,36,18,0,611,33,1,0,0,0,612,613,7,4,0,0,613,35,1,0,0,0,614,
615,7,5,0,0,615,37,1,0,0,0,616,621,5,77,0,0,617,618,5,82,0,0,618,622,3,456,
228,0,619,620,5,78,0,0,620,622,5,82,0,0,621,617,1,0,0,0,621,619,1,0,0,0,
622,628,1,0,0,0,623,624,5,8,0,0,624,625,5,19,0,0,625,627,3,476,238,0,626,
623,1,0,0,0,627,630,1,0,0,0,628,626,1,0,0,0,628,629,1,0,0,0,629,39,1,0,0,
0,630,628,1,0,0,0,631,632,5,106,0,0,632,634,5,143,0,0,633,635,3,42,21,0,
634,633,1,0,0,0,634,635,1,0,0,0,635,636,1,0,0,0,636,646,3,470,235,0,637,
638,5,60,0,0,638,643,3,470,235,0,639,640,5,30,0,0,640,642,3,470,235,0,641,
639,1,0,0,0,642,645,1,0,0,0,643,641,1,0,0,0,643,644,1,0,0,0,644,647,1,0,
0,0,645,643,1,0,0,0,646,637,1,0,0,0,646,647,1,0,0,0,647,41,1,0,0,0,648,649,
5,121,0,0,649,650,3,460,230,0,650,651,5,19,0,0,651,656,1,0,0,0,652,653,5,
78,0,0,653,654,5,86,0,0,654,656,5,121,0,0,655,648,1,0,0,0,655,652,1,0,0,
0,656,43,1,0,0,0,657,658,5,106,0,0,658,663,5,120,0,0,659,660,5,121,0,0,660,
661,3,460,230,0,661,662,5,19,0,0,662,664,1,0,0,0,663,659,1,0,0,0,663,664,
1,0,0,0,664,665,1,0,0,0,665,675,3,470,235,0,666,667,5,60,0,0,667,672,3,470,
235,0,668,669,5,30,0,0,669,671,3,470,235,0,670,668,1,0,0,0,671,674,1,0,0,
0,672,670,1,0,0,0,672,673,1,0,0,0,673,676,1,0,0,0,674,672,1,0,0,0,675,666,
1,0,0,0,675,676,1,0,0,0,676,45,1,0,0,0,677,678,5,77,0,0,678,679,5,121,0,
0,679,680,3,460,230,0,680,681,5,19,0,0,681,682,3,470,235,0,682,47,1,0,0,
0,683,686,5,77,0,0,684,687,3,62,31,0,685,687,3,460,230,0,686,684,1,0,0,0,
686,685,1,0,0,0,687,688,1,0,0,0,688,689,5,166,0,0,689,690,5,44,0,0,690,692,
3,264,132,0,691,693,3,376,188,0,692,691,1,0,0,0,692,693,1,0,0,0,693,712,
1,0,0,0,694,695,5,34,0,0,695,713,3,50,25,0,696,699,5,95,0,0,697,698,5,34,
0,0,698,700,3,52,26,0,699,697,1,0,0,0,699,700,1,0,0,0,700,713,1,0,0,0,701,
702,5,25,0,0,702,703,3,50,25,0,703,704,5,26,0,0,704,713,1,0,0,0,705,710,
5,95,0,0,706,707,5,25,0,0,707,708,3,52,26,0,708,709,5,26,0,0,709,711,1,0,
0,0,710,706,1,0,0,0,710,711,1,0,0,0,711,713,1,0,0,0,712,694,1,0,0,0,712,
696,1,0,0,0,712,701,1,0,0,0,712,705,1,0,0,0,713,49,1,0,0,0,714,715,3,76,
38,0,715,51,1,0,0,0,716,717,3,76,38,0,717,53,1,0,0,0,718,719,5,77,0,0,719,
720,5,74,0,0,720,723,5,112,0,0,721,722,5,58,0,0,722,724,3,380,190,0,723,
721,1,0,0,0,723,724,1,0,0,0,724,732,1,0,0,0,725,726,5,34,0,0,726,733,3,78,
39,0,727,730,5,95,0,0,728,729,5,34,0,0,729,731,3,78,39,0,730,728,1,0,0,0,
730,731,1,0,0,0,731,733,1,0,0,0,732,725,1,0,0,0,732,727,1,0,0,0,733,55,1,
0,0,0,734,737,5,77,0,0,735,738,3,62,31,0,736,738,3,460,230,0,737,735,1,0,
0,0,737,736,1,0,0,0,738,739,1,0,0,0,739,740,5,99,0,0,740,741,3,456,228,0,
741,743,5,21,0,0,742,744,3,58,29,0,743,742,1,0,0,0,743,744,1,0,0,0,744,745,
1,0,0,0,745,747,5,22,0,0,746,748,3,70,35,0,747,746,1,0,0,0,747,748,1,0,0,
0,748,751,1,0,0,0,749,752,3,346,173,0,750,752,5,95,0,0,751,749,1,0,0,0,751,
750,1,0,0,0,752,57,1,0,0,0,753,758,3,60,30,0,754,755,5,30,0,0,755,757,3,
60,30,0,756,754,1,0,0,0,757,760,1,0,0,0,758,756,1,0,0,0,758,759,1,0,0,0,
759,59,1,0,0,0,760,758,1,0,0,0,761,762,5,44,0,0,762,764,3,458,229,0,763,
765,3,376,188,0,764,763,1,0,0,0,764,765,1,0,0,0,765,61,1,0,0,0,766,768,3,
64,32,0,767,766,1,0,0,0,768,771,1,0,0,0,769,767,1,0,0,0,769,770,1,0,0,0,
770,63,1,0,0,0,771,769,1,0,0,0,772,773,5,45,0,0,773,778,3,458,229,0,774,
775,5,21,0,0,775,776,3,66,33,0,776,777,5,22,0,0,777,779,1,0,0,0,778,774,
1,0,0,0,778,779,1,0,0,0,779,65,1,0,0,0,780,785,3,68,34,0,781,782,5,30,0,
0,782,784,3,68,34,0,783,781,1,0,0,0,784,787,1,0,0,0,785,783,1,0,0,0,785,
786,1,0,0,0,786,67,1,0,0,0,787,785,1,0,0,0,788,789,3,258,129,0,789,69,1,
0,0,0,790,791,5,58,0,0,791,792,3,378,189,0,792,71,1,0,0,0,793,794,5,77,0,
0,794,799,5,130,0,0,795,796,3,458,229,0,796,797,3,476,238,0,797,800,1,0,
0,0,798,800,3,74,37,0,799,795,1,0,0,0,799,798,1,0,0,0,800,73,1,0,0,0,801,
802,5,189,0,0,802,75,1,0,0,0,803,808,3,78,39,0,804,805,5,30,0,0,805,807,
3,78,39,0,806,804,1,0,0,0,807,810,1,0,0,0,808,806,1,0,0,0,808,809,1,0,0,
0,809,77,1,0,0,0,810,808,1,0,0,0,811,820,3,80,40,0,812,820,3,126,63,0,813,
820,3,130,65,0,814,820,3,136,68,0,815,820,3,156,78,0,816,820,3,142,71,0,
817,820,3,144,72,0,818,820,3,168,84,0,819,811,1,0,0,0,819,812,1,0,0,0,819,
813,1,0,0,0,819,814,1,0,0,0,819,815,1,0,0,0,819,816,1,0,0,0,819,817,1,0,
0,0,819,818,1,0,0,0,820,79,1,0,0,0,821,825,3,82,41,0,822,824,3,84,42,0,823,
822,1,0,0,0,824,827,1,0,0,0,825,823,1,0,0,0,825,826,1,0,0,0,826,828,1,0,
0,0,827,825,1,0,0,0,828,829,3,124,62,0,829,81,1,0,0,0,830,834,3,86,43,0,
831,834,3,94,47,0,832,834,3,98,49,0,833,830,1,0,0,0,833,831,1,0,0,0,833,
832,1,0,0,0,834,83,1,0,0,0,835,841,3,82,41,0,836,841,3,112,56,0,837,841,
3,114,57,0,838,841,3,120,60,0,839,841,3,110,55,0,840,835,1,0,0,0,840,836,
1,0,0,0,840,837,1,0,0,0,840,838,1,0,0,0,840,839,1,0,0,0,841,85,1,0,0,0,842,
843,5,98,0,0,843,848,3,88,44,0,844,845,5,30,0,0,845,847,3,88,44,0,846,844,
1,0,0,0,847,850,1,0,0,0,848,846,1,0,0,0,848,849,1,0,0,0,849,87,1,0,0,0,850,
848,1,0,0,0,851,852,5,44,0,0,852,854,3,264,132,0,853,855,3,376,188,0,854,
853,1,0,0,0,854,855,1,0,0,0,855,857,1,0,0,0,856,858,3,90,45,0,857,856,1,
0,0,0,857,858,1,0,0,0,858,860,1,0,0,0,859,861,3,92,46,0,860,859,1,0,0,0,
860,861,1,0,0,0,861,862,1,0,0,0,862,863,5,107,0,0,863,864,3,78,39,0,864,
89,1,0,0,0,865,866,5,53,0,0,866,867,5,88,0,0,867,91,1,0,0,0,868,869,5,60,
0,0,869,870,5,44,0,0,870,871,3,264,132,0,871,93,1,0,0,0,872,873,5,116,0,
0,873,878,3,96,48,0,874,875,5,30,0,0,875,877,3,96,48,0,876,874,1,0,0,0,877,
880,1,0,0,0,878,876,1,0,0,0,878,879,1,0,0,0,879,95,1,0,0,0,880,878,1,0,0,
0,881,882,5,44,0,0,882,884,3,264,132,0,883,885,3,376,188,0,884,883,1,0,0,
0,884,885,1,0,0,0,885,886,1,0,0,0,886,887,5,34,0,0,887,888,3,78,39,0,888,
97,1,0,0,0,889,892,5,98,0,0,890,893,3,100,50,0,891,893,3,102,51,0,892,890,
1,0,0,0,892,891,1,0,0,0,893,99,1,0,0,0,894,895,5,159,0,0,895,896,5,170,0,
0,896,897,5,44,0,0,897,899,3,458,229,0,898,900,3,376,188,0,899,898,1,0,0,
0,899,900,1,0,0,0,900,901,1,0,0,0,901,902,5,107,0,0,902,903,3,78,39,0,903,
905,3,104,52,0,904,906,3,106,53,0,905,904,1,0,0,0,905,906,1,0,0,0,906,101,
1,0,0,0,907,908,5,147,0,0,908,909,5,170,0,0,909,910,5,44,0,0,910,912,3,458,
229,0,911,913,3,376,188,0,912,911,1,0,0,0,912,913,1,0,0,0,913,914,1,0,0,
0,914,915,5,107,0,0,915,916,3,78,39,0,916,917,3,104,52,0,917,918,3,106,53,
0,918,103,1,0,0,0,919,920,5,150,0,0,920,921,3,108,54,0,921,922,5,168,0,0,
922,923,3,78,39,0,923,105,1,0,0,0,924,926,5,129,0,0,925,924,1,0,0,0,925,
926,1,0,0,0,926,927,1,0,0,0,927,928,5,91,0,0,928,929,3,108,54,0,929,930,
5,168,0,0,930,931,3,78,39,0,931,107,1,0,0,0,932,933,5,44,0,0,933,935,3,456,
228,0,934,932,1,0,0,0,934,935,1,0,0,0,935,937,1,0,0,0,936,938,3,92,46,0,
937,936,1,0,0,0,937,938,1,0,0,0,938,942,1,0,0,0,939,940,5,139,0,0,940,941,
5,44,0,0,941,943,3,456,228,0,942,939,1,0,0,0,942,943,1,0,0,0,943,947,1,0,
0,0,944,945,5,123,0,0,945,946,5,44,0,0,946,948,3,456,228,0,947,944,1,0,0,
0,947,948,1,0,0,0,948,109,1,0,0,0,949,950,5,76,0,0,950,951,5,44,0,0,951,
952,3,264,132,0,952,111,1,0,0,0,953,954,5,169,0,0,954,955,3,78,39,0,955,
113,1,0,0,0,956,957,5,102,0,0,957,958,5,65,0,0,958,959,3,116,58,0,959,115,
1,0,0,0,960,965,3,118,59,0,961,962,5,30,0,0,962,964,3,118,59,0,963,961,1,
0,0,0,964,967,1,0,0,0,965,963,1,0,0,0,965,966,1,0,0,0,966,117,1,0,0,0,967,
965,1,0,0,0,968,969,5,44,0,0,969,975,3,264,132,0,970,972,3,376,188,0,971,
970,1,0,0,0,971,972,1,0,0,0,972,973,1,0,0,0,973,974,5,34,0,0,974,976,3,78,
39,0,975,971,1,0,0,0,975,976,1,0,0,0,976,979,1,0,0,0,977,978,5,71,0,0,978,
980,3,470,235,0,979,977,1,0,0,0,979,980,1,0,0,0,980,119,1,0,0,0,981,983,
5,149,0,0,982,981,1,0,0,0,982,983,1,0,0,0,983,984,1,0,0,0,984,985,5,132,
0,0,985,986,5,65,0,0,986,991,3,122,61,0,987,988,5,30,0,0,988,990,3,122,61,
0,989,987,1,0,0,0,990,993,1,0,0,0,991,989,1,0,0,0,991,992,1,0,0,0,992,121,
1,0,0,0,993,991,1,0,0,0,994,996,3,78,39,0,995,997,7,6,0,0,996,995,1,0,0,
0,996,997,1,0,0,0,997,1000,1,0,0,0,998,999,5,88,0,0,999,1001,7,3,0,0,1000,
998,1,0,0,0,1000,1001,1,0,0,0,1001,1004,1,0,0,0,1002,1003,5,71,0,0,1003,
1005,3,470,235,0,1004,1002,1,0,0,0,1004,1005,1,0,0,0,1005,123,1,0,0,0,1006,
1007,5,141,0,0,1007,1008,3,78,39,0,1008,125,1,0,0,0,1009,1010,7,7,0,0,1010,
1015,3,128,64,0,1011,1012,5,30,0,0,1012,1014,3,128,64,0,1013,1011,1,0,0,
0,1014,1017,1,0,0,0,1015,1013,1,0,0,0,1015,1016,1,0,0,0,1016,1018,1,0,0,
0,1017,1015,1,0,0,0,1018,1019,5,142,0,0,1019,1020,3,78,39,0,1020,127,1,0,
0,0,1021,1022,5,44,0,0,1022,1024,3,264,132,0,1023,1025,3,376,188,0,1024,
1023,1,0,0,0,1024,1025,1,0,0,0,1025,1026,1,0,0,0,1026,1027,5,107,0,0,1027,
1028,3,78,39,0,1028,129,1,0,0,0,1029,1030,5,153,0,0,1030,1031,5,21,0,0,1031,
1032,3,76,38,0,1032,1034,5,22,0,0,1033,1035,3,132,66,0,1034,1033,1,0,0,0,
1035,1036,1,0,0,0,1036,1034,1,0,0,0,1036,1037,1,0,0,0,1037,1038,1,0,0,0,
1038,1039,5,78,0,0,1039,1040,5,141,0,0,1040,1041,3,78,39,0,1041,131,1,0,
0,0,1042,1043,5,66,0,0,1043,1045,3,134,67,0,1044,1042,1,0,0,0,1045,1046,
1,0,0,0,1046,1044,1,0,0,0,1046,1047,1,0,0,0,1047,1048,1,0,0,0,1048,1049,
5,141,0,0,1049,1050,3,78,39,0,1050,133,1,0,0,0,1051,1052,3,78,39,0,1052,
135,1,0,0,0,1053,1054,5,161,0,0,1054,1055,5,21,0,0,1055,1056,3,76,38,0,1056,
1058,5,22,0,0,1057,1059,3,138,69,0,1058,1057,1,0,0,0,1059,1060,1,0,0,0,1060,
1058,1,0,0,0,1060,1061,1,0,0,0,1061,1062,1,0,0,0,1062,1065,5,78,0,0,1063,
1064,5,44,0,0,1064,1066,3,264,132,0,1065,1063,1,0,0,0,1065,1066,1,0,0,0,
1066,1067,1,0,0,0,1067,1068,5,141,0,0,1068,1069,3,78,39,0,1069,137,1,0,0,
0,1070,1075,5,66,0,0,1071,1072,5,44,0,0,1072,1073,3,264,132,0,1073,1074,
5,58,0,0,1074,1076,1,0,0,0,1075,1071,1,0,0,0,1075,1076,1,0,0,0,1076,1077,
1,0,0,0,1077,1078,3,140,70,0,1078,1079,5,141,0,0,1079,1080,3,78,39,0,1080,
139,1,0,0,0,1081,1086,3,378,189,0,1082,1083,5,39,0,0,1083,1085,3,378,189,
0,1084,1082,1,0,0,0,1085,1088,1,0,0,0,1086,1084,1,0,0,0,1086,1087,1,0,0,
0,1087,141,1,0,0,0,1088,1086,1,0,0,0,1089,1090,5,105,0,0,1090,1091,5,21,
0,0,1091,1092,3,76,38,0,1092,1093,5,22,0,0,1093,1094,5,155,0,0,1094,1095,
3,78,39,0,1095,1096,5,87,0,0,1096,1097,3,78,39,0,1097,143,1,0,0,0,1098,1100,
3,146,73,0,1099,1101,3,150,75,0,1100,1099,1,0,0,0,1101,1102,1,0,0,0,1102,
1100,1,0,0,0,1102,1103,1,0,0,0,1103,145,1,0,0,0,1104,1105,5,158,0,0,1105,
1106,3,148,74,0,1106,147,1,0,0,0,1107,1108,3,152,76,0,1108,149,1,0,0,0,1109,
1116,5,69,0,0,1110,1117,3,154,77,0,1111,1112,5,21,0,0,1112,1113,5,44,0,0,
1113,1114,3,264,132,0,1114,1115,5,22,0,0,1115,1117,1,0,0,0,1116,1110,1,0,
0,0,1116,1111,1,0,0,0,1117,1118,1,0,0,0,1118,1119,3,152,76,0,1119,151,1,
0,0,0,1120,1122,5,25,0,0,1121,1123,3,76,38,0,1122,1121,1,0,0,0,1122,1123,
1,0,0,0,1123,1124,1,0,0,0,1124,1125,5,26,0,0,1125,153,1,0,0,0,1126,1131,
3,238,119,0,1127,1128,5,39,0,0,1128,1130,3,238,119,0,1129,1127,1,0,0,0,1130,
1133,1,0,0,0,1131,1129,1,0,0,0,1131,1132,1,0,0,0,1132,155,1,0,0,0,1133,1131,
1,0,0,0,1134,1140,5,164,0,0,1135,1141,3,158,79,0,1136,1141,3,160,80,0,1137,
1141,3,162,81,0,1138,1141,3,164,82,0,1139,1141,3,166,83,0,1140,1135,1,0,
0,0,1140,1136,1,0,0,0,1140,1137,1,0,0,0,1140,1138,1,0,0,0,1140,1139,1,0,
0,0,1141,157,1,0,0,0,1142,1143,5,177,0,0,1143,1144,3,76,38,0,1144,1145,5,
178,0,0,1145,1146,3,78,39,0,1146,159,1,0,0,0,1147,1148,5,179,0,0,1148,1149,
3,76,38,0,1149,1150,5,178,0,0,1150,1151,3,78,39,0,1151,161,1,0,0,0,1152,
1153,5,180,0,0,1153,1154,3,78,39,0,1154,1155,7,8,0,0,1155,1156,3,78,39,0,
1156,163,1,0,0,0,1157,1158,5,182,0,0,1158,1159,3,78,39,0,1159,165,1,0,0,
0,1160,1161,5,183,0,0,1161,1162,3,78,39,0,1162,1163,5,58,0,0,1163,1164,3,
78,39,0,1164,167,1,0,0,0,1165,1170,3,170,85,0,1166,1167,5,131,0,0,1167,1169,
3,170,85,0,1168,1166,1,0,0,0,1169,1172,1,0,0,0,1170,1168,1,0,0,0,1170,1171,
1,0,0,0,1171,169,1,0,0,0,1172,1170,1,0,0,0,1173,1178,3,172,86,0,1174,1175,
5,56,0,0,1175,1177,3,172,86,0,1176,1174,1,0,0,0,1177,1180,1,0,0,0,1178,1176,
1,0,0,0,1178,1179,1,0,0,0,1179,171,1,0,0,0,1180,1178,1,0,0,0,1181,1189,3,
174,87,0,1182,1186,3,202,101,0,1183,1186,3,200,100,0,1184,1186,3,204,102,
0,1185,1182,1,0,0,0,1185,1183,1,0,0,0,1185,1184,1,0,0,0,1186,1187,1,0,0,
0,1187,1188,3,174,87,0,1188,1190,1,0,0,0,1189,1185,1,0,0,0,1189,1190,1,0,
0,0,1190,173,1,0,0,0,1191,1196,3,176,88,0,1192,1193,5,51,0,0,1193,1195,3,
176,88,0,1194,1192,1,0,0,0,1195,1198,1,0,0,0,1196,1194,1,0,0,0,1196,1197,
1,0,0,0,1197,175,1,0,0,0,1198,1196,1,0,0,0,1199,1202,3,178,89,0,1200,1201,
5,156,0,0,1201,1203,3,178,89,0,1202,1200,1,0,0,0,1202,1203,1,0,0,0,1203,
177,1,0,0,0,1204,1209,3,180,90,0,1205,1206,7,9,0,0,1206,1208,3,180,90,0,
1207,1205,1,0,0,0,1208,1211,1,0,0,0,1209,1207,1,0,0,0,1209,1210,1,0,0,0,
1210,179,1,0,0,0,1211,1209,1,0,0,0,1212,1217,3,182,91,0,1213,1214,7,10,0,
0,1214,1216,3,182,91,0,1215,1213,1,0,0,0,1216,1219,1,0,0,0,1217,1215,1,0,
0,0,1217,1218,1,0,0,0,1218,181,1,0,0,0,1219,1217,1,0,0,0,1220,1225,3,184,
92,0,1221,1222,7,11,0,0,1222,1224,3,184,92,0,1223,1221,1,0,0,0,1224,1227,
1,0,0,0,1225,1223,1,0,0,0,1225,1226,1,0,0,0,1226,183,1,0,0,0,1227,1225,1,
0,0,0,1228,1233,3,186,93,0,1229,1230,7,12,0,0,1230,1232,3,186,93,0,1231,
1229,1,0,0,0,1232,1235,1,0,0,0,1233,1231,1,0,0,0,1233,1234,1,0,0,0,1234,
185,1,0,0,0,1235,1233,1,0,0,0,1236,1240,3,188,94,0,1237,1238,5,109,0,0,1238,
1239,5,128,0,0,1239,1241,3,378,189,0,1240,1237,1,0,0,0,1240,1241,1,0,0,0,
1241,187,1,0,0,0,1242,1246,3,190,95,0,1243,1244,5,157,0,0,1244,1245,5,58,
0,0,1245,1247,3,378,189,0,1246,1243,1,0,0,0,1246,1247,1,0,0,0,1247,189,1,
0,0,0,1248,1252,3,192,96,0,1249,1250,5,68,0,0,1250,1251,5,58,0,0,1251,1253,
3,374,187,0,1252,1249,1,0,0,0,1252,1253,1,0,0,0,1253,191,1,0,0,0,1254,1258,
3,194,97,0,1255,1256,5,67,0,0,1256,1257,5,58,0,0,1257,1259,3,374,187,0,1258,
1255,1,0,0,0,1258,1259,1,0,0,0,1259,193,1,0,0,0,1260,1267,3,196,98,0,1261,
1262,5,49,0,0,1262,1263,3,254,127,0,1263,1264,3,244,122,0,1264,1266,1,0,
0,0,1265,1261,1,0,0,0,1266,1269,1,0,0,0,1267,1265,1,0,0,0,1267,1268,1,0,
0,0,1268,195,1,0,0,0,1269,1267,1,0,0,0,1270,1272,7,9,0,0,1271,1270,1,0,0,
0,1272,1275,1,0,0,0,1273,1271,1,0,0,0,1273,1274,1,0,0,0,1274,1276,1,0,0,
0,1275,1273,1,0,0,0,1276,1277,3,198,99,0,1277,197,1,0,0,0,1278,1282,3,206,
103,0,1279,1282,3,210,105,0,1280,1282,3,212,106,0,1281,1278,1,0,0,0,1281,
1279,1,0,0,0,1281,1280,1,0,0,0,1282,199,1,0,0,0,1283,1292,5,19,0,0,1284,
1292,5,20,0,0,1285,1292,5,40,0,0,1286,1287,5,40,0,0,1287,1292,5,19,0,0,1288,
1292,5,41,0,0,1289,1290,5,41,0,0,1290,1292,5,19,0,0,1291,1283,1,0,0,0,1291,
1284,1,0,0,0,1291,1285,1,0,0,0,1291,1286,1,0,0,0,1291,1288,1,0,0,0,1291,
1289,1,0,0,0,1292,201,1,0,0,0,1293,1294,7,13,0,0,1294,203,1,0,0,0,1295,1301,
5,111,0,0,1296,1297,5,40,0,0,1297,1301,5,40,0,0,1298,1299,5,41,0,0,1299,
1301,5,41,0,0,1300,1295,1,0,0,0,1300,1296,1,0,0,0,1300,1298,1,0,0,0,1301,
205,1,0,0,0,1302,1306,5,165,0,0,1303,1307,3,208,104,0,1304,1305,7,14,0,0,
1305,1307,3,420,210,0,1306,1303,1,0,0,0,1306,1304,1,0,0,0,1306,1307,1,0,
0,0,1307,1308,1,0,0,0,1308,1309,3,152,76,0,1309,207,1,0,0,0,1310,1311,7,
15,0,0,1311,209,1,0,0,0,1312,1314,5,17,0,0,1313,1312,1,0,0,0,1314,1315,1,
0,0,0,1315,1313,1,0,0,0,1315,1316,1,0,0,0,1316,1317,1,0,0,0,1317,1318,5,
25,0,0,1318,1319,3,76,38,0,1319,1320,5,26,0,0,1320,211,1,0,0,0,1321,1326,
3,214,107,0,1322,1323,5,46,0,0,1323,1325,3,214,107,0,1324,1322,1,0,0,0,1325,
1328,1,0,0,0,1326,1324,1,0,0,0,1326,1327,1,0,0,0,1327,213,1,0,0,0,1328,1326,
1,0,0,0,1329,1331,5,36,0,0,1330,1332,3,216,108,0,1331,1330,1,0,0,0,1331,
1332,1,0,0,0,1332,1338,1,0,0,0,1333,1334,3,218,109,0,1334,1335,3,216,108,
0,1335,1338,1,0,0,0,1336,1338,3,216,108,0,1337,1329,1,0,0,0,1337,1333,1,
0,0,0,1337,1336,1,0,0,0,1338,215,1,0,0,0,1339,1347,3,220,110,0,1340,1343,
5,36,0,0,1341,1343,3,218,109,0,1342,1340,1,0,0,0,1342,1341,1,0,0,0,1343,
1344,1,0,0,0,1344,1346,3,220,110,0,1345,1342,1,0,0,0,1346,1349,1,0,0,0,1347,
1345,1,0,0,0,1347,1348,1,0,0,0,1348,217,1,0,0,0,1349,1347,1,0,0,0,1350,1351,
5,37,0,0,1351,219,1,0,0,0,1352,1355,3,242,121,0,1353,1355,3,222,111,0,1354,
1352,1,0,0,0,1354,1353,1,0,0,0,1355,221,1,0,0,0,1356,1359,3,230,115,0,1357,
1359,3,224,112,0,1358,1356,1,0,0,0,1358,1357,1,0,0,0,1359,1360,1,0,0,0,1360,
1361,3,246,123,0,1361,223,1,0,0,0,1362,1363,3,226,113,0,1363,1364,3,236,
118,0,1364,1367,1,0,0,0,1365,1367,3,228,114,0,1366,1362,1,0,0,0,1366,1365,
1,0,0,0,1367,225,1,0,0,0,1368,1369,7,16,0,0,1369,1370,5,33,0,0,1370,1371,
5,33,0,0,1371,227,1,0,0,0,1372,1374,5,43,0,0,1373,1372,1,0,0,0,1373,1374,
1,0,0,0,1374,1375,1,0,0,0,1375,1376,3,236,118,0,1376,229,1,0,0,0,1377,1378,
3,232,116,0,1378,1379,3,236,118,0,1379,1382,1,0,0,0,1380,1382,3,234,117,
0,1381,1377,1,0,0,0,1381,1380,1,0,0,0,1382,231,1,0,0,0,1383,1384,7,17,0,
0,1384,1385,5,33,0,0,1385,1386,5,33,0,0,1386,233,1,0,0,0,1387,1388,5,32,
0,0,1388,235,1,0,0,0,1389,1392,3,238,119,0,1390,1392,3,384,192,0,1391,1389,
1,0,0,0,1391,1390,1,0,0,0,1392,237,1,0,0,0,1393,1396,3,456,228,0,1394,1396,
3,240,120,0,1395,1393,1,0,0,0,1395,1394,1,0,0,0,1396,239,1,0,0,0,1397,1401,
5,27,0,0,1398,1401,5,186,0,0,1399,1401,5,187,0,0,1400,1397,1,0,0,0,1400,
1398,1,0,0,0,1400,1399,1,0,0,0,1401,241,1,0,0,0,1402,1408,3,256,128,0,1403,
1407,3,248,124,0,1404,1407,3,244,122,0,1405,1407,3,250,125,0,1406,1403,1,
0,0,0,1406,1404,1,0,0,0,1406,1405,1,0,0,0,1407,1410,1,0,0,0,1408,1406,1,
0,0,0,1408,1409,1,0,0,0,1409,243,1,0,0,0,1410,1408,1,0,0,0,1411,1420,5,21,
0,0,1412,1417,3,276,138,0,1413,1414,5,30,0,0,1414,1416,3,276,138,0,1415,
1413,1,0,0,0,1416,1419,1,0,0,0,1417,1415,1,0,0,0,1417,1418,1,0,0,0,1418,
1421,1,0,0,0,1419,1417,1,0,0,0,1420,1412,1,0,0,0,1420,1421,1,0,0,0,1421,
1422,1,0,0,0,1422,1423,5,22,0,0,1423,245,1,0,0,0,1424,1426,3,248,124,0,1425,
1424,1,0,0,0,1426,1429,1,0,0,0,1427,1425,1,0,0,0,1427,1428,1,0,0,0,1428,
247,1,0,0,0,1429,1427,1,0,0,0,1430,1431,5,23,0,0,1431,1432,3,76,38,0,1432,
1433,5,24,0,0,1433,249,1,0,0,0,1434,1435,5,42,0,0,1435,1436,3,252,126,0,
1436,251,1,0,0,0,1437,1442,3,460,230,0,1438,1442,5,5,0,0,1439,1442,3,266,
133,0,1440,1442,5,27,0,0,1441,1437,1,0,0,0,1441,1438,1,0,0,0,1441,1439,1,
0,0,0,1441,1440,1,0,0,0,1442,253,1,0,0,0,1443,1447,3,456,228,0,1444,1447,
3,262,131,0,1445,1447,3,266,133,0,1446,1443,1,0,0,0,1446,1444,1,0,0,0,1446,
1445,1,0,0,0,1447,255,1,0,0,0,1448,1462,3,258,129,0,1449,1462,3,262,131,
0,1450,1462,3,266,133,0,1451,1462,3,268,134,0,1452,1462,3,274,137,0,1453,
1462,3,270,135,0,1454,1462,3,272,136,0,1455,1462,3,278,139,0,1456,1462,3,
340,170,0,1457,1462,3,348,174,0,1458,1462,3,352,176,0,1459,1462,3,358,179,
0,1460,1462,3,372,186,0,1461,1448,1,0,0,0,1461,1449,1,0,0,0,1461,1450,1,
0,0,0,1461,1451,1,0,0,0,1461,1452,1,0,0,0,1461,1453,1,0,0,0,1461,1454,1,
0,0,0,1461,1455,1,0,0,0,1461,1456,1,0,0,0,1461,1457,1,0,0,0,1461,1458,1,
0,0,0,1461,1459,1,0,0,0,1461,1460,1,0,0,0,1462,257,1,0,0,0,1463,1466,3,260,
130,0,1464,1466,3,476,238,0,1465,1463,1,0,0,0,1465,1464,1,0,0,0,1466,259,
1,0,0,0,1467,1468,7,18,0,0,1468,261,1,0,0,0,1469,1470,5,44,0,0,1470,1471,
3,456,228,0,1471,263,1,0,0,0,1472,1473,3,456,228,0,1473,265,1,0,0,0,1474,
1476,5,21,0,0,1475,1477,3,76,38,0,1476,1475,1,0,0,0,1476,1477,1,0,0,0,1477,
1478,1,0,0,0,1478,1479,5,22,0,0,1479,267,1,0,0,0,1480,1481,5,31,0,0,1481,
269,1,0,0,0,1482,1483,5,133,0,0,1483,1484,3,152,76,0,1484,271,1,0,0,0,1485,
1486,5,163,0,0,1486,1487,3,152,76,0,1487,273,1,0,0,0,1488,1489,3,456,228,
0,1489,1490,3,244,122,0,1490,275,1,0,0,0,1491,1494,3,78,39,0,1492,1494,5,
42,0,0,1493,1491,1,0,0,0,1493,1492,1,0,0,0,1494,277,1,0,0,0,1495,1498,3,
280,140,0,1496,1498,3,302,151,0,1497,1495,1,0,0,0,1497,1496,1,0,0,0,1498,
279,1,0,0,0,1499,1503,3,282,141,0,1500,1503,3,284,142,0,1501,1503,7,19,0,
0,1502,1499,1,0,0,0,1502,1500,1,0,0,0,1502,1501,1,0,0,0,1503,281,1,0,0,0,
1504,1505,5,40,0,0,1505,1506,3,458,229,0,1506,1507,3,286,143,0,1507,1511,
5,41,0,0,1508,1510,3,298,149,0,1509,1508,1,0,0,0,1510,1513,1,0,0,0,1511,
1509,1,0,0,0,1511,1512,1,0,0,0,1512,1514,1,0,0,0,1513,1511,1,0,0,0,1514,
1515,5,40,0,0,1515,1516,5,36,0,0,1516,1517,3,458,229,0,1517,1518,5,41,0,
0,1518,283,1,0,0,0,1519,1520,5,40,0,0,1520,1521,3,458,229,0,1521,1522,3,
286,143,0,1522,1523,5,36,0,0,1523,1524,5,41,0,0,1524,285,1,0,0,0,1525,1526,
3,458,229,0,1526,1527,5,19,0,0,1527,1528,3,292,146,0,1528,1530,1,0,0,0,1529,
1525,1,0,0,0,1530,1533,1,0,0,0,1531,1529,1,0,0,0,1531,1532,1,0,0,0,1532,
287,1,0,0,0,1533,1531,1,0,0,0,1534,1541,5,11,0,0,1535,1540,5,9,0,0,1536,
1540,5,10,0,0,1537,1540,5,1,0,0,1538,1540,3,294,147,0,1539,1535,1,0,0,0,
1539,1536,1,0,0,0,1539,1537,1,0,0,0,1539,1538,1,0,0,0,1540,1543,1,0,0,0,
1541,1539,1,0,0,0,1541,1542,1,0,0,0,1542,1544,1,0,0,0,1543,1541,1,0,0,0,
1544,1545,5,11,0,0,1545,289,1,0,0,0,1546,1553,5,12,0,0,1547,1552,5,9,0,0,
1548,1552,5,10,0,0,1549,1552,5,2,0,0,1550,1552,3,296,148,0,1551,1547,1,0,
0,0,1551,1548,1,0,0,0,1551,1549,1,0,0,0,1551,1550,1,0,0,0,1552,1555,1,0,
0,0,1553,1551,1,0,0,0,1553,1554,1,0,0,0,1554,1556,1,0,0,0,1555,1553,1,0,
0,0,1556,1557,5,12,0,0,1557,291,1,0,0,0,1558,1561,3,288,144,0,1559,1561,
3,290,145,0,1560,1558,1,0,0,0,1560,1559,1,0,0,0,1561,293,1,0,0,0,1562,1564,
5,198,0,0,1563,1562,1,0,0,0,1564,1565,1,0,0,0,1565,1563,1,0,0,0,1565,1566,
1,0,0,0,1566,1576,1,0,0,0,1567,1576,5,3,0,0,1568,1576,5,4,0,0,1569,1576,
3,288,144,0,1570,1572,5,25,0,0,1571,1573,3,76,38,0,1572,1571,1,0,0,0,1572,
1573,1,0,0,0,1573,1574,1,0,0,0,1574,1576,5,26,0,0,1575,1563,1,0,0,0,1575,
1567,1,0,0,0,1575,1568,1,0,0,0,1575,1569,1,0,0,0,1575,1570,1,0,0,0,1576,
295,1,0,0,0,1577,1579,5,198,0,0,1578,1577,1,0,0,0,1579,1580,1,0,0,0,1580,
1578,1,0,0,0,1580,1581,1,0,0,0,1581,1591,1,0,0,0,1582,1591,5,3,0,0,1583,
1591,5,4,0,0,1584,1591,3,290,145,0,1585,1587,5,25,0,0,1586,1588,3,76,38,
0,1587,1586,1,0,0,0,1587,1588,1,0,0,0,1588,1589,1,0,0,0,1589,1591,5,26,0,
0,1590,1578,1,0,0,0,1590,1582,1,0,0,0,1590,1583,1,0,0,0,1590,1584,1,0,0,
0,1590,1585,1,0,0,0,1591,297,1,0,0,0,1592,1599,3,280,140,0,1593,1599,3,300,
150,0,1594,1599,5,16,0,0,1595,1599,5,11,0,0,1596,1599,5,12,0,0,1597,1599,
3,482,241,0,1598,1592,1,0,0,0,1598,1593,1,0,0,0,1598,1594,1,0,0,0,1598,1595,
1,0,0,0,1598,1596,1,0,0,0,1598,1597,1,0,0,0,1599,299,1,0,0,0,1600,1610,7,
20,0,0,1601,1602,5,25,0,0,1602,1610,5,25,0,0,1603,1604,5,26,0,0,1604,1610,
5,26,0,0,1605,1606,5,25,0,0,1606,1607,3,76,38,0,1607,1608,5,26,0,0,1608,
1610,1,0,0,0,1609,1600,1,0,0,0,1609,1601,1,0,0,0,1609,1603,1,0,0,0,1609,
1605,1,0,0,0,1610,301,1,0,0,0,1611,1620,3,318,159,0,1612,1620,3,320,160,
0,1613,1620,3,324,162,0,1614,1620,3,326,163,0,1615,1620,3,334,167,0,1616,
1620,3,336,168,0,1617,1620,3,338,169,0,1618,1620,3,304,152,0,1619,1611,1,
0,0,0,1619,1612,1,0,0,0,1619,1613,1,0,0,0,1619,1614,1,0,0,0,1619,1615,1,
0,0,0,1619,1616,1,0,0,0,1619,1617,1,0,0,0,1619,1618,1,0,0,0,1620,303,1,0,
0,0,1621,1628,3,306,153,0,1622,1628,3,308,154,0,1623,1628,3,310,155,0,1624,
1628,3,312,156,0,1625,1628,3,314,157,0,1626,1628,3,316,158,0,1627,1621,1,
0,0,0,1627,1622,1,0,0,0,1627,1623,1,0,0,0,1627,1624,1,0,0,0,1627,1625,1,
0,0,0,1627,1626,1,0,0,0,1628,305,1,0,0,0,1629,1630,5,172,0,0,1630,1631,3,
322,161,0,1631,307,1,0,0,0,1632,1633,5,176,0,0,1633,1647,5,25,0,0,1634,1635,
3,78,39,0,1635,1636,5,33,0,0,1636,1644,3,78,39,0,1637,1638,5,30,0,0,1638,
1639,3,78,39,0,1639,1640,5,33,0,0,1640,1641,3,78,39,0,1641,1643,1,0,0,0,
1642,1637,1,0,0,0,1643,1646,1,0,0,0,1644,1642,1,0,0,0,1644,1645,1,0,0,0,
1645,1648,1,0,0,0,1646,1644,1,0,0,0,1647,1634,1,0,0,0,1647,1648,1,0,0,0,
1648,1649,1,0,0,0,1649,1650,5,26,0,0,1650,309,1,0,0,0,1651,1652,5,175,0,
0,1652,1653,3,322,161,0,1653,311,1,0,0,0,1654,1655,5,173,0,0,1655,1656,5,
25,0,0,1656,1657,3,78,39,0,1657,1658,5,26,0,0,1658,313,1,0,0,0,1659,1660,
5,174,0,0,1660,1661,5,25,0,0,1661,1662,5,26,0,0,1662,315,1,0,0,0,1663,1664,
5,64,0,0,1664,1665,3,322,161,0,1665,317,1,0,0,0,1666,1667,5,84,0,0,1667,
1668,3,152,76,0,1668,319,1,0,0,0,1669,1675,5,86,0,0,1670,1676,3,456,228,
0,1671,1672,5,25,0,0,1672,1673,3,76,38,0,1673,1674,5,26,0,0,1674,1676,1,
0,0,0,1675,1670,1,0,0,0,1675,1671,1,0,0,0,1676,1677,1,0,0,0,1677,1678,3,
322,161,0,1678,321,1,0,0,0,1679,1680,3,152,76,0,1680,323,1,0,0,0,1681,1687,
5,61,0,0,1682,1688,3,456,228,0,1683,1684,5,25,0,0,1684,1685,3,76,38,0,1685,
1686,5,26,0,0,1686,1688,1,0,0,0,1687,1682,1,0,0,0,1687,1683,1,0,0,0,1688,
1689,1,0,0,0,1689,1690,3,152,76,0,1690,325,1,0,0,0,1691,1694,5,121,0,0,1692,
1695,3,328,164,0,1693,1695,3,330,165,0,1694,1692,1,0,0,0,1694,1693,1,0,0,
0,1695,1696,1,0,0,0,1696,1697,3,332,166,0,1697,327,1,0,0,0,1698,1699,3,460,
230,0,1699,329,1,0,0,0,1700,1701,3,152,76,0,1701,331,1,0,0,0,1702,1703,3,
152,76,0,1703,333,1,0,0,0,1704,1705,5,154,0,0,1705,1706,3,152,76,0,1706,
335,1,0,0,0,1707,1708,5,72,0,0,1708,1709,3,152,76,0,1709,337,1,0,0,0,1710,
1716,5,140,0,0,1711,1717,3,460,230,0,1712,1713,5,25,0,0,1713,1714,3,76,38,
0,1714,1715,5,26,0,0,1715,1717,1,0,0,0,1716,1711,1,0,0,0,1716,1712,1,0,0,
0,1717,1718,1,0,0,0,1718,1719,3,152,76,0,1719,339,1,0,0,0,1720,1723,3,342,
171,0,1721,1723,3,344,172,0,1722,1720,1,0,0,0,1722,1721,1,0,0,0,1723,341,
1,0,0,0,1724,1725,3,456,228,0,1725,1726,5,47,0,0,1726,1727,5,5,0,0,1727,
343,1,0,0,0,1728,1729,3,62,31,0,1729,1730,5,99,0,0,1730,1732,5,21,0,0,1731,
1733,3,58,29,0,1732,1731,1,0,0,0,1732,1733,1,0,0,0,1733,1734,1,0,0,0,1734,
1737,5,22,0,0,1735,1736,5,58,0,0,1736,1738,3,378,189,0,1737,1735,1,0,0,0,
1737,1738,1,0,0,0,1738,1739,1,0,0,0,1739,1740,3,346,173,0,1740,345,1,0,0,
0,1741,1742,3,152,76,0,1742,347,1,0,0,0,1743,1744,5,118,0,0,1744,1753,5,
25,0,0,1745,1750,3,350,175,0,1746,1747,5,30,0,0,1747,1749,3,350,175,0,1748,
1746,1,0,0,0,1749,1752,1,0,0,0,1750,1748,1,0,0,0,1750,1751,1,0,0,0,1751,
1754,1,0,0,0,1752,1750,1,0,0,0,1753,1745,1,0,0,0,1753,1754,1,0,0,0,1754,
1755,1,0,0,0,1755,1756,5,26,0,0,1756,349,1,0,0,0,1757,1758,3,78,39,0,1758,
1759,7,21,0,0,1759,1760,3,78,39,0,1760,351,1,0,0,0,1761,1764,3,354,177,0,
1762,1764,3,356,178,0,1763,1761,1,0,0,0,1763,1762,1,0,0,0,1764,353,1,0,0,
0,1765,1774,5,23,0,0,1766,1771,3,78,39,0,1767,1768,5,30,0,0,1768,1770,3,
78,39,0,1769,1767,1,0,0,0,1770,1773,1,0,0,0,1771,1769,1,0,0,0,1771,1772,
1,0,0,0,1772,1775,1,0,0,0,1773,1771,1,0,0,0,1774,1766,1,0,0,0,1774,1775,
1,0,0,0,1775,1776,1,0,0,0,1776,1777,5,24,0,0,1777,355,1,0,0,0,1778,1779,
5,57,0,0,1779,1780,3,152,76,0,1780,357,1,0,0,0,1781,1782,5,196,0,0,1782,
1783,3,360,180,0,1783,1784,5,201,0,0,1784,359,1,0,0,0,1785,1791,3,368,184,
0,1786,1787,3,370,185,0,1787,1788,3,368,184,0,1788,1790,1,0,0,0,1789,1786,
1,0,0,0,1790,1793,1,0,0,0,1791,1789,1,0,0,0,1791,1792,1,0,0,0,1792,361,1,
0,0,0,1793,1791,1,0,0,0,1794,1795,7,22,0,0,1795,363,1,0,0,0,1796,1797,7,
23,0,0,1797,365,1,0,0,0,1798,1799,7,24,0,0,1799,367,1,0,0,0,1800,1811,5,
199,0,0,1801,1802,3,362,181,0,1802,1803,3,364,182,0,1803,1811,1,0,0,0,1804,
1805,3,366,183,0,1805,1806,3,362,181,0,1806,1807,3,362,181,0,1807,1811,1,
0,0,0,1808,1811,3,362,181,0,1809,1811,5,25,0,0,1810,1800,1,0,0,0,1810,1801,
1,0,0,0,1810,1804,1,0,0,0,1810,1808,1,0,0,0,1810,1809,1,0,0,0,1811,1814,
1,0,0,0,1812,1810,1,0,0,0,1812,1813,1,0,0,0,1813,369,1,0,0,0,1814,1812,1,
0,0,0,1815,1816,5,200,0,0,1816,1817,3,76,38,0,1817,1818,5,197,0,0,1818,371,
1,0,0,0,1819,1820,5,42,0,0,1820,1821,3,252,126,0,1821,373,1,0,0,0,1822,1824,
3,418,209,0,1823,1825,5,42,0,0,1824,1823,1,0,0,0,1824,1825,1,0,0,0,1825,
375,1,0,0,0,1826,1827,5,58,0,0,1827,1828,3,378,189,0,1828,377,1,0,0,0,1829,
1830,5,89,0,0,1830,1831,5,21,0,0,1831,1837,5,22,0,0,1832,1834,3,380,190,
0,1833,1835,7,25,0,0,1834,1833,1,0,0,0,1834,1835,1,0,0,0,1835,1837,1,0,0,
0,1836,1829,1,0,0,0,1836,1832,1,0,0,0,1837,379,1,0,0,0,1838,1848,3,384,192,
0,1839,1840,5,112,0,0,1840,1841,5,21,0,0,1841,1848,5,22,0,0,1842,1848,3,
422,211,0,1843,1848,3,428,214,0,1844,1848,3,434,217,0,1845,1848,3,382,191,
0,1846,1848,3,440,220,0,1847,1838,1,0,0,0,1847,1839,1,0,0,0,1847,1842,1,
0,0,0,1847,1843,1,0,0,0,1847,1844,1,0,0,0,1847,1845,1,0,0,0,1847,1846,1,
0,0,0,1848,381,1,0,0,0,1849,1850,3,456,228,0,1850,383,1,0,0,0,1851,1864,
3,390,195,0,1852,1864,3,406,203,0,1853,1864,3,400,200,0,1854,1864,3,410,
205,0,1855,1864,3,404,202,0,1856,1864,3,398,199,0,1857,1864,3,394,197,0,
1858,1864,3,392,196,0,1859,1864,3,396,198,0,1860,1864,3,444,222,0,1861,1864,
3,388,194,0,1862,1864,3,386,193,0,1863,1851,1,0,0,0,1863,1852,1,0,0,0,1863,
1853,1,0,0,0,1863,1854,1,0,0,0,1863,1855,1,0,0,0,1863,1856,1,0,0,0,1863,
1857,1,0,0,0,1863,1858,1,0,0,0,1863,1859,1,0,0,0,1863,1860,1,0,0,0,1863,
1861,1,0,0,0,1863,1862,1,0,0,0,1864,385,1,0,0,0,1865,1866,5,127,0,0,1866,
1868,5,21,0,0,1867,1869,5,27,0,0,1868,1867,1,0,0,0,1868,1869,1,0,0,0,1869,
1870,1,0,0,0,1870,1871,5,22,0,0,1871,387,1,0,0,0,1872,1873,5,64,0,0,1873,
1874,5,21,0,0,1874,1875,5,22,0,0,1875,389,1,0,0,0,1876,1877,5,85,0,0,1877,
1880,5,21,0,0,1878,1881,3,406,203,0,1879,1881,3,410,205,0,1880,1878,1,0,
0,0,1880,1879,1,0,0,0,1880,1881,1,0,0,0,1881,1882,1,0,0,0,1882,1883,5,22,
0,0,1883,391,1,0,0,0,1884,1885,5,190,0,0,1885,393,1,0,0,0,1886,1887,5,72,
0,0,1887,1888,5,21,0,0,1888,1889,5,22,0,0,1889,395,1,0,0,0,1890,1891,5,124,
0,0,1891,1892,5,21,0,0,1892,1893,5,22,0,0,1893,397,1,0,0,0,1894,1895,5,140,
0,0,1895,1898,5,21,0,0,1896,1899,3,460,230,0,1897,1899,3,476,238,0,1898,
1896,1,0,0,0,1898,1897,1,0,0,0,1898,1899,1,0,0,0,1899,1900,1,0,0,0,1900,
1901,5,22,0,0,1901,399,1,0,0,0,1902,1903,5,61,0,0,1903,1909,5,21,0,0,1904,
1907,3,402,201,0,1905,1906,5,30,0,0,1906,1908,3,420,210,0,1907,1905,1,0,
0,0,1907,1908,1,0,0,0,1908,1910,1,0,0,0,1909,1904,1,0,0,0,1909,1910,1,0,
0,0,1910,1911,1,0,0,0,1911,1912,5,22,0,0,1912,401,1,0,0,0,1913,1916,3,414,
207,0,1914,1916,5,27,0,0,1915,1913,1,0,0,0,1915,1914,1,0,0,0,1916,403,1,
0,0,0,1917,1918,5,144,0,0,1918,1919,5,21,0,0,1919,1920,3,442,221,0,1920,
1921,5,22,0,0,1921,405,1,0,0,0,1922,1923,5,86,0,0,1923,1932,5,21,0,0,1924,
1930,3,408,204,0,1925,1926,5,30,0,0,1926,1928,3,420,210,0,1927,1929,5,42,
0,0,1928,1927,1,0,0,0,1928,1929,1,0,0,0,1929,1931,1,0,0,0,1930,1925,1,0,
0,0,1930,1931,1,0,0,0,1931,1933,1,0,0,0,1932,1924,1,0,0,0,1932,1933,1,0,
0,0,1933,1934,1,0,0,0,1934,1935,5,22,0,0,1935,407,1,0,0,0,1936,1939,3,416,
208,0,1937,1939,5,27,0,0,1938,1936,1,0,0,0,1938,1937,1,0,0,0,1939,409,1,
0,0,0,1940,1941,5,145,0,0,1941,1942,5,21,0,0,1942,1943,3,412,206,0,1943,
1944,5,22,0,0,1944,411,1,0,0,0,1945,1946,3,416,208,0,1946,413,1,0,0,0,1947,
1948,3,456,228,0,1948,415,1,0,0,0,1949,1950,3,456,228,0,1950,417,1,0,0,0,
1951,1952,3,420,210,0,1952,419,1,0,0,0,1953,1954,3,456,228,0,1954,421,1,
0,0,0,1955,1957,3,64,32,0,1956,1955,1,0,0,0,1957,1960,1,0,0,0,1958,1956,
1,0,0,0,1958,1959,1,0,0,0,1959,1963,1,0,0,0,1960,1958,1,0,0,0,1961,1964,
3,424,212,0,1962,1964,3,426,213,0,1963,1961,1,0,0,0,1963,1962,1,0,0,0,1964,
423,1,0,0,0,1965,1966,5,99,0,0,1966,1967,5,21,0,0,1967,1968,5,27,0,0,1968,
1969,5,22,0,0,1969,425,1,0,0,0,1970,1971,5,99,0,0,1971,1980,5,21,0,0,1972,
1977,3,378,189,0,1973,1974,5,30,0,0,1974,1976,3,378,189,0,1975,1973,1,0,
0,0,1976,1979,1,0,0,0,1977,1975,1,0,0,0,1977,1978,1,0,0,0,1978,1981,1,0,
0,0,1979,1977,1,0,0,0,1980,1972,1,0,0,0,1980,1981,1,0,0,0,1981,1982,1,0,
0,0,1982,1983,5,22,0,0,1983,1984,5,58,0,0,1984,1985,3,378,189,0,1985,427,
1,0,0,0,1986,1989,3,430,215,0,1987,1989,3,432,216,0,1988,1986,1,0,0,0,1988,
1987,1,0,0,0,1989,429,1,0,0,0,1990,1991,5,118,0,0,1991,1992,5,21,0,0,1992,
1993,5,27,0,0,1993,1994,5,22,0,0,1994,431,1,0,0,0,1995,1996,5,118,0,0,1996,
1997,5,21,0,0,1997,1998,3,456,228,0,1998,1999,5,30,0,0,1999,2000,3,378,189,
0,2000,2001,5,22,0,0,2001,433,1,0,0,0,2002,2005,3,436,218,0,2003,2005,3,
438,219,0,2004,2002,1,0,0,0,2004,2003,1,0,0,0,2005,435,1,0,0,0,2006,2007,
5,57,0,0,2007,2008,5,21,0,0,2008,2009,5,27,0,0,2009,2010,5,22,0,0,2010,437,
1,0,0,0,2011,2012,5,57,0,0,2012,2013,5,21,0,0,2013,2014,3,378,189,0,2014,
2015,5,22,0,0,2015,439,1,0,0,0,2016,2017,5,21,0,0,2017,2018,3,380,190,0,
2018,2019,5,22,0,0,2019,441,1,0,0,0,2020,2021,3,414,207,0,2021,443,1,0,0,
0,2022,2028,3,446,223,0,2023,2028,3,448,224,0,2024,2028,3,450,225,0,2025,
2028,3,452,226,0,2026,2028,3,454,227,0,2027,2022,1,0,0,0,2027,2023,1,0,0,
0,2027,2024,1,0,0,0,2027,2025,1,0,0,0,2027,2026,1,0,0,0,2028,445,1,0,0,0,
2029,2030,5,172,0,0,2030,2032,5,21,0,0,2031,2033,3,476,238,0,2032,2031,1,
0,0,0,2032,2033,1,0,0,0,2033,2034,1,0,0,0,2034,2035,5,22,0,0,2035,447,1,
0,0,0,2036,2037,5,176,0,0,2037,2039,5,21,0,0,2038,2040,3,476,238,0,2039,
2038,1,0,0,0,2039,2040,1,0,0,0,2040,2041,1,0,0,0,2041,2042,5,22,0,0,2042,
449,1,0,0,0,2043,2044,5,175,0,0,2044,2046,5,21,0,0,2045,2047,3,476,238,0,
2046,2045,1,0,0,0,2046,2047,1,0,0,0,2047,2048,1,0,0,0,2048,2049,5,22,0,0,
2049,451,1,0,0,0,2050,2051,5,173,0,0,2051,2053,5,21,0,0,2052,2054,3,476,
238,0,2053,2052,1,0,0,0,2053,2054,1,0,0,0,2054,2055,1,0,0,0,2055,2056,5,
22,0,0,2056,453,1,0,0,0,2057,2058,5,174,0,0,2058,2060,5,21,0,0,2059,2061,
3,476,238,0,2060,2059,1,0,0,0,2060,2061,1,0,0,0,2061,2062,1,0,0,0,2062,2063,
5,22,0,0,2063,455,1,0,0,0,2064,2067,3,458,229,0,2065,2067,5,184,0,0,2066,
2064,1,0,0,0,2066,2065,1,0,0,0,2067,457,1,0,0,0,2068,2071,5,185,0,0,2069,
2071,3,460,230,0,2070,2068,1,0,0,0,2070,2069,1,0,0,0,2071,459,1,0,0,0,2072,
2075,5,188,0,0,2073,2075,3,464,232,0,2074,2072,1,0,0,0,2074,2073,1,0,0,0,
2075,461,1,0,0,0,2076,2081,5,185,0,0,2077,2081,5,188,0,0,2078,2081,5,184,
0,0,2079,2081,3,468,234,0,2080,2076,1,0,0,0,2080,2077,1,0,0,0,2080,2078,
1,0,0,0,2080,2079,1,0,0,0,2081,463,1,0,0,0,2082,2085,3,468,234,0,2083,2085,
3,466,233,0,2084,2082,1,0,0,0,2084,2083,1,0,0,0,2085,465,1,0,0,0,2086,2087,
7,26,0,0,2087,467,1,0,0,0,2088,2089,7,27,0,0,2089,469,1,0,0,0,2090,2091,
3,476,238,0,2091,471,1,0,0,0,2092,2099,5,11,0,0,2093,2098,5,9,0,0,2094,2098,
5,10,0,0,2095,2098,5,1,0,0,2096,2098,3,478,239,0,2097,2093,1,0,0,0,2097,
2094,1,0,0,0,2097,2095,1,0,0,0,2097,2096,1,0,0,0,2098,2101,1,0,0,0,2099,
2097,1,0,0,0,2099,2100,1,0,0,0,2100,2102,1,0,0,0,2101,2099,1,0,0,0,2102,
2103,5,11,0,0,2103,473,1,0,0,0,2104,2111,5,12,0,0,2105,2110,5,9,0,0,2106,
2110,5,10,0,0,2107,2110,5,2,0,0,2108,2110,3,480,240,0,2109,2105,1,0,0,0,
2109,2106,1,0,0,0,2109,2107,1,0,0,0,2109,2108,1,0,0,0,2110,2113,1,0,0,0,
2111,2109,1,0,0,0,2111,2112,1,0,0,0,2112,2114,1,0,0,0,2113,2111,1,0,0,0,
2114,2115,5,12,0,0,2115,475,1,0,0,0,2116,2119,3,472,236,0,2117,2119,3,474,
237,0,2118,2116,1,0,0,0,2118,2117,1,0,0,0,2119,477,1,0,0,0,2120,2122,5,198,
0,0,2121,2120,1,0,0,0,2122,2123,1,0,0,0,2123,2121,1,0,0,0,2123,2124,1,0,
0,0,2124,2138,1,0,0,0,2125,2127,5,25,0,0,2126,2128,3,76,38,0,2127,2126,1,
0,0,0,2127,2128,1,0,0,0,2128,2130,1,0,0,0,2129,2131,5,26,0,0,2130,2129,1,
0,0,0,2130,2131,1,0,0,0,2131,2138,1,0,0,0,2132,2138,5,26,0,0,2133,2138,5,
3,0,0,2134,2138,5,4,0,0,2135,2138,3,482,241,0,2136,2138,3,474,237,0,2137,
2121,1,0,0,0,2137,2125,1,0,0,0,2137,2132,1,0,0,0,2137,2133,1,0,0,0,2137,
2134,1,0,0,0,2137,2135,1,0,0,0,2137,2136,1,0,0,0,2138,479,1,0,0,0,2139,2141,
5,198,0,0,2140,2139,1,0,0,0,2141,2142,1,0,0,0,2142,2140,1,0,0,0,2142,2143,
1,0,0,0,2143,2157,1,0,0,0,2144,2146,5,25,0,0,2145,2147,3,76,38,0,2146,2145,
1,0,0,0,2146,2147,1,0,0,0,2147,2149,1,0,0,0,2148,2150,5,26,0,0,2149,2148,
1,0,0,0,2149,2150,1,0,0,0,2150,2157,1,0,0,0,2151,2157,5,26,0,0,2152,2157,
5,3,0,0,2153,2157,5,4,0,0,2154,2157,3,482,241,0,2155,2157,3,472,236,0,2156,
2140,1,0,0,0,2156,2144,1,0,0,0,2156,2151,1,0,0,0,2156,2152,1,0,0,0,2156,
2153,1,0,0,0,2156,2154,1,0,0,0,2156,2155,1,0,0,0,2157,481,1,0,0,0,2158,2161,
3,464,232,0,2159,2161,7,28,0,0,2160,2158,1,0,0,0,2160,2159,1,0,0,0,2161,
2162,1,0,0,0,2162,2160,1,0,0,0,2162,2163,1,0,0,0,2163,483,1,0,0,0,210,485,
488,491,497,502,505,514,538,544,548,554,560,577,621,628,634,643,646,655,
663,672,675,686,692,699,710,712,723,730,732,737,743,747,751,758,764,769,
778,785,799,808,819,825,833,840,848,854,857,860,878,884,892,899,905,912,
925,934,937,942,947,965,971,975,979,982,991,996,1000,1004,1015,1024,1036,
1046,1060,1065,1075,1086,1102,1116,1122,1131,1140,1170,1178,1185,1189,1196,
1202,1209,1217,1225,1233,1240,1246,1252,1258,1267,1273,1281,1291,1300,1306,
1315,1326,1331,1337,1342,1347,1354,1358,1366,1373,1381,1391,1395,1400,1406,
1408,1417,1420,1427,1441,1446,1461,1465,1476,1493,1497,1502,1511,1531,1539,
1541,1551,1553,1560,1565,1572,1575,1580,1587,1590,1598,1609,1619,1627,1644,
1647,1675,1687,1694,1716,1722,1732,1737,1750,1753,1763,1771,1774,1791,1810,
1812,1824,1834,1836,1847,1863,1868,1880,1898,1907,1909,1915,1928,1930,1932,
1938,1958,1963,1977,1980,1988,2004,2027,2032,2039,2046,2053,2060,2066,2070,
2074,2080,2084,2097,2099,2109,2111,2118,2123,2127,2130,2137,2142,2146,2149,
2156,2160,2162];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class XQueryParser extends antlr4.Parser {

    static grammarFileName = "XQueryParser.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, "'xdmp:mapping \"false\"'", 
                            "'text()'" ];
    static symbolicNames = [ null, "EscapeQuot", "EscapeApos", "DOUBLE_LBRACE", 
                             "DOUBLE_RBRACE", "IntegerLiteral", "DecimalLiteral", 
                             "DoubleLiteral", "DFPropertyName", "PredefinedEntityRef", 
                             "CharRef", "Quot", "Apos", "COMMENT", "XMLDECL", 
                             "PI", "CDATA", "PRAGMA", "WS", "EQUAL", "NOT_EQUAL", 
                             "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", 
                             "LBRACE", "RBRACE", "STAR", "PLUS", "MINUS", 
                             "COMMA", "DOT", "DDOT", "COLON", "COLON_EQ", 
                             "SEMICOLON", "SLASH", "DSLASH", "BACKSLASH", 
                             "VBAR", "LANGLE", "RANGLE", "QUESTION", "AT", 
                             "DOLLAR", "MOD", "BANG", "HASH", "CARAT", "ARROW", 
                             "GRAVE", "CONCATENATION", "TILDE", "KW_ALLOWING", 
                             "KW_ANCESTOR", "KW_ANCESTOR_OR_SELF", "KW_AND", 
                             "KW_ARRAY", "KW_AS", "KW_ASCENDING", "KW_AT", 
                             "KW_ATTRIBUTE", "KW_BASE_URI", "KW_BOUNDARY_SPACE", 
                             "KW_BINARY", "KW_BY", "KW_CASE", "KW_CAST", 
                             "KW_CASTABLE", "KW_CATCH", "KW_CHILD", "KW_COLLATION", 
                             "KW_COMMENT", "KW_CONSTRUCTION", "KW_CONTEXT", 
                             "KW_COPY_NS", "KW_COUNT", "KW_DECLARE", "KW_DEFAULT", 
                             "KW_DESCENDANT", "KW_DESCENDANT_OR_SELF", "KW_DESCENDING", 
                             "KW_DECIMAL_FORMAT", "KW_DIV", "KW_DOCUMENT", 
                             "KW_DOCUMENT_NODE", "KW_ELEMENT", "KW_ELSE", 
                             "KW_EMPTY", "KW_EMPTY_SEQUENCE", "KW_ENCODING", 
                             "KW_END", "KW_EQ", "KW_EVERY", "KW_EXCEPT", 
                             "KW_EXTERNAL", "KW_FOLLOWING", "KW_FOLLOWING_SIBLING", 
                             "KW_FOR", "KW_FUNCTION", "KW_GE", "KW_GREATEST", 
                             "KW_GROUP", "KW_GT", "KW_IDIV", "KW_IF", "KW_IMPORT", 
                             "KW_IN", "KW_INHERIT", "KW_INSTANCE", "KW_INTERSECT", 
                             "KW_IS", "KW_ITEM", "KW_LAX", "KW_LE", "KW_LEAST", 
                             "KW_LET", "KW_LT", "KW_MAP", "KW_MOD", "KW_MODULE", 
                             "KW_NAMESPACE", "KW_NE", "KW_NEXT", "KW_NAMESPACE_NODE", 
                             "KW_NO_INHERIT", "KW_NO_PRESERVE", "KW_NODE", 
                             "KW_OF", "KW_ONLY", "KW_OPTION", "KW_OR", "KW_ORDER", 
                             "KW_ORDERED", "KW_ORDERING", "KW_PARENT", "KW_PRECEDING", 
                             "KW_PRECEDING_SIBLING", "KW_PRESERVE", "KW_PREVIOUS", 
                             "KW_PI", "KW_RETURN", "KW_SATISFIES", "KW_SCHEMA", 
                             "KW_SCHEMA_ATTR", "KW_SCHEMA_ELEM", "KW_SELF", 
                             "KW_SLIDING", "KW_SOME", "KW_STABLE", "KW_START", 
                             "KW_STRICT", "KW_STRIP", "KW_SWITCH", "KW_TEXT", 
                             "KW_THEN", "KW_TO", "KW_TREAT", "KW_TRY", "KW_TUMBLING", 
                             "KW_TYPE", "KW_TYPESWITCH", "KW_UNION", "KW_UNORDERED", 
                             "KW_UPDATE", "KW_VALIDATE", "KW_VARIABLE", 
                             "KW_VERSION", "KW_WHEN", "KW_WHERE", "KW_WINDOW", 
                             "KW_XQUERY", "KW_ARRAY_NODE", "KW_BOOLEAN_NODE", 
                             "KW_NULL_NODE", "KW_NUMBER_NODE", "KW_OBJECT_NODE", 
                             "KW_REPLACE", "KW_WITH", "KW_VALUE", "KW_INSERT", 
                             "KW_INTO", "KW_DELETE", "KW_RENAME", "URIQualifiedName", 
                             "FullQName", "NCNameWithLocalWildcard", "NCNameWithPrefixWildcard", 
                             "NCName", "XDMP_MAPPING_FALSE", "TEXT_FUNCTION", 
                             "XQDOC_COMMENT_START", "XQDOC_COMMENT_END", 
                             "XQDocComment", "XQComment", "CHAR", "ENTER_STRING", 
                             "EXIT_INTERPOLATION", "ContentChar", "BASIC_CHAR", 
                             "ENTER_INTERPOLATION", "EXIT_STRING", "EscapeQuot_QuotString", 
                             "DOUBLE_LBRACE_QuotString", "DOUBLE_RBRACE_QuotString", 
                             "EscapeApos_AposString" ];
    static ruleNames = [ "module", "xqDocComment", "versionDecl", "mainModule", 
                         "queryBody", "libraryModule", "moduleDecl", "prolog", 
                         "defaultNamespaceDecl", "setter", "boundarySpaceDecl", 
                         "defaultCollationDecl", "baseURIDecl", "constructionDecl", 
                         "orderingModeDecl", "emptyOrderDecl", "copyNamespacesDecl", 
                         "preserveMode", "inheritMode", "decimalFormatDecl", 
                         "schemaImport", "schemaPrefix", "moduleImport", 
                         "namespaceDecl", "varDecl", "varValue", "varDefaultValue", 
                         "contextItemDecl", "functionDecl", "functionParams", 
                         "functionParam", "annotations", "annotation", "annotList", 
                         "annotationParam", "functionReturn", "optionDecl", 
                         "mappingDecl", "expr", "exprSingle", "flworExpr", 
                         "initialClause", "intermediateClause", "forClause", 
                         "forBinding", "allowingEmpty", "positionalVar", 
                         "letClause", "letBinding", "windowClause", "tumblingWindowClause", 
                         "slidingWindowClause", "windowStartCondition", 
                         "windowEndCondition", "windowVars", "countClause", 
                         "whereClause", "groupByClause", "groupingSpecList", 
                         "groupingSpec", "orderByClause", "orderSpec", "returnClause", 
                         "quantifiedExpr", "quantifiedVar", "switchExpr", 
                         "switchCaseClause", "switchCaseOperand", "typeswitchExpr", 
                         "caseClause", "sequenceUnionType", "ifExpr", "tryCatchExpr", 
                         "tryClause", "enclosedTryTargetExpression", "catchClause", 
                         "enclosedExpression", "catchErrorList", "existUpdateExpr", 
                         "existReplaceExpr", "existValueExpr", "existInsertExpr", 
                         "existDeleteExpr", "existRenameExpr", "orExpr", 
                         "andExpr", "comparisonExpr", "stringConcatExpr", 
                         "rangeExpr", "additiveExpr", "multiplicativeExpr", 
                         "unionExpr", "intersectExceptExpr", "instanceOfExpr", 
                         "treatExpr", "castableExpr", "castExpr", "arrowExpr", 
                         "unaryExpression", "valueExpr", "generalComp", 
                         "valueComp", "nodeComp", "validateExpr", "validationMode", 
                         "extensionExpr", "simpleMapExpr", "pathExpr", "relativePathExpr", 
                         "descendantPath", "stepExpr", "axisStep", "forwardStep", 
                         "forwardAxis", "abbrevForwardStep", "reverseStep", 
                         "reverseAxis", "abbrevReverseStep", "nodeTest", 
                         "nameTest", "wildcard", "postfixExpr", "argumentList", 
                         "predicateList", "predicate", "lookup", "keySpecifier", 
                         "arrowFunctionSpecifier", "primaryExpr", "literal", 
                         "numericLiteral", "varRef", "varName", "parenthesizedExpr", 
                         "contextItemExpr", "orderedExpr", "unorderedExpr", 
                         "functionCall", "argument", "nodeConstructor", 
                         "directConstructor", "dirElemConstructorOpenClose", 
                         "dirElemConstructorSingleTag", "dirAttributeList", 
                         "dirAttributeValueApos", "dirAttributeValueQuot", 
                         "dirAttributeValue", "dirAttributeContentQuot", 
                         "dirAttributeContentApos", "dirElemContent", "commonContent", 
                         "computedConstructor", "compMLJSONConstructor", 
                         "compMLJSONArrayConstructor", "compMLJSONObjectConstructor", 
                         "compMLJSONNumberConstructor", "compMLJSONBooleanConstructor", 
                         "compMLJSONNullConstructor", "compBinaryConstructor", 
                         "compDocConstructor", "compElemConstructor", "enclosedContentExpr", 
                         "compAttrConstructor", "compNamespaceConstructor", 
                         "prefix", "enclosedPrefixExpr", "enclosedURIExpr", 
                         "compTextConstructor", "compCommentConstructor", 
                         "compPIConstructor", "functionItemExpr", "namedFunctionRef", 
                         "inlineFunctionRef", "functionBody", "mapConstructor", 
                         "mapConstructorEntry", "arrayConstructor", "squareArrayConstructor", 
                         "curlyArrayConstructor", "stringConstructor", "stringConstructorContent", 
                         "charNoGrave", "charNoLBrace", "charNoRBrack", 
                         "stringConstructorChars", "stringConstructorInterpolation", 
                         "unaryLookup", "singleType", "typeDeclaration", 
                         "sequenceType", "itemType", "atomicOrUnionType", 
                         "kindTest", "anyKindTest", "binaryNodeTest", "documentTest", 
                         "textTest", "commentTest", "namespaceNodeTest", 
                         "piTest", "attributeTest", "attributeNameOrWildcard", 
                         "schemaAttributeTest", "elementTest", "elementNameOrWildcard", 
                         "schemaElementTest", "elementDeclaration", "attributeName", 
                         "elementName", "simpleTypeName", "typeName", "functionTest", 
                         "anyFunctionTest", "typedFunctionTest", "mapTest", 
                         "anyMapTest", "typedMapTest", "arrayTest", "anyArrayTest", 
                         "typedArrayTest", "parenthesizedItemTest", "attributeDeclaration", 
                         "mlNodeTest", "mlArrayNodeTest", "mlObjectNodeTest", 
                         "mlNumberNodeTest", "mlBooleanNodeTest", "mlNullNodeTest", 
                         "eqName", "qName", "ncName", "functionName", "keyword", 
                         "keywordNotOKForFunction", "keywordOKForFunction", 
                         "uriLiteral", "stringLiteralQuot", "stringLiteralApos", 
                         "stringLiteral", "stringContentQuot", "stringContentApos", 
                         "noQuotesNoBracesNoAmpNoLAng" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = XQueryParser.ruleNames;
        this.literalNames = XQueryParser.literalNames;
        this.symbolicNames = XQueryParser.symbolicNames;
    }



	module() {
	    let localctx = new ModuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, XQueryParser.RULE_module);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 485;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        if(la_===1) {
	            this.state = 484;
	            this.xqDocComment();

	        }
	        this.state = 488;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        if(la_===1) {
	            this.state = 487;
	            this.versionDecl();

	        }
	        this.state = 491;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        if(la_===1) {
	            this.state = 490;
	            this.xqDocComment();

	        }
	        this.state = 505;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 493;
	            this.libraryModule();
	            break;

	        case 2:
	            this.state = 494;
	            this.mainModule();
	            this.state = 502;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===35) {
	                this.state = 495;
	                this.match(XQueryParser.SEMICOLON);
	                this.state = 497;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	                if(la_===1) {
	                    this.state = 496;
	                    this.versionDecl();

	                }
	                this.state = 499;
	                this.mainModule();
	                this.state = 504;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xqDocComment() {
	    let localctx = new XqDocCommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, XQueryParser.RULE_xqDocComment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 507;
	        this.match(XQueryParser.XQDocComment);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	versionDecl() {
	    let localctx = new VersionDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, XQueryParser.RULE_versionDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 509;
	        this.match(XQueryParser.KW_XQUERY);
	        this.state = 510;
	        this.match(XQueryParser.KW_VERSION);
	        this.state = 511;
	        localctx.version = this.stringLiteral();
	        this.state = 514;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 512;
	            this.match(XQueryParser.KW_ENCODING);
	            this.state = 513;
	            localctx.encoding = this.stringLiteral();
	        }

	        this.state = 516;
	        this.match(XQueryParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mainModule() {
	    let localctx = new MainModuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, XQueryParser.RULE_mainModule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 518;
	        this.prolog();
	        this.state = 519;
	        this.queryBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryBody() {
	    let localctx = new QueryBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, XQueryParser.RULE_queryBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 521;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libraryModule() {
	    let localctx = new LibraryModuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, XQueryParser.RULE_libraryModule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 523;
	        this.moduleDecl();
	        this.state = 524;
	        this.prolog();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleDecl() {
	    let localctx = new ModuleDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, XQueryParser.RULE_moduleDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 526;
	        this.match(XQueryParser.KW_MODULE);
	        this.state = 527;
	        this.match(XQueryParser.KW_NAMESPACE);
	        this.state = 528;
	        this.ncName();
	        this.state = 529;
	        this.match(XQueryParser.EQUAL);
	        this.state = 530;
	        localctx.uri = this.stringLiteral();
	        this.state = 531;
	        this.match(XQueryParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prolog() {
	    let localctx = new PrologContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, XQueryParser.RULE_prolog);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 544;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 538;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 533;
	                    this.defaultNamespaceDecl();
	                    break;

	                case 2:
	                    this.state = 534;
	                    this.setter();
	                    break;

	                case 3:
	                    this.state = 535;
	                    this.namespaceDecl();
	                    break;

	                case 4:
	                    this.state = 536;
	                    this.schemaImport();
	                    break;

	                case 5:
	                    this.state = 537;
	                    this.moduleImport();
	                    break;

	                }
	                this.state = 540;
	                this.match(XQueryParser.SEMICOLON); 
	            }
	            this.state = 546;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
	        }

	        this.state = 560;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 548;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===193) {
	                    this.state = 547;
	                    this.xqDocComment();
	                }

	                this.state = 554;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 550;
	                    this.varDecl();
	                    break;

	                case 2:
	                    this.state = 551;
	                    this.functionDecl();
	                    break;

	                case 3:
	                    this.state = 552;
	                    this.contextItemDecl();
	                    break;

	                case 4:
	                    this.state = 553;
	                    this.optionDecl();
	                    break;

	                }
	                this.state = 556;
	                this.match(XQueryParser.SEMICOLON); 
	            }
	            this.state = 562;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultNamespaceDecl() {
	    let localctx = new DefaultNamespaceDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, XQueryParser.RULE_defaultNamespaceDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 563;
	        this.match(XQueryParser.KW_DECLARE);
	        this.state = 564;
	        this.match(XQueryParser.KW_DEFAULT);
	        this.state = 565;
	        localctx.type = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===86 || _la===99)) {
	            localctx.type = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 566;
	        this.match(XQueryParser.KW_NAMESPACE);
	        this.state = 567;
	        localctx.uri = this.stringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setter() {
	    let localctx = new SetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, XQueryParser.RULE_setter);
	    try {
	        this.state = 577;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 569;
	            this.boundarySpaceDecl();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 570;
	            this.defaultCollationDecl();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 571;
	            this.baseURIDecl();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 572;
	            this.constructionDecl();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 573;
	            this.orderingModeDecl();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 574;
	            this.emptyOrderDecl();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 575;
	            this.copyNamespacesDecl();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 576;
	            this.decimalFormatDecl();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boundarySpaceDecl() {
	    let localctx = new BoundarySpaceDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, XQueryParser.RULE_boundarySpaceDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 579;
	        this.match(XQueryParser.KW_DECLARE);
	        this.state = 580;
	        this.match(XQueryParser.KW_BOUNDARY_SPACE);
	        this.state = 581;
	        localctx.type = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===138 || _la===152)) {
	            localctx.type = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultCollationDecl() {
	    let localctx = new DefaultCollationDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, XQueryParser.RULE_defaultCollationDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 583;
	        this.match(XQueryParser.KW_DECLARE);
	        this.state = 584;
	        this.match(XQueryParser.KW_DEFAULT);
	        this.state = 585;
	        this.match(XQueryParser.KW_COLLATION);
	        this.state = 586;
	        this.uriLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseURIDecl() {
	    let localctx = new BaseURIDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, XQueryParser.RULE_baseURIDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 588;
	        this.match(XQueryParser.KW_DECLARE);
	        this.state = 589;
	        this.match(XQueryParser.KW_BASE_URI);
	        this.state = 590;
	        this.uriLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructionDecl() {
	    let localctx = new ConstructionDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, XQueryParser.RULE_constructionDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 592;
	        this.match(XQueryParser.KW_DECLARE);
	        this.state = 593;
	        this.match(XQueryParser.KW_CONSTRUCTION);
	        this.state = 594;
	        localctx.type = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===138 || _la===152)) {
	            localctx.type = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderingModeDecl() {
	    let localctx = new OrderingModeDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, XQueryParser.RULE_orderingModeDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 596;
	        this.match(XQueryParser.KW_DECLARE);
	        this.state = 597;
	        this.match(XQueryParser.KW_ORDERING);
	        this.state = 598;
	        localctx.type = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===133 || _la===163)) {
	            localctx.type = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyOrderDecl() {
	    let localctx = new EmptyOrderDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, XQueryParser.RULE_emptyOrderDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 600;
	        this.match(XQueryParser.KW_DECLARE);
	        this.state = 601;
	        this.match(XQueryParser.KW_DEFAULT);
	        this.state = 602;
	        this.match(XQueryParser.KW_ORDER);
	        this.state = 603;
	        this.match(XQueryParser.KW_EMPTY);
	        this.state = 604;
	        localctx.type = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===101 || _la===115)) {
	            localctx.type = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyNamespacesDecl() {
	    let localctx = new CopyNamespacesDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, XQueryParser.RULE_copyNamespacesDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 606;
	        this.match(XQueryParser.KW_DECLARE);
	        this.state = 607;
	        this.match(XQueryParser.KW_COPY_NS);
	        this.state = 608;
	        this.preserveMode();
	        this.state = 609;
	        this.match(XQueryParser.COMMA);
	        this.state = 610;
	        this.inheritMode();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preserveMode() {
	    let localctx = new PreserveModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, XQueryParser.RULE_preserveMode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 612;
	        _la = this._input.LA(1);
	        if(!(_la===126 || _la===138)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inheritMode() {
	    let localctx = new InheritModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, XQueryParser.RULE_inheritMode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 614;
	        _la = this._input.LA(1);
	        if(!(_la===108 || _la===125)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decimalFormatDecl() {
	    let localctx = new DecimalFormatDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, XQueryParser.RULE_decimalFormatDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 616;
	        this.match(XQueryParser.KW_DECLARE);
	        this.state = 621;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 82:
	            this.state = 617;
	            this.match(XQueryParser.KW_DECIMAL_FORMAT);
	            this.state = 618;
	            this.eqName();
	            break;
	        case 78:
	            this.state = 619;
	            this.match(XQueryParser.KW_DEFAULT);
	            this.state = 620;
	            this.match(XQueryParser.KW_DECIMAL_FORMAT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 628;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8) {
	            this.state = 623;
	            this.match(XQueryParser.DFPropertyName);
	            this.state = 624;
	            this.match(XQueryParser.EQUAL);
	            this.state = 625;
	            this.stringLiteral();
	            this.state = 630;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaImport() {
	    let localctx = new SchemaImportContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, XQueryParser.RULE_schemaImport);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 631;
	        this.match(XQueryParser.KW_IMPORT);
	        this.state = 632;
	        this.match(XQueryParser.KW_SCHEMA);
	        this.state = 634;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78 || _la===121) {
	            this.state = 633;
	            this.schemaPrefix();
	        }

	        this.state = 636;
	        localctx.nsURI = this.uriLiteral();
	        this.state = 646;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60) {
	            this.state = 637;
	            this.match(XQueryParser.KW_AT);
	            this.state = 638;
	            localctx._uriLiteral = this.uriLiteral();
	            localctx.locations.push(localctx._uriLiteral);
	            this.state = 643;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===30) {
	                this.state = 639;
	                this.match(XQueryParser.COMMA);
	                this.state = 640;
	                localctx._uriLiteral = this.uriLiteral();
	                localctx.locations.push(localctx._uriLiteral);
	                this.state = 645;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaPrefix() {
	    let localctx = new SchemaPrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, XQueryParser.RULE_schemaPrefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 655;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 121:
	            this.state = 648;
	            this.match(XQueryParser.KW_NAMESPACE);
	            this.state = 649;
	            this.ncName();
	            this.state = 650;
	            this.match(XQueryParser.EQUAL);
	            break;
	        case 78:
	            this.state = 652;
	            this.match(XQueryParser.KW_DEFAULT);
	            this.state = 653;
	            this.match(XQueryParser.KW_ELEMENT);
	            this.state = 654;
	            this.match(XQueryParser.KW_NAMESPACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleImport() {
	    let localctx = new ModuleImportContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, XQueryParser.RULE_moduleImport);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 657;
	        this.match(XQueryParser.KW_IMPORT);
	        this.state = 658;
	        this.match(XQueryParser.KW_MODULE);
	        this.state = 663;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===121) {
	            this.state = 659;
	            this.match(XQueryParser.KW_NAMESPACE);
	            this.state = 660;
	            this.ncName();
	            this.state = 661;
	            this.match(XQueryParser.EQUAL);
	        }

	        this.state = 665;
	        localctx.nsURI = this.uriLiteral();
	        this.state = 675;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60) {
	            this.state = 666;
	            this.match(XQueryParser.KW_AT);
	            this.state = 667;
	            localctx._uriLiteral = this.uriLiteral();
	            localctx.locations.push(localctx._uriLiteral);
	            this.state = 672;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===30) {
	                this.state = 668;
	                this.match(XQueryParser.COMMA);
	                this.state = 669;
	                localctx._uriLiteral = this.uriLiteral();
	                localctx.locations.push(localctx._uriLiteral);
	                this.state = 674;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceDecl() {
	    let localctx = new NamespaceDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, XQueryParser.RULE_namespaceDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 677;
	        this.match(XQueryParser.KW_DECLARE);
	        this.state = 678;
	        this.match(XQueryParser.KW_NAMESPACE);
	        this.state = 679;
	        this.ncName();
	        this.state = 680;
	        this.match(XQueryParser.EQUAL);
	        this.state = 681;
	        this.uriLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varDecl() {
	    let localctx = new VarDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, XQueryParser.RULE_varDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 683;
	        this.match(XQueryParser.KW_DECLARE);
	        this.state = 686;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 684;
	            this.annotations();
	            break;

	        case 2:
	            this.state = 685;
	            this.ncName();
	            break;

	        }
	        this.state = 688;
	        this.match(XQueryParser.KW_VARIABLE);
	        this.state = 689;
	        this.match(XQueryParser.DOLLAR);
	        this.state = 690;
	        this.varName();
	        this.state = 692;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58) {
	            this.state = 691;
	            this.typeDeclaration();
	        }

	        this.state = 712;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 694;
	            this.match(XQueryParser.COLON_EQ);
	            this.state = 695;
	            this.varValue();
	            break;

	        case 2:
	            this.state = 696;
	            this.match(XQueryParser.KW_EXTERNAL);
	            this.state = 699;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===34) {
	                this.state = 697;
	                this.match(XQueryParser.COLON_EQ);
	                this.state = 698;
	                this.varDefaultValue();
	            }

	            break;

	        case 3:
	            this.state = 701;
	            this.match(XQueryParser.LBRACE);
	            this.state = 702;
	            this.varValue();
	            this.state = 703;
	            this.match(XQueryParser.RBRACE);
	            break;

	        case 4:
	            this.state = 705;
	            this.match(XQueryParser.KW_EXTERNAL);
	            this.state = 710;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===25) {
	                this.state = 706;
	                this.match(XQueryParser.LBRACE);
	                this.state = 707;
	                this.varDefaultValue();
	                this.state = 708;
	                this.match(XQueryParser.RBRACE);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varValue() {
	    let localctx = new VarValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, XQueryParser.RULE_varValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 714;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varDefaultValue() {
	    let localctx = new VarDefaultValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, XQueryParser.RULE_varDefaultValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 716;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contextItemDecl() {
	    let localctx = new ContextItemDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, XQueryParser.RULE_contextItemDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 718;
	        this.match(XQueryParser.KW_DECLARE);
	        this.state = 719;
	        this.match(XQueryParser.KW_CONTEXT);
	        this.state = 720;
	        this.match(XQueryParser.KW_ITEM);
	        this.state = 723;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58) {
	            this.state = 721;
	            this.match(XQueryParser.KW_AS);
	            this.state = 722;
	            this.itemType();
	        }

	        this.state = 732;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 34:
	            this.state = 725;
	            this.match(XQueryParser.COLON_EQ);
	            this.state = 726;
	            localctx.value = this.exprSingle();
	            break;
	        case 95:
	            this.state = 727;
	            this.match(XQueryParser.KW_EXTERNAL);
	            this.state = 730;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===34) {
	                this.state = 728;
	                this.match(XQueryParser.COLON_EQ);
	                this.state = 729;
	                localctx.defaultValue = this.exprSingle();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDecl() {
	    let localctx = new FunctionDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, XQueryParser.RULE_functionDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 734;
	        this.match(XQueryParser.KW_DECLARE);
	        this.state = 737;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 735;
	            this.annotations();
	            break;

	        case 2:
	            this.state = 736;
	            this.ncName();
	            break;

	        }
	        this.state = 739;
	        this.match(XQueryParser.KW_FUNCTION);
	        this.state = 740;
	        localctx.name = this.eqName();
	        this.state = 741;
	        this.match(XQueryParser.LPAREN);
	        this.state = 743;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===44) {
	            this.state = 742;
	            this.functionParams();
	        }

	        this.state = 745;
	        this.match(XQueryParser.RPAREN);
	        this.state = 747;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58) {
	            this.state = 746;
	            this.functionReturn();
	        }

	        this.state = 751;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	            this.state = 749;
	            this.functionBody();
	            break;
	        case 95:
	            this.state = 750;
	            this.match(XQueryParser.KW_EXTERNAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParams() {
	    let localctx = new FunctionParamsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, XQueryParser.RULE_functionParams);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 753;
	        this.functionParam();
	        this.state = 758;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===30) {
	            this.state = 754;
	            this.match(XQueryParser.COMMA);
	            this.state = 755;
	            this.functionParam();
	            this.state = 760;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParam() {
	    let localctx = new FunctionParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, XQueryParser.RULE_functionParam);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 761;
	        this.match(XQueryParser.DOLLAR);
	        this.state = 762;
	        localctx.name = this.qName();
	        this.state = 764;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58) {
	            this.state = 763;
	            localctx.type = this.typeDeclaration();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotations() {
	    let localctx = new AnnotationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, XQueryParser.RULE_annotations);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 769;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===45) {
	            this.state = 766;
	            this.annotation();
	            this.state = 771;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation() {
	    let localctx = new AnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, XQueryParser.RULE_annotation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 772;
	        this.match(XQueryParser.MOD);
	        this.state = 773;
	        this.qName();
	        this.state = 778;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===21) {
	            this.state = 774;
	            this.match(XQueryParser.LPAREN);
	            this.state = 775;
	            this.annotList();
	            this.state = 776;
	            this.match(XQueryParser.RPAREN);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotList() {
	    let localctx = new AnnotListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, XQueryParser.RULE_annotList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 780;
	        this.annotationParam();
	        this.state = 785;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===30) {
	            this.state = 781;
	            this.match(XQueryParser.COMMA);
	            this.state = 782;
	            this.annotationParam();
	            this.state = 787;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationParam() {
	    let localctx = new AnnotationParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, XQueryParser.RULE_annotationParam);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 788;
	        this.literal();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionReturn() {
	    let localctx = new FunctionReturnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, XQueryParser.RULE_functionReturn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 790;
	        this.match(XQueryParser.KW_AS);
	        this.state = 791;
	        this.sequenceType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionDecl() {
	    let localctx = new OptionDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, XQueryParser.RULE_optionDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 793;
	        this.match(XQueryParser.KW_DECLARE);
	        this.state = 794;
	        this.match(XQueryParser.KW_OPTION);
	        this.state = 799;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 185:
	        case 188:
	            this.state = 795;
	            localctx.name = this.qName();
	            this.state = 796;
	            localctx.value = this.stringLiteral();
	            break;
	        case 189:
	            this.state = 798;
	            this.mappingDecl();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mappingDecl() {
	    let localctx = new MappingDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, XQueryParser.RULE_mappingDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 801;
	        this.match(XQueryParser.XDMP_MAPPING_FALSE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr() {
	    let localctx = new ExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, XQueryParser.RULE_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 803;
	        this.exprSingle();
	        this.state = 808;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 804;
	                this.match(XQueryParser.COMMA);
	                this.state = 805;
	                this.exprSingle(); 
	            }
	            this.state = 810;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprSingle() {
	    let localctx = new ExprSingleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, XQueryParser.RULE_exprSingle);
	    try {
	        this.state = 819;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 811;
	            this.flworExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 812;
	            this.quantifiedExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 813;
	            this.switchExpr();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 814;
	            this.typeswitchExpr();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 815;
	            this.existUpdateExpr();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 816;
	            this.ifExpr();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 817;
	            this.tryCatchExpr();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 818;
	            this.orExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flworExpr() {
	    let localctx = new FlworExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, XQueryParser.RULE_flworExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 821;
	        this.initialClause();
	        this.state = 825;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 71303169) !== 0) || _la===116 || _la===132 || _la===149 || _la===169) {
	            this.state = 822;
	            this.intermediateClause();
	            this.state = 827;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 828;
	        this.returnClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initialClause() {
	    let localctx = new InitialClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, XQueryParser.RULE_initialClause);
	    try {
	        this.state = 833;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 830;
	            this.forClause();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 831;
	            this.letClause();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 832;
	            this.windowClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intermediateClause() {
	    let localctx = new IntermediateClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, XQueryParser.RULE_intermediateClause);
	    try {
	        this.state = 840;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 98:
	        case 116:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 835;
	            this.initialClause();
	            break;
	        case 169:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 836;
	            this.whereClause();
	            break;
	        case 102:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 837;
	            this.groupByClause();
	            break;
	        case 132:
	        case 149:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 838;
	            this.orderByClause();
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 839;
	            this.countClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forClause() {
	    let localctx = new ForClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, XQueryParser.RULE_forClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 842;
	        this.match(XQueryParser.KW_FOR);
	        this.state = 843;
	        localctx._forBinding = this.forBinding();
	        localctx.vars.push(localctx._forBinding);
	        this.state = 848;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===30) {
	            this.state = 844;
	            this.match(XQueryParser.COMMA);
	            this.state = 845;
	            localctx._forBinding = this.forBinding();
	            localctx.vars.push(localctx._forBinding);
	            this.state = 850;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forBinding() {
	    let localctx = new ForBindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, XQueryParser.RULE_forBinding);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 851;
	        this.match(XQueryParser.DOLLAR);
	        this.state = 852;
	        localctx.name = this.varName();
	        this.state = 854;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58) {
	            this.state = 853;
	            localctx.type = this.typeDeclaration();
	        }

	        this.state = 857;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===53) {
	            this.state = 856;
	            this.allowingEmpty();
	        }

	        this.state = 860;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60) {
	            this.state = 859;
	            this.positionalVar();
	        }

	        this.state = 862;
	        this.match(XQueryParser.KW_IN);
	        this.state = 863;
	        localctx.in_ = this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allowingEmpty() {
	    let localctx = new AllowingEmptyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, XQueryParser.RULE_allowingEmpty);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 865;
	        this.match(XQueryParser.KW_ALLOWING);
	        this.state = 866;
	        this.match(XQueryParser.KW_EMPTY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	positionalVar() {
	    let localctx = new PositionalVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, XQueryParser.RULE_positionalVar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 868;
	        this.match(XQueryParser.KW_AT);
	        this.state = 869;
	        this.match(XQueryParser.DOLLAR);
	        this.state = 870;
	        localctx.pvar = this.varName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letClause() {
	    let localctx = new LetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, XQueryParser.RULE_letClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 872;
	        this.match(XQueryParser.KW_LET);
	        this.state = 873;
	        localctx._letBinding = this.letBinding();
	        localctx.vars.push(localctx._letBinding);
	        this.state = 878;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===30) {
	            this.state = 874;
	            this.match(XQueryParser.COMMA);
	            this.state = 875;
	            localctx._letBinding = this.letBinding();
	            localctx.vars.push(localctx._letBinding);
	            this.state = 880;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letBinding() {
	    let localctx = new LetBindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, XQueryParser.RULE_letBinding);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 881;
	        this.match(XQueryParser.DOLLAR);
	        this.state = 882;
	        this.varName();
	        this.state = 884;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58) {
	            this.state = 883;
	            this.typeDeclaration();
	        }

	        this.state = 886;
	        this.match(XQueryParser.COLON_EQ);
	        this.state = 887;
	        this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowClause() {
	    let localctx = new WindowClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, XQueryParser.RULE_windowClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 889;
	        this.match(XQueryParser.KW_FOR);
	        this.state = 892;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 159:
	            this.state = 890;
	            this.tumblingWindowClause();
	            break;
	        case 147:
	            this.state = 891;
	            this.slidingWindowClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tumblingWindowClause() {
	    let localctx = new TumblingWindowClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, XQueryParser.RULE_tumblingWindowClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 894;
	        this.match(XQueryParser.KW_TUMBLING);
	        this.state = 895;
	        this.match(XQueryParser.KW_WINDOW);
	        this.state = 896;
	        this.match(XQueryParser.DOLLAR);
	        this.state = 897;
	        localctx.name = this.qName();
	        this.state = 899;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58) {
	            this.state = 898;
	            localctx.type = this.typeDeclaration();
	        }

	        this.state = 901;
	        this.match(XQueryParser.KW_IN);
	        this.state = 902;
	        this.exprSingle();
	        this.state = 903;
	        this.windowStartCondition();
	        this.state = 905;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===91 || _la===129) {
	            this.state = 904;
	            this.windowEndCondition();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	slidingWindowClause() {
	    let localctx = new SlidingWindowClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, XQueryParser.RULE_slidingWindowClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 907;
	        this.match(XQueryParser.KW_SLIDING);
	        this.state = 908;
	        this.match(XQueryParser.KW_WINDOW);
	        this.state = 909;
	        this.match(XQueryParser.DOLLAR);
	        this.state = 910;
	        localctx.name = this.qName();
	        this.state = 912;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58) {
	            this.state = 911;
	            localctx.type = this.typeDeclaration();
	        }

	        this.state = 914;
	        this.match(XQueryParser.KW_IN);
	        this.state = 915;
	        this.exprSingle();
	        this.state = 916;
	        this.windowStartCondition();
	        this.state = 917;
	        this.windowEndCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowStartCondition() {
	    let localctx = new WindowStartConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, XQueryParser.RULE_windowStartCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 919;
	        this.match(XQueryParser.KW_START);
	        this.state = 920;
	        this.windowVars();
	        this.state = 921;
	        this.match(XQueryParser.KW_WHEN);
	        this.state = 922;
	        this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowEndCondition() {
	    let localctx = new WindowEndConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, XQueryParser.RULE_windowEndCondition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 925;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===129) {
	            this.state = 924;
	            this.match(XQueryParser.KW_ONLY);
	        }

	        this.state = 927;
	        this.match(XQueryParser.KW_END);
	        this.state = 928;
	        this.windowVars();
	        this.state = 929;
	        this.match(XQueryParser.KW_WHEN);
	        this.state = 930;
	        this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowVars() {
	    let localctx = new WindowVarsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, XQueryParser.RULE_windowVars);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 934;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===44) {
	            this.state = 932;
	            this.match(XQueryParser.DOLLAR);
	            this.state = 933;
	            localctx.currentItem = this.eqName();
	        }

	        this.state = 937;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60) {
	            this.state = 936;
	            this.positionalVar();
	        }

	        this.state = 942;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===139) {
	            this.state = 939;
	            this.match(XQueryParser.KW_PREVIOUS);
	            this.state = 940;
	            this.match(XQueryParser.DOLLAR);
	            this.state = 941;
	            localctx.previousItem = this.eqName();
	        }

	        this.state = 947;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===123) {
	            this.state = 944;
	            this.match(XQueryParser.KW_NEXT);
	            this.state = 945;
	            this.match(XQueryParser.DOLLAR);
	            this.state = 946;
	            localctx.nextItem = this.eqName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	countClause() {
	    let localctx = new CountClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, XQueryParser.RULE_countClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 949;
	        this.match(XQueryParser.KW_COUNT);
	        this.state = 950;
	        this.match(XQueryParser.DOLLAR);
	        this.state = 951;
	        this.varName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereClause() {
	    let localctx = new WhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, XQueryParser.RULE_whereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 953;
	        this.match(XQueryParser.KW_WHERE);
	        this.state = 954;
	        localctx.whereExpr = this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByClause() {
	    let localctx = new GroupByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, XQueryParser.RULE_groupByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 956;
	        this.match(XQueryParser.KW_GROUP);
	        this.state = 957;
	        this.match(XQueryParser.KW_BY);
	        this.state = 958;
	        this.groupingSpecList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingSpecList() {
	    let localctx = new GroupingSpecListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, XQueryParser.RULE_groupingSpecList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 960;
	        this.groupingSpec();
	        this.state = 965;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===30) {
	            this.state = 961;
	            this.match(XQueryParser.COMMA);
	            this.state = 962;
	            this.groupingSpec();
	            this.state = 967;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingSpec() {
	    let localctx = new GroupingSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, XQueryParser.RULE_groupingSpec);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 968;
	        this.match(XQueryParser.DOLLAR);
	        this.state = 969;
	        localctx.name = this.varName();
	        this.state = 975;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34 || _la===58) {
	            this.state = 971;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===58) {
	                this.state = 970;
	                localctx.type = this.typeDeclaration();
	            }

	            this.state = 973;
	            this.match(XQueryParser.COLON_EQ);
	            this.state = 974;
	            this.exprSingle();
	        }

	        this.state = 979;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===71) {
	            this.state = 977;
	            this.match(XQueryParser.KW_COLLATION);
	            this.state = 978;
	            localctx.uri = this.uriLiteral();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByClause() {
	    let localctx = new OrderByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, XQueryParser.RULE_orderByClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 982;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===149) {
	            this.state = 981;
	            this.match(XQueryParser.KW_STABLE);
	        }

	        this.state = 984;
	        this.match(XQueryParser.KW_ORDER);
	        this.state = 985;
	        this.match(XQueryParser.KW_BY);
	        this.state = 986;
	        localctx._orderSpec = this.orderSpec();
	        localctx.specs.push(localctx._orderSpec);
	        this.state = 991;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===30) {
	            this.state = 987;
	            this.match(XQueryParser.COMMA);
	            this.state = 988;
	            localctx._orderSpec = this.orderSpec();
	            localctx.specs.push(localctx._orderSpec);
	            this.state = 993;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderSpec() {
	    let localctx = new OrderSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, XQueryParser.RULE_orderSpec);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 994;
	        localctx.value = this.exprSingle();
	        this.state = 996;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===59 || _la===81) {
	            this.state = 995;
	            localctx.order = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===59 || _la===81)) {
	                localctx.order = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1000;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===88) {
	            this.state = 998;
	            this.match(XQueryParser.KW_EMPTY);
	            this.state = 999;
	            localctx.empty = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===101 || _la===115)) {
	                localctx.empty = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1004;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===71) {
	            this.state = 1002;
	            this.match(XQueryParser.KW_COLLATION);
	            this.state = 1003;
	            localctx.collation = this.uriLiteral();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnClause() {
	    let localctx = new ReturnClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, XQueryParser.RULE_returnClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1006;
	        this.match(XQueryParser.KW_RETURN);
	        this.state = 1007;
	        this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quantifiedExpr() {
	    let localctx = new QuantifiedExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, XQueryParser.RULE_quantifiedExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1009;
	        localctx.quantifier = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===93 || _la===148)) {
	            localctx.quantifier = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1010;
	        this.quantifiedVar();
	        this.state = 1015;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===30) {
	            this.state = 1011;
	            this.match(XQueryParser.COMMA);
	            this.state = 1012;
	            this.quantifiedVar();
	            this.state = 1017;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1018;
	        this.match(XQueryParser.KW_SATISFIES);
	        this.state = 1019;
	        localctx.value = this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quantifiedVar() {
	    let localctx = new QuantifiedVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, XQueryParser.RULE_quantifiedVar);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1021;
	        this.match(XQueryParser.DOLLAR);
	        this.state = 1022;
	        this.varName();
	        this.state = 1024;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58) {
	            this.state = 1023;
	            this.typeDeclaration();
	        }

	        this.state = 1026;
	        this.match(XQueryParser.KW_IN);
	        this.state = 1027;
	        this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchExpr() {
	    let localctx = new SwitchExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, XQueryParser.RULE_switchExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1029;
	        this.match(XQueryParser.KW_SWITCH);
	        this.state = 1030;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1031;
	        this.expr();
	        this.state = 1032;
	        this.match(XQueryParser.RPAREN);
	        this.state = 1034; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1033;
	            this.switchCaseClause();
	            this.state = 1036; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===66);
	        this.state = 1038;
	        this.match(XQueryParser.KW_DEFAULT);
	        this.state = 1039;
	        this.match(XQueryParser.KW_RETURN);
	        this.state = 1040;
	        localctx.returnExpr = this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchCaseClause() {
	    let localctx = new SwitchCaseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, XQueryParser.RULE_switchCaseClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1044; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1042;
	            this.match(XQueryParser.KW_CASE);
	            this.state = 1043;
	            this.switchCaseOperand();
	            this.state = 1046; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===66);
	        this.state = 1048;
	        this.match(XQueryParser.KW_RETURN);
	        this.state = 1049;
	        this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchCaseOperand() {
	    let localctx = new SwitchCaseOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, XQueryParser.RULE_switchCaseOperand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1051;
	        this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeswitchExpr() {
	    let localctx = new TypeswitchExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, XQueryParser.RULE_typeswitchExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1053;
	        this.match(XQueryParser.KW_TYPESWITCH);
	        this.state = 1054;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1055;
	        this.expr();
	        this.state = 1056;
	        this.match(XQueryParser.RPAREN);
	        this.state = 1058; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1057;
	            localctx.clauses = this.caseClause();
	            this.state = 1060; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===66);
	        this.state = 1062;
	        this.match(XQueryParser.KW_DEFAULT);
	        this.state = 1065;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===44) {
	            this.state = 1063;
	            this.match(XQueryParser.DOLLAR);
	            this.state = 1064;
	            localctx.var_ = this.varName();
	        }

	        this.state = 1067;
	        this.match(XQueryParser.KW_RETURN);
	        this.state = 1068;
	        localctx.returnExpr = this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClause() {
	    let localctx = new CaseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, XQueryParser.RULE_caseClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1070;
	        this.match(XQueryParser.KW_CASE);
	        this.state = 1075;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===44) {
	            this.state = 1071;
	            this.match(XQueryParser.DOLLAR);
	            this.state = 1072;
	            localctx.var_ = this.varName();
	            this.state = 1073;
	            this.match(XQueryParser.KW_AS);
	        }

	        this.state = 1077;
	        localctx.type = this.sequenceUnionType();
	        this.state = 1078;
	        this.match(XQueryParser.KW_RETURN);
	        this.state = 1079;
	        localctx.returnExpr = this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequenceUnionType() {
	    let localctx = new SequenceUnionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, XQueryParser.RULE_sequenceUnionType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1081;
	        this.sequenceType();
	        this.state = 1086;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===39) {
	            this.state = 1082;
	            this.match(XQueryParser.VBAR);
	            this.state = 1083;
	            this.sequenceType();
	            this.state = 1088;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifExpr() {
	    let localctx = new IfExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, XQueryParser.RULE_ifExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1089;
	        this.match(XQueryParser.KW_IF);
	        this.state = 1090;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1091;
	        localctx.conditionExpr = this.expr();
	        this.state = 1092;
	        this.match(XQueryParser.RPAREN);
	        this.state = 1093;
	        this.match(XQueryParser.KW_THEN);
	        this.state = 1094;
	        localctx.thenExpr = this.exprSingle();
	        this.state = 1095;
	        this.match(XQueryParser.KW_ELSE);
	        this.state = 1096;
	        localctx.elseExpr = this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryCatchExpr() {
	    let localctx = new TryCatchExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, XQueryParser.RULE_tryCatchExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1098;
	        this.tryClause();
	        this.state = 1100; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1099;
	        		this.catchClause();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1102; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,77, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryClause() {
	    let localctx = new TryClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, XQueryParser.RULE_tryClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1104;
	        this.match(XQueryParser.KW_TRY);
	        this.state = 1105;
	        this.enclosedTryTargetExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enclosedTryTargetExpression() {
	    let localctx = new EnclosedTryTargetExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, XQueryParser.RULE_enclosedTryTargetExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1107;
	        this.enclosedExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchClause() {
	    let localctx = new CatchClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, XQueryParser.RULE_catchClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1109;
	        this.match(XQueryParser.KW_CATCH);
	        this.state = 1116;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 27:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	            this.state = 1110;
	            this.catchErrorList();
	            break;
	        case 21:
	            this.state = 1111;
	            this.match(XQueryParser.LPAREN);
	            this.state = 1112;
	            this.match(XQueryParser.DOLLAR);
	            this.state = 1113;
	            this.varName();
	            this.state = 1114;
	            this.match(XQueryParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1118;
	        this.enclosedExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enclosedExpression() {
	    let localctx = new EnclosedExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, XQueryParser.RULE_enclosedExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1120;
	        this.match(XQueryParser.LBRACE);
	        this.state = 1122;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 5)) & ~0x1f) === 0 && ((1 << (_la - 5)) & 2378503631) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 4294902249) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 4294967295) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 4294967295) !== 0) || ((((_la - 133)) & ~0x1f) === 0 && ((1 << (_la - 133)) & 4294967231) !== 0) || ((((_la - 165)) & ~0x1f) === 0 && ((1 << (_la - 165)) & 2197815295) !== 0)) {
	            this.state = 1121;
	            this.expr();
	        }

	        this.state = 1124;
	        this.match(XQueryParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchErrorList() {
	    let localctx = new CatchErrorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, XQueryParser.RULE_catchErrorList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1126;
	        this.nameTest();
	        this.state = 1131;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===39) {
	            this.state = 1127;
	            this.match(XQueryParser.VBAR);
	            this.state = 1128;
	            this.nameTest();
	            this.state = 1133;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existUpdateExpr() {
	    let localctx = new ExistUpdateExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, XQueryParser.RULE_existUpdateExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1134;
	        this.match(XQueryParser.KW_UPDATE);
	        this.state = 1140;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 177:
	            this.state = 1135;
	            this.existReplaceExpr();
	            break;
	        case 179:
	            this.state = 1136;
	            this.existValueExpr();
	            break;
	        case 180:
	            this.state = 1137;
	            this.existInsertExpr();
	            break;
	        case 182:
	            this.state = 1138;
	            this.existDeleteExpr();
	            break;
	        case 183:
	            this.state = 1139;
	            this.existRenameExpr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existReplaceExpr() {
	    let localctx = new ExistReplaceExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, XQueryParser.RULE_existReplaceExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1142;
	        this.match(XQueryParser.KW_REPLACE);
	        this.state = 1143;
	        this.expr();
	        this.state = 1144;
	        this.match(XQueryParser.KW_WITH);
	        this.state = 1145;
	        this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existValueExpr() {
	    let localctx = new ExistValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, XQueryParser.RULE_existValueExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1147;
	        this.match(XQueryParser.KW_VALUE);
	        this.state = 1148;
	        this.expr();
	        this.state = 1149;
	        this.match(XQueryParser.KW_WITH);
	        this.state = 1150;
	        this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existInsertExpr() {
	    let localctx = new ExistInsertExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, XQueryParser.RULE_existInsertExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1152;
	        this.match(XQueryParser.KW_INSERT);
	        this.state = 1153;
	        this.exprSingle();
	        this.state = 1154;
	        _la = this._input.LA(1);
	        if(!(_la===96 || _la===136 || _la===181)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1155;
	        this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existDeleteExpr() {
	    let localctx = new ExistDeleteExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, XQueryParser.RULE_existDeleteExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1157;
	        this.match(XQueryParser.KW_DELETE);
	        this.state = 1158;
	        this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existRenameExpr() {
	    let localctx = new ExistRenameExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, XQueryParser.RULE_existRenameExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1160;
	        this.match(XQueryParser.KW_RENAME);
	        this.state = 1161;
	        this.exprSingle();
	        this.state = 1162;
	        this.match(XQueryParser.KW_AS);
	        this.state = 1163;
	        this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orExpr() {
	    let localctx = new OrExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, XQueryParser.RULE_orExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1165;
	        this.andExpr();
	        this.state = 1170;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1166;
	                this.match(XQueryParser.KW_OR);
	                this.state = 1167;
	                this.andExpr(); 
	            }
	            this.state = 1172;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	andExpr() {
	    let localctx = new AndExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, XQueryParser.RULE_andExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1173;
	        this.comparisonExpr();
	        this.state = 1178;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1174;
	                this.match(XQueryParser.KW_AND);
	                this.state = 1175;
	                this.comparisonExpr(); 
	            }
	            this.state = 1180;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonExpr() {
	    let localctx = new ComparisonExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, XQueryParser.RULE_comparisonExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1181;
	        this.stringConcatExpr();
	        this.state = 1189;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        if(la_===1) {
	            this.state = 1185;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1182;
	                this.valueComp();
	                break;

	            case 2:
	                this.state = 1183;
	                this.generalComp();
	                break;

	            case 3:
	                this.state = 1184;
	                this.nodeComp();
	                break;

	            }
	            this.state = 1187;
	            this.stringConcatExpr();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringConcatExpr() {
	    let localctx = new StringConcatExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, XQueryParser.RULE_stringConcatExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1191;
	        this.rangeExpr();
	        this.state = 1196;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===51) {
	            this.state = 1192;
	            this.match(XQueryParser.CONCATENATION);
	            this.state = 1193;
	            this.rangeExpr();
	            this.state = 1198;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rangeExpr() {
	    let localctx = new RangeExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, XQueryParser.RULE_rangeExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1199;
	        this.additiveExpr();
	        this.state = 1202;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	        if(la_===1) {
	            this.state = 1200;
	            this.match(XQueryParser.KW_TO);
	            this.state = 1201;
	            this.additiveExpr();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveExpr() {
	    let localctx = new AdditiveExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, XQueryParser.RULE_additiveExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1204;
	        this.multiplicativeExpr();
	        this.state = 1209;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,88,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1205;
	                _la = this._input.LA(1);
	                if(!(_la===28 || _la===29)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1206;
	                this.multiplicativeExpr(); 
	            }
	            this.state = 1211;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,88,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeExpr() {
	    let localctx = new MultiplicativeExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, XQueryParser.RULE_multiplicativeExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1212;
	        this.unionExpr();
	        this.state = 1217;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1213;
	                _la = this._input.LA(1);
	                if(!(_la===27 || _la===83 || _la===104 || _la===119)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1214;
	                this.unionExpr(); 
	            }
	            this.state = 1219;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionExpr() {
	    let localctx = new UnionExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, XQueryParser.RULE_unionExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1220;
	        this.intersectExceptExpr();
	        this.state = 1225;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1221;
	                _la = this._input.LA(1);
	                if(!(_la===39 || _la===162)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1222;
	                this.intersectExceptExpr(); 
	            }
	            this.state = 1227;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intersectExceptExpr() {
	    let localctx = new IntersectExceptExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, XQueryParser.RULE_intersectExceptExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1228;
	        this.instanceOfExpr();
	        this.state = 1233;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1229;
	                _la = this._input.LA(1);
	                if(!(_la===94 || _la===110)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1230;
	                this.instanceOfExpr(); 
	            }
	            this.state = 1235;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instanceOfExpr() {
	    let localctx = new InstanceOfExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, XQueryParser.RULE_instanceOfExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1236;
	        this.treatExpr();
	        this.state = 1240;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	        if(la_===1) {
	            this.state = 1237;
	            this.match(XQueryParser.KW_INSTANCE);
	            this.state = 1238;
	            this.match(XQueryParser.KW_OF);
	            this.state = 1239;
	            this.sequenceType();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	treatExpr() {
	    let localctx = new TreatExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, XQueryParser.RULE_treatExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1242;
	        this.castableExpr();
	        this.state = 1246;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        if(la_===1) {
	            this.state = 1243;
	            this.match(XQueryParser.KW_TREAT);
	            this.state = 1244;
	            this.match(XQueryParser.KW_AS);
	            this.state = 1245;
	            this.sequenceType();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castableExpr() {
	    let localctx = new CastableExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, XQueryParser.RULE_castableExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1248;
	        this.castExpr();
	        this.state = 1252;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        if(la_===1) {
	            this.state = 1249;
	            this.match(XQueryParser.KW_CASTABLE);
	            this.state = 1250;
	            this.match(XQueryParser.KW_AS);
	            this.state = 1251;
	            this.singleType();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castExpr() {
	    let localctx = new CastExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, XQueryParser.RULE_castExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1254;
	        this.arrowExpr();
	        this.state = 1258;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	        if(la_===1) {
	            this.state = 1255;
	            this.match(XQueryParser.KW_CAST);
	            this.state = 1256;
	            this.match(XQueryParser.KW_AS);
	            this.state = 1257;
	            this.singleType();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrowExpr() {
	    let localctx = new ArrowExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, XQueryParser.RULE_arrowExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1260;
	        this.unaryExpression();
	        this.state = 1267;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,96,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1261;
	                this.match(XQueryParser.ARROW);
	                this.state = 1262;
	                this.arrowFunctionSpecifier();
	                this.state = 1263;
	                this.argumentList(); 
	            }
	            this.state = 1269;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,96,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, XQueryParser.RULE_unaryExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1273;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===28 || _la===29) {
	            this.state = 1270;
	            _la = this._input.LA(1);
	            if(!(_la===28 || _la===29)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1275;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1276;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueExpr() {
	    let localctx = new ValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, XQueryParser.RULE_valueExpr);
	    try {
	        this.state = 1281;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1278;
	            this.validateExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1279;
	            this.extensionExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1280;
	            this.simpleMapExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalComp() {
	    let localctx = new GeneralCompContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, XQueryParser.RULE_generalComp);
	    try {
	        this.state = 1291;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1283;
	            this.match(XQueryParser.EQUAL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1284;
	            this.match(XQueryParser.NOT_EQUAL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1285;
	            this.match(XQueryParser.LANGLE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1286;
	            this.match(XQueryParser.LANGLE);
	            this.state = 1287;
	            this.match(XQueryParser.EQUAL);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1288;
	            this.match(XQueryParser.RANGLE);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1289;
	            this.match(XQueryParser.RANGLE);
	            this.state = 1290;
	            this.match(XQueryParser.EQUAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueComp() {
	    let localctx = new ValueCompContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, XQueryParser.RULE_valueComp);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1293;
	        _la = this._input.LA(1);
	        if(!(((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 1111492865) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeComp() {
	    let localctx = new NodeCompContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, XQueryParser.RULE_nodeComp);
	    try {
	        this.state = 1300;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 111:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1295;
	            this.match(XQueryParser.KW_IS);
	            break;
	        case 40:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1296;
	            this.match(XQueryParser.LANGLE);
	            this.state = 1297;
	            this.match(XQueryParser.LANGLE);
	            break;
	        case 41:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1298;
	            this.match(XQueryParser.RANGLE);
	            this.state = 1299;
	            this.match(XQueryParser.RANGLE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	validateExpr() {
	    let localctx = new ValidateExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, XQueryParser.RULE_validateExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1302;
	        this.match(XQueryParser.KW_VALIDATE);
	        this.state = 1306;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 113:
	        case 151:
	        	this.state = 1303;
	        	this.validationMode();
	        	break;
	        case 58:
	        case 160:
	        	this.state = 1304;
	        	_la = this._input.LA(1);
	        	if(!(_la===58 || _la===160)) {
	        	this._errHandler.recoverInline(this);
	        	}
	        	else {
	        		this._errHandler.reportMatch(this);
	        	    this.consume();
	        	}
	        	this.state = 1305;
	        	this.typeName();
	        	break;
	        case 25:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 1308;
	        this.enclosedExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	validationMode() {
	    let localctx = new ValidationModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, XQueryParser.RULE_validationMode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1310;
	        _la = this._input.LA(1);
	        if(!(_la===113 || _la===151)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extensionExpr() {
	    let localctx = new ExtensionExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, XQueryParser.RULE_extensionExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1313; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1312;
	            this.match(XQueryParser.PRAGMA);
	            this.state = 1315; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===17);
	        this.state = 1317;
	        this.match(XQueryParser.LBRACE);
	        this.state = 1318;
	        this.expr();
	        this.state = 1319;
	        this.match(XQueryParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleMapExpr() {
	    let localctx = new SimpleMapExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, XQueryParser.RULE_simpleMapExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1321;
	        this.pathExpr();
	        this.state = 1326;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,103,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1322;
	                this.match(XQueryParser.BANG);
	                this.state = 1323;
	                this.pathExpr(); 
	            }
	            this.state = 1328;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,103,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathExpr() {
	    let localctx = new PathExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, XQueryParser.RULE_pathExpr);
	    try {
	        this.state = 1337;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 36:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1329;
	            this.match(XQueryParser.SLASH);
	            this.state = 1331;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	            if(la_===1) {
	                this.state = 1330;
	                this.relativePathExpr();

	            }
	            break;
	        case 37:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1333;
	            this.descendantPath();
	            this.state = 1334;
	            this.relativePathExpr();
	            break;
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 11:
	        case 12:
	        case 13:
	        case 15:
	        case 21:
	        case 23:
	        case 27:
	        case 31:
	        case 32:
	        case 40:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 190:
	        case 196:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1336;
	            this.relativePathExpr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relativePathExpr() {
	    let localctx = new RelativePathExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, XQueryParser.RULE_relativePathExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1339;
	        this.stepExpr();
	        this.state = 1347;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,107,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1342;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 36:
	                    this.state = 1340;
	                    this.match(XQueryParser.SLASH);
	                    break;
	                case 37:
	                    this.state = 1341;
	                    this.descendantPath();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 1344;
	                this.stepExpr(); 
	            }
	            this.state = 1349;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,107,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	descendantPath() {
	    let localctx = new DescendantPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, XQueryParser.RULE_descendantPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1350;
	        this.match(XQueryParser.DSLASH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stepExpr() {
	    let localctx = new StepExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, XQueryParser.RULE_stepExpr);
	    try {
	        this.state = 1354;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1352;
	            this.postfixExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1353;
	            this.axisStep();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	axisStep() {
	    let localctx = new AxisStepContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, XQueryParser.RULE_axisStep);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1358;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1356;
	            this.reverseStep();
	            break;

	        case 2:
	            this.state = 1357;
	            this.forwardStep();
	            break;

	        }
	        this.state = 1360;
	        this.predicateList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forwardStep() {
	    let localctx = new ForwardStepContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, XQueryParser.RULE_forwardStep);
	    try {
	        this.state = 1366;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1362;
	            this.forwardAxis();
	            this.state = 1363;
	            this.nodeTest();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1365;
	            this.abbrevForwardStep();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forwardAxis() {
	    let localctx = new ForwardAxisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, XQueryParser.RULE_forwardAxis);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1368;
	        _la = this._input.LA(1);
	        if(!(((((_la - 61)) & ~0x1f) === 0 && ((1 << (_la - 61)) & 786945) !== 0) || _la===96 || _la===97 || _la===146)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1369;
	        this.match(XQueryParser.COLON);
	        this.state = 1370;
	        this.match(XQueryParser.COLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbrevForwardStep() {
	    let localctx = new AbbrevForwardStepContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, XQueryParser.RULE_abbrevForwardStep);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1373;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===43) {
	            this.state = 1372;
	            this.match(XQueryParser.AT);
	        }

	        this.state = 1375;
	        this.nodeTest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reverseStep() {
	    let localctx = new ReverseStepContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, XQueryParser.RULE_reverseStep);
	    try {
	        this.state = 1381;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 54:
	        case 55:
	        case 135:
	        case 136:
	        case 137:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1377;
	            this.reverseAxis();
	            this.state = 1378;
	            this.nodeTest();
	            break;
	        case 32:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1380;
	            this.abbrevReverseStep();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reverseAxis() {
	    let localctx = new ReverseAxisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, XQueryParser.RULE_reverseAxis);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1383;
	        _la = this._input.LA(1);
	        if(!(_la===54 || _la===55 || ((((_la - 135)) & ~0x1f) === 0 && ((1 << (_la - 135)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1384;
	        this.match(XQueryParser.COLON);
	        this.state = 1385;
	        this.match(XQueryParser.COLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbrevReverseStep() {
	    let localctx = new AbbrevReverseStepContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, XQueryParser.RULE_abbrevReverseStep);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1387;
	        this.match(XQueryParser.DDOT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTest() {
	    let localctx = new NodeTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, XQueryParser.RULE_nodeTest);
	    try {
	        this.state = 1391;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1389;
	            this.nameTest();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1390;
	            this.kindTest();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nameTest() {
	    let localctx = new NameTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, XQueryParser.RULE_nameTest);
	    try {
	        this.state = 1395;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 188:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1393;
	            this.eqName();
	            break;
	        case 27:
	        case 186:
	        case 187:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1394;
	            this.wildcard();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildcard() {
	    let localctx = new WildcardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, XQueryParser.RULE_wildcard);
	    try {
	        this.state = 1400;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	            localctx = new AllNamesContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1397;
	            this.match(XQueryParser.STAR);
	            break;
	        case 186:
	            localctx = new AllWithNSContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1398;
	            this.match(XQueryParser.NCNameWithLocalWildcard);
	            break;
	        case 187:
	            localctx = new AllWithLocalContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1399;
	            this.match(XQueryParser.NCNameWithPrefixWildcard);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfixExpr() {
	    let localctx = new PostfixExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, XQueryParser.RULE_postfixExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1402;
	        this.primaryExpr();
	        this.state = 1408;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,117,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1406;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 23:
	                    this.state = 1403;
	                    this.predicate();
	                    break;
	                case 21:
	                    this.state = 1404;
	                    this.argumentList();
	                    break;
	                case 42:
	                    this.state = 1405;
	                    this.lookup();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1410;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,117,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentList() {
	    let localctx = new ArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, XQueryParser.RULE_argumentList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1411;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 5)) & ~0x1f) === 0 && ((1 << (_la - 5)) & 2378503631) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 4294902249) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 4294967295) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 4294967295) !== 0) || ((((_la - 133)) & ~0x1f) === 0 && ((1 << (_la - 133)) & 4294967231) !== 0) || ((((_la - 165)) & ~0x1f) === 0 && ((1 << (_la - 165)) & 2197815295) !== 0)) {
	            this.state = 1412;
	            this.argument();
	            this.state = 1417;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===30) {
	                this.state = 1413;
	                this.match(XQueryParser.COMMA);
	                this.state = 1414;
	                this.argument();
	                this.state = 1419;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1422;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predicateList() {
	    let localctx = new PredicateListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, XQueryParser.RULE_predicateList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1427;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,120,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1424;
	                this.predicate(); 
	            }
	            this.state = 1429;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,120,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predicate() {
	    let localctx = new PredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, XQueryParser.RULE_predicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1430;
	        this.match(XQueryParser.LBRACKET);
	        this.state = 1431;
	        this.expr();
	        this.state = 1432;
	        this.match(XQueryParser.RBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lookup() {
	    let localctx = new LookupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, XQueryParser.RULE_lookup);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1434;
	        this.match(XQueryParser.QUESTION);
	        this.state = 1435;
	        this.keySpecifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keySpecifier() {
	    let localctx = new KeySpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, XQueryParser.RULE_keySpecifier);
	    try {
	        this.state = 1441;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 188:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1437;
	            this.ncName();
	            break;
	        case 5:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1438;
	            this.match(XQueryParser.IntegerLiteral);
	            break;
	        case 21:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1439;
	            this.parenthesizedExpr();
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1440;
	            this.match(XQueryParser.STAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrowFunctionSpecifier() {
	    let localctx = new ArrowFunctionSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, XQueryParser.RULE_arrowFunctionSpecifier);
	    try {
	        this.state = 1446;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 188:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1443;
	            this.eqName();
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1444;
	            this.varRef();
	            break;
	        case 21:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1445;
	            this.parenthesizedExpr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryExpr() {
	    let localctx = new PrimaryExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, XQueryParser.RULE_primaryExpr);
	    try {
	        this.state = 1461;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1448;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1449;
	            this.varRef();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1450;
	            this.parenthesizedExpr();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1451;
	            this.contextItemExpr();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1452;
	            this.functionCall();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1453;
	            this.orderedExpr();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1454;
	            this.unorderedExpr();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1455;
	            this.nodeConstructor();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1456;
	            this.functionItemExpr();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1457;
	            this.mapConstructor();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1458;
	            this.arrayConstructor();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1459;
	            this.stringConstructor();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1460;
	            this.unaryLookup();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, XQueryParser.RULE_literal);
	    try {
	        this.state = 1465;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 6:
	        case 7:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1463;
	            this.numericLiteral();
	            break;
	        case 11:
	        case 12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1464;
	            this.stringLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteral() {
	    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, XQueryParser.RULE_numericLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1467;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 224) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varRef() {
	    let localctx = new VarRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, XQueryParser.RULE_varRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1469;
	        this.match(XQueryParser.DOLLAR);
	        this.state = 1470;
	        this.eqName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varName() {
	    let localctx = new VarNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, XQueryParser.RULE_varName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1472;
	        this.eqName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedExpr() {
	    let localctx = new ParenthesizedExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, XQueryParser.RULE_parenthesizedExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1474;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1476;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 5)) & ~0x1f) === 0 && ((1 << (_la - 5)) & 2378503631) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 4294902249) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 4294967295) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 4294967295) !== 0) || ((((_la - 133)) & ~0x1f) === 0 && ((1 << (_la - 133)) & 4294967231) !== 0) || ((((_la - 165)) & ~0x1f) === 0 && ((1 << (_la - 165)) & 2197815295) !== 0)) {
	            this.state = 1475;
	            this.expr();
	        }

	        this.state = 1478;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contextItemExpr() {
	    let localctx = new ContextItemExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, XQueryParser.RULE_contextItemExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1480;
	        this.match(XQueryParser.DOT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderedExpr() {
	    let localctx = new OrderedExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, XQueryParser.RULE_orderedExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1482;
	        this.match(XQueryParser.KW_ORDERED);
	        this.state = 1483;
	        this.enclosedExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unorderedExpr() {
	    let localctx = new UnorderedExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, XQueryParser.RULE_unorderedExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1485;
	        this.match(XQueryParser.KW_UNORDERED);
	        this.state = 1486;
	        this.enclosedExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, XQueryParser.RULE_functionCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1488;
	        this.eqName();
	        this.state = 1489;
	        this.argumentList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, XQueryParser.RULE_argument);
	    try {
	        this.state = 1493;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1491;
	            this.exprSingle();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1492;
	            this.match(XQueryParser.QUESTION);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeConstructor() {
	    let localctx = new NodeConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, XQueryParser.RULE_nodeConstructor);
	    try {
	        this.state = 1497;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 13:
	        case 15:
	        case 40:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1495;
	            this.directConstructor();
	            break;
	        case 61:
	        case 64:
	        case 72:
	        case 84:
	        case 86:
	        case 121:
	        case 140:
	        case 154:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1496;
	            this.computedConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	directConstructor() {
	    let localctx = new DirectConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, XQueryParser.RULE_directConstructor);
	    var _la = 0;
	    try {
	        this.state = 1502;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1499;
	            this.dirElemConstructorOpenClose();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1500;
	            this.dirElemConstructorSingleTag();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1501;
	            _la = this._input.LA(1);
	            if(!(_la===13 || _la===15)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dirElemConstructorOpenClose() {
	    let localctx = new DirElemConstructorOpenCloseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, XQueryParser.RULE_dirElemConstructorOpenClose);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1504;
	        this.match(XQueryParser.LANGLE);
	        this.state = 1505;
	        localctx.openName = this.qName();
	        this.state = 1506;
	        this.dirAttributeList();
	        this.state = 1507;
	        localctx.endOpen = this.match(XQueryParser.RANGLE);
	        this.state = 1511;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,129,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1508;
	                this.dirElemContent(); 
	            }
	            this.state = 1513;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,129,this._ctx);
	        }

	        this.state = 1514;
	        localctx.startClose = this.match(XQueryParser.LANGLE);
	        this.state = 1515;
	        localctx.slashClose = this.match(XQueryParser.SLASH);
	        this.state = 1516;
	        localctx.closeName = this.qName();
	        this.state = 1517;
	        this.match(XQueryParser.RANGLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dirElemConstructorSingleTag() {
	    let localctx = new DirElemConstructorSingleTagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, XQueryParser.RULE_dirElemConstructorSingleTag);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1519;
	        this.match(XQueryParser.LANGLE);
	        this.state = 1520;
	        localctx.openName = this.qName();
	        this.state = 1521;
	        this.dirAttributeList();
	        this.state = 1522;
	        localctx.slashClose = this.match(XQueryParser.SLASH);
	        this.state = 1523;
	        this.match(XQueryParser.RANGLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dirAttributeList() {
	    let localctx = new DirAttributeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, XQueryParser.RULE_dirAttributeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1531;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===8 || ((((_la - 53)) & ~0x1f) === 0 && ((1 << (_la - 53)) & 4294967295) !== 0) || ((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 4294967295) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 4290772991) !== 0) || ((((_la - 149)) & ~0x1f) === 0 && ((1 << (_la - 149)) & 4294967295) !== 0) || ((((_la - 181)) & ~0x1f) === 0 && ((1 << (_la - 181)) & 151) !== 0)) {
	            this.state = 1525;
	            this.qName();
	            this.state = 1526;
	            this.match(XQueryParser.EQUAL);
	            this.state = 1527;
	            this.dirAttributeValue();
	            this.state = 1533;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dirAttributeValueApos() {
	    let localctx = new DirAttributeValueAposContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, XQueryParser.RULE_dirAttributeValueApos);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1534;
	        this.match(XQueryParser.Quot);
	        this.state = 1541;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,132,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1539;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 9:
	                    this.state = 1535;
	                    this.match(XQueryParser.PredefinedEntityRef);
	                    break;
	                case 10:
	                    this.state = 1536;
	                    this.match(XQueryParser.CharRef);
	                    break;
	                case 1:
	                    this.state = 1537;
	                    this.match(XQueryParser.EscapeQuot);
	                    break;
	                case 3:
	                case 4:
	                case 11:
	                case 25:
	                case 198:
	                    this.state = 1538;
	                    this.dirAttributeContentQuot();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1543;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,132,this._ctx);
	        }

	        this.state = 1544;
	        this.match(XQueryParser.Quot);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dirAttributeValueQuot() {
	    let localctx = new DirAttributeValueQuotContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, XQueryParser.RULE_dirAttributeValueQuot);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1546;
	        this.match(XQueryParser.Apos);
	        this.state = 1553;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,134,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1551;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 9:
	                    this.state = 1547;
	                    this.match(XQueryParser.PredefinedEntityRef);
	                    break;
	                case 10:
	                    this.state = 1548;
	                    this.match(XQueryParser.CharRef);
	                    break;
	                case 2:
	                    this.state = 1549;
	                    this.match(XQueryParser.EscapeApos);
	                    break;
	                case 3:
	                case 4:
	                case 12:
	                case 25:
	                case 198:
	                    this.state = 1550;
	                    this.dirAttributeContentApos();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1555;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,134,this._ctx);
	        }

	        this.state = 1556;
	        this.match(XQueryParser.Apos);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dirAttributeValue() {
	    let localctx = new DirAttributeValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, XQueryParser.RULE_dirAttributeValue);
	    try {
	        this.state = 1560;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 11:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1558;
	            this.dirAttributeValueApos();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1559;
	            this.dirAttributeValueQuot();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dirAttributeContentQuot() {
	    let localctx = new DirAttributeContentQuotContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, XQueryParser.RULE_dirAttributeContentQuot);
	    var _la = 0;
	    try {
	        this.state = 1575;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 198:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1563; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1562;
	            		this.match(XQueryParser.ContentChar);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1565; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,136, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1567;
	            this.match(XQueryParser.DOUBLE_LBRACE);
	            break;
	        case 4:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1568;
	            this.match(XQueryParser.DOUBLE_RBRACE);
	            break;
	        case 11:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1569;
	            this.dirAttributeValueApos();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1570;
	            this.match(XQueryParser.LBRACE);
	            this.state = 1572;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 5)) & ~0x1f) === 0 && ((1 << (_la - 5)) & 2378503631) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 4294902249) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 4294967295) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 4294967295) !== 0) || ((((_la - 133)) & ~0x1f) === 0 && ((1 << (_la - 133)) & 4294967231) !== 0) || ((((_la - 165)) & ~0x1f) === 0 && ((1 << (_la - 165)) & 2197815295) !== 0)) {
	                this.state = 1571;
	                this.expr();
	            }

	            this.state = 1574;
	            this.match(XQueryParser.RBRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dirAttributeContentApos() {
	    let localctx = new DirAttributeContentAposContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, XQueryParser.RULE_dirAttributeContentApos);
	    var _la = 0;
	    try {
	        this.state = 1590;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 198:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1578; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1577;
	            		this.match(XQueryParser.ContentChar);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1580; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,139, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1582;
	            this.match(XQueryParser.DOUBLE_LBRACE);
	            break;
	        case 4:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1583;
	            this.match(XQueryParser.DOUBLE_RBRACE);
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1584;
	            this.dirAttributeValueQuot();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1585;
	            this.match(XQueryParser.LBRACE);
	            this.state = 1587;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 5)) & ~0x1f) === 0 && ((1 << (_la - 5)) & 2378503631) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 4294902249) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 4294967295) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 4294967295) !== 0) || ((((_la - 133)) & ~0x1f) === 0 && ((1 << (_la - 133)) & 4294967231) !== 0) || ((((_la - 165)) & ~0x1f) === 0 && ((1 << (_la - 165)) & 2197815295) !== 0)) {
	                this.state = 1586;
	                this.expr();
	            }

	            this.state = 1589;
	            this.match(XQueryParser.RBRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dirElemContent() {
	    let localctx = new DirElemContentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, XQueryParser.RULE_dirElemContent);
	    try {
	        this.state = 1598;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1592;
	            this.directConstructor();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1593;
	            this.commonContent();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1594;
	            this.match(XQueryParser.CDATA);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1595;
	            this.match(XQueryParser.Quot);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1596;
	            this.match(XQueryParser.Apos);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1597;
	            this.noQuotesNoBracesNoAmpNoLAng();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonContent() {
	    let localctx = new CommonContentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, XQueryParser.RULE_commonContent);
	    var _la = 0;
	    try {
	        this.state = 1609;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1600;
	            _la = this._input.LA(1);
	            if(!(_la===9 || _la===10)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1601;
	            this.match(XQueryParser.LBRACE);
	            this.state = 1602;
	            this.match(XQueryParser.LBRACE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1603;
	            this.match(XQueryParser.RBRACE);
	            this.state = 1604;
	            this.match(XQueryParser.RBRACE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1605;
	            this.match(XQueryParser.LBRACE);
	            this.state = 1606;
	            this.expr();
	            this.state = 1607;
	            this.match(XQueryParser.RBRACE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	computedConstructor() {
	    let localctx = new ComputedConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, XQueryParser.RULE_computedConstructor);
	    try {
	        this.state = 1619;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 84:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1611;
	            this.compDocConstructor();
	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1612;
	            this.compElemConstructor();
	            break;
	        case 61:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1613;
	            this.compAttrConstructor();
	            break;
	        case 121:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1614;
	            this.compNamespaceConstructor();
	            break;
	        case 154:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1615;
	            this.compTextConstructor();
	            break;
	        case 72:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1616;
	            this.compCommentConstructor();
	            break;
	        case 140:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1617;
	            this.compPIConstructor();
	            break;
	        case 64:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1618;
	            this.compMLJSONConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compMLJSONConstructor() {
	    let localctx = new CompMLJSONConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, XQueryParser.RULE_compMLJSONConstructor);
	    try {
	        this.state = 1627;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 172:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1621;
	            this.compMLJSONArrayConstructor();
	            break;
	        case 176:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1622;
	            this.compMLJSONObjectConstructor();
	            break;
	        case 175:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1623;
	            this.compMLJSONNumberConstructor();
	            break;
	        case 173:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1624;
	            this.compMLJSONBooleanConstructor();
	            break;
	        case 174:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1625;
	            this.compMLJSONNullConstructor();
	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1626;
	            this.compBinaryConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compMLJSONArrayConstructor() {
	    let localctx = new CompMLJSONArrayConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, XQueryParser.RULE_compMLJSONArrayConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1629;
	        this.match(XQueryParser.KW_ARRAY_NODE);
	        this.state = 1630;
	        this.enclosedContentExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compMLJSONObjectConstructor() {
	    let localctx = new CompMLJSONObjectConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, XQueryParser.RULE_compMLJSONObjectConstructor);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1632;
	        this.match(XQueryParser.KW_OBJECT_NODE);
	        this.state = 1633;
	        this.match(XQueryParser.LBRACE);
	        this.state = 1647;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 5)) & ~0x1f) === 0 && ((1 << (_la - 5)) & 2378503631) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 4294902249) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 4294967295) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 4294967295) !== 0) || ((((_la - 133)) & ~0x1f) === 0 && ((1 << (_la - 133)) & 4294967231) !== 0) || ((((_la - 165)) & ~0x1f) === 0 && ((1 << (_la - 165)) & 2197815295) !== 0)) {
	            this.state = 1634;
	            this.exprSingle();
	            this.state = 1635;
	            this.match(XQueryParser.COLON);
	            this.state = 1636;
	            this.exprSingle();
	            this.state = 1644;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===30) {
	                this.state = 1637;
	                this.match(XQueryParser.COMMA);
	                this.state = 1638;
	                this.exprSingle();
	                this.state = 1639;
	                this.match(XQueryParser.COLON);
	                this.state = 1640;
	                this.exprSingle();
	                this.state = 1646;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1649;
	        this.match(XQueryParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compMLJSONNumberConstructor() {
	    let localctx = new CompMLJSONNumberConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, XQueryParser.RULE_compMLJSONNumberConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1651;
	        this.match(XQueryParser.KW_NUMBER_NODE);
	        this.state = 1652;
	        this.enclosedContentExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compMLJSONBooleanConstructor() {
	    let localctx = new CompMLJSONBooleanConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, XQueryParser.RULE_compMLJSONBooleanConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1654;
	        this.match(XQueryParser.KW_BOOLEAN_NODE);
	        this.state = 1655;
	        this.match(XQueryParser.LBRACE);
	        this.state = 1656;
	        this.exprSingle();
	        this.state = 1657;
	        this.match(XQueryParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compMLJSONNullConstructor() {
	    let localctx = new CompMLJSONNullConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, XQueryParser.RULE_compMLJSONNullConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1659;
	        this.match(XQueryParser.KW_NULL_NODE);
	        this.state = 1660;
	        this.match(XQueryParser.LBRACE);
	        this.state = 1661;
	        this.match(XQueryParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compBinaryConstructor() {
	    let localctx = new CompBinaryConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, XQueryParser.RULE_compBinaryConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1663;
	        this.match(XQueryParser.KW_BINARY);
	        this.state = 1664;
	        this.enclosedContentExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compDocConstructor() {
	    let localctx = new CompDocConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, XQueryParser.RULE_compDocConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1666;
	        this.match(XQueryParser.KW_DOCUMENT);
	        this.state = 1667;
	        this.enclosedExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compElemConstructor() {
	    let localctx = new CompElemConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, XQueryParser.RULE_compElemConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1669;
	        this.match(XQueryParser.KW_ELEMENT);
	        this.state = 1675;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 188:
	            this.state = 1670;
	            this.eqName();
	            break;
	        case 25:
	            this.state = 1671;
	            this.match(XQueryParser.LBRACE);
	            this.state = 1672;
	            this.expr();
	            this.state = 1673;
	            this.match(XQueryParser.RBRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1677;
	        this.enclosedContentExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enclosedContentExpr() {
	    let localctx = new EnclosedContentExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, XQueryParser.RULE_enclosedContentExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1679;
	        this.enclosedExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compAttrConstructor() {
	    let localctx = new CompAttrConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, XQueryParser.RULE_compAttrConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1681;
	        this.match(XQueryParser.KW_ATTRIBUTE);
	        this.state = 1687;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 188:
	            this.state = 1682;
	            this.eqName();
	            break;
	        case 25:
	            this.state = 1683;
	            this.match(XQueryParser.LBRACE);
	            this.state = 1684;
	            this.expr();
	            this.state = 1685;
	            this.match(XQueryParser.RBRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1689;
	        this.enclosedExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compNamespaceConstructor() {
	    let localctx = new CompNamespaceConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, XQueryParser.RULE_compNamespaceConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1691;
	        this.match(XQueryParser.KW_NAMESPACE);
	        this.state = 1694;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 188:
	            this.state = 1692;
	            this.prefix();
	            break;
	        case 25:
	            this.state = 1693;
	            this.enclosedPrefixExpr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1696;
	        this.enclosedURIExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefix() {
	    let localctx = new PrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, XQueryParser.RULE_prefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1698;
	        this.ncName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enclosedPrefixExpr() {
	    let localctx = new EnclosedPrefixExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, XQueryParser.RULE_enclosedPrefixExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1700;
	        this.enclosedExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enclosedURIExpr() {
	    let localctx = new EnclosedURIExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, XQueryParser.RULE_enclosedURIExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1702;
	        this.enclosedExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compTextConstructor() {
	    let localctx = new CompTextConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, XQueryParser.RULE_compTextConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1704;
	        this.match(XQueryParser.KW_TEXT);
	        this.state = 1705;
	        this.enclosedExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compCommentConstructor() {
	    let localctx = new CompCommentConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, XQueryParser.RULE_compCommentConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1707;
	        this.match(XQueryParser.KW_COMMENT);
	        this.state = 1708;
	        this.enclosedExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compPIConstructor() {
	    let localctx = new CompPIConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, XQueryParser.RULE_compPIConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1710;
	        this.match(XQueryParser.KW_PI);
	        this.state = 1716;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 188:
	            this.state = 1711;
	            this.ncName();
	            break;
	        case 25:
	            this.state = 1712;
	            this.match(XQueryParser.LBRACE);
	            this.state = 1713;
	            this.expr();
	            this.state = 1714;
	            this.match(XQueryParser.RBRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1718;
	        this.enclosedExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionItemExpr() {
	    let localctx = new FunctionItemExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, XQueryParser.RULE_functionItemExpr);
	    try {
	        this.state = 1722;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1720;
	            this.namedFunctionRef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1721;
	            this.inlineFunctionRef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedFunctionRef() {
	    let localctx = new NamedFunctionRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, XQueryParser.RULE_namedFunctionRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1724;
	        this.eqName();
	        this.state = 1725;
	        this.match(XQueryParser.HASH);
	        this.state = 1726;
	        this.match(XQueryParser.IntegerLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineFunctionRef() {
	    let localctx = new InlineFunctionRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, XQueryParser.RULE_inlineFunctionRef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1728;
	        this.annotations();
	        this.state = 1729;
	        this.match(XQueryParser.KW_FUNCTION);
	        this.state = 1730;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1732;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===44) {
	            this.state = 1731;
	            this.functionParams();
	        }

	        this.state = 1734;
	        this.match(XQueryParser.RPAREN);
	        this.state = 1737;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58) {
	            this.state = 1735;
	            this.match(XQueryParser.KW_AS);
	            this.state = 1736;
	            this.sequenceType();
	        }

	        this.state = 1739;
	        this.functionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBody() {
	    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, XQueryParser.RULE_functionBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1741;
	        this.enclosedExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapConstructor() {
	    let localctx = new MapConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, XQueryParser.RULE_mapConstructor);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1743;
	        this.match(XQueryParser.KW_MAP);
	        this.state = 1744;
	        this.match(XQueryParser.LBRACE);
	        this.state = 1753;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 5)) & ~0x1f) === 0 && ((1 << (_la - 5)) & 2378503631) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 4294902249) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 4294967295) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 4294967295) !== 0) || ((((_la - 133)) & ~0x1f) === 0 && ((1 << (_la - 133)) & 4294967231) !== 0) || ((((_la - 165)) & ~0x1f) === 0 && ((1 << (_la - 165)) & 2197815295) !== 0)) {
	            this.state = 1745;
	            this.mapConstructorEntry();
	            this.state = 1750;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===30) {
	                this.state = 1746;
	                this.match(XQueryParser.COMMA);
	                this.state = 1747;
	                this.mapConstructorEntry();
	                this.state = 1752;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1755;
	        this.match(XQueryParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapConstructorEntry() {
	    let localctx = new MapConstructorEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, XQueryParser.RULE_mapConstructorEntry);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1757;
	        localctx.mapKey = this.exprSingle();
	        this.state = 1758;
	        _la = this._input.LA(1);
	        if(!(_la===33 || _la===34)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1759;
	        localctx.mapValue = this.exprSingle();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayConstructor() {
	    let localctx = new ArrayConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, XQueryParser.RULE_arrayConstructor);
	    try {
	        this.state = 1763;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 23:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1761;
	            this.squareArrayConstructor();
	            break;
	        case 57:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1762;
	            this.curlyArrayConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	squareArrayConstructor() {
	    let localctx = new SquareArrayConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, XQueryParser.RULE_squareArrayConstructor);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1765;
	        this.match(XQueryParser.LBRACKET);
	        this.state = 1774;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 5)) & ~0x1f) === 0 && ((1 << (_la - 5)) & 2378503631) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 4294902249) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 4294967295) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 4294967295) !== 0) || ((((_la - 133)) & ~0x1f) === 0 && ((1 << (_la - 133)) & 4294967231) !== 0) || ((((_la - 165)) & ~0x1f) === 0 && ((1 << (_la - 165)) & 2197815295) !== 0)) {
	            this.state = 1766;
	            this.exprSingle();
	            this.state = 1771;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===30) {
	                this.state = 1767;
	                this.match(XQueryParser.COMMA);
	                this.state = 1768;
	                this.exprSingle();
	                this.state = 1773;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1776;
	        this.match(XQueryParser.RBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	curlyArrayConstructor() {
	    let localctx = new CurlyArrayConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, XQueryParser.RULE_curlyArrayConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1778;
	        this.match(XQueryParser.KW_ARRAY);
	        this.state = 1779;
	        this.enclosedExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringConstructor() {
	    let localctx = new StringConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, XQueryParser.RULE_stringConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1781;
	        this.match(XQueryParser.ENTER_STRING);
	        this.state = 1782;
	        this.stringConstructorContent();
	        this.state = 1783;
	        this.match(XQueryParser.EXIT_STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringConstructorContent() {
	    let localctx = new StringConstructorContentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, XQueryParser.RULE_stringConstructorContent);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1785;
	        this.stringConstructorChars();
	        this.state = 1791;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===200) {
	            this.state = 1786;
	            this.stringConstructorInterpolation();
	            this.state = 1787;
	            this.stringConstructorChars();
	            this.state = 1793;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charNoGrave() {
	    let localctx = new CharNoGraveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, XQueryParser.RULE_charNoGrave);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1794;
	        _la = this._input.LA(1);
	        if(!(_la===24 || _la===25 || _la===199)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charNoLBrace() {
	    let localctx = new CharNoLBraceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, XQueryParser.RULE_charNoLBrace);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1796;
	        _la = this._input.LA(1);
	        if(!(_la===24 || _la===50 || _la===199)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charNoRBrack() {
	    let localctx = new CharNoRBrackContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, XQueryParser.RULE_charNoRBrack);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1798;
	        _la = this._input.LA(1);
	        if(!(_la===25 || _la===50 || _la===199)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringConstructorChars() {
	    let localctx = new StringConstructorCharsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, XQueryParser.RULE_stringConstructorChars);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1812;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 24)) & ~0x1f) === 0 && ((1 << (_la - 24)) & 67108867) !== 0) || _la===199) {
	            this.state = 1810;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1800;
	                this.match(XQueryParser.BASIC_CHAR);
	                break;

	            case 2:
	                this.state = 1801;
	                this.charNoGrave();
	                this.state = 1802;
	                this.charNoLBrace();
	                break;

	            case 3:
	                this.state = 1804;
	                this.charNoRBrack();
	                this.state = 1805;
	                this.charNoGrave();
	                this.state = 1806;
	                this.charNoGrave();
	                break;

	            case 4:
	                this.state = 1808;
	                this.charNoGrave();
	                break;

	            case 5:
	                this.state = 1809;
	                this.match(XQueryParser.LBRACE);
	                break;

	            }
	            this.state = 1814;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringConstructorInterpolation() {
	    let localctx = new StringConstructorInterpolationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, XQueryParser.RULE_stringConstructorInterpolation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1815;
	        this.match(XQueryParser.ENTER_INTERPOLATION);
	        this.state = 1816;
	        this.expr();
	        this.state = 1817;
	        this.match(XQueryParser.EXIT_INTERPOLATION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryLookup() {
	    let localctx = new UnaryLookupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, XQueryParser.RULE_unaryLookup);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1819;
	        this.match(XQueryParser.QUESTION);
	        this.state = 1820;
	        this.keySpecifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleType() {
	    let localctx = new SingleTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, XQueryParser.RULE_singleType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1822;
	        this.simpleTypeName();
	        this.state = 1824;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
	        if(la_===1) {
	            this.state = 1823;
	            this.match(XQueryParser.QUESTION);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDeclaration() {
	    let localctx = new TypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, XQueryParser.RULE_typeDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1826;
	        this.match(XQueryParser.KW_AS);
	        this.state = 1827;
	        this.sequenceType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequenceType() {
	    let localctx = new SequenceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, XQueryParser.RULE_sequenceType);
	    var _la = 0;
	    try {
	        this.state = 1836;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1829;
	            this.match(XQueryParser.KW_EMPTY_SEQUENCE);
	            this.state = 1830;
	            this.match(XQueryParser.LPAREN);
	            this.state = 1831;
	            this.match(XQueryParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1832;
	            this.itemType();
	            this.state = 1834;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	            if(la_===1) {
	                this.state = 1833;
	                localctx.occurrence = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(((((_la - 27)) & ~0x1f) === 0 && ((1 << (_la - 27)) & 32771) !== 0))) {
	                    localctx.occurrence = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	itemType() {
	    let localctx = new ItemTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, XQueryParser.RULE_itemType);
	    try {
	        this.state = 1847;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1838;
	            this.kindTest();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1839;
	            this.match(XQueryParser.KW_ITEM);
	            this.state = 1840;
	            this.match(XQueryParser.LPAREN);
	            this.state = 1841;
	            this.match(XQueryParser.RPAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1842;
	            this.functionTest();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1843;
	            this.mapTest();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1844;
	            this.arrayTest();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1845;
	            this.atomicOrUnionType();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1846;
	            this.parenthesizedItemTest();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomicOrUnionType() {
	    let localctx = new AtomicOrUnionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, XQueryParser.RULE_atomicOrUnionType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1849;
	        this.eqName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kindTest() {
	    let localctx = new KindTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, XQueryParser.RULE_kindTest);
	    try {
	        this.state = 1863;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 85:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1851;
	            this.documentTest();
	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1852;
	            this.elementTest();
	            break;
	        case 61:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1853;
	            this.attributeTest();
	            break;
	        case 145:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1854;
	            this.schemaElementTest();
	            break;
	        case 144:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1855;
	            this.schemaAttributeTest();
	            break;
	        case 140:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1856;
	            this.piTest();
	            break;
	        case 72:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1857;
	            this.commentTest();
	            break;
	        case 190:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1858;
	            this.textTest();
	            break;
	        case 124:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1859;
	            this.namespaceNodeTest();
	            break;
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1860;
	            this.mlNodeTest();
	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1861;
	            this.binaryNodeTest();
	            break;
	        case 127:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1862;
	            this.anyKindTest();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anyKindTest() {
	    let localctx = new AnyKindTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, XQueryParser.RULE_anyKindTest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1865;
	        this.match(XQueryParser.KW_NODE);
	        this.state = 1866;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1868;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===27) {
	            this.state = 1867;
	            this.match(XQueryParser.STAR);
	        }

	        this.state = 1870;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binaryNodeTest() {
	    let localctx = new BinaryNodeTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, XQueryParser.RULE_binaryNodeTest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1872;
	        this.match(XQueryParser.KW_BINARY);
	        this.state = 1873;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1874;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	documentTest() {
	    let localctx = new DocumentTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, XQueryParser.RULE_documentTest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1876;
	        this.match(XQueryParser.KW_DOCUMENT_NODE);
	        this.state = 1877;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1880;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 86:
	        	this.state = 1878;
	        	this.elementTest();
	        	break;
	        case 145:
	        	this.state = 1879;
	        	this.schemaElementTest();
	        	break;
	        case 22:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 1882;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textTest() {
	    let localctx = new TextTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, XQueryParser.RULE_textTest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1884;
	        this.match(XQueryParser.TEXT_FUNCTION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commentTest() {
	    let localctx = new CommentTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, XQueryParser.RULE_commentTest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1886;
	        this.match(XQueryParser.KW_COMMENT);
	        this.state = 1887;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1888;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceNodeTest() {
	    let localctx = new NamespaceNodeTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, XQueryParser.RULE_namespaceNodeTest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1890;
	        this.match(XQueryParser.KW_NAMESPACE_NODE);
	        this.state = 1891;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1892;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	piTest() {
	    let localctx = new PiTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, XQueryParser.RULE_piTest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1894;
	        this.match(XQueryParser.KW_PI);
	        this.state = 1895;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1898;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 8:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 188:
	        	this.state = 1896;
	        	this.ncName();
	        	break;
	        case 11:
	        case 12:
	        	this.state = 1897;
	        	this.stringLiteral();
	        	break;
	        case 22:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 1900;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeTest() {
	    let localctx = new AttributeTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, XQueryParser.RULE_attributeTest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1902;
	        this.match(XQueryParser.KW_ATTRIBUTE);
	        this.state = 1903;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1909;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8 || _la===27 || ((((_la - 53)) & ~0x1f) === 0 && ((1 << (_la - 53)) & 4294967295) !== 0) || ((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 4294967295) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 4290772991) !== 0) || ((((_la - 149)) & ~0x1f) === 0 && ((1 << (_la - 149)) & 4294967295) !== 0) || ((((_la - 181)) & ~0x1f) === 0 && ((1 << (_la - 181)) & 159) !== 0)) {
	            this.state = 1904;
	            this.attributeNameOrWildcard();
	            this.state = 1907;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===30) {
	                this.state = 1905;
	                this.match(XQueryParser.COMMA);
	                this.state = 1906;
	                localctx.type = this.typeName();
	            }

	        }

	        this.state = 1911;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeNameOrWildcard() {
	    let localctx = new AttributeNameOrWildcardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, XQueryParser.RULE_attributeNameOrWildcard);
	    try {
	        this.state = 1915;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 188:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1913;
	            this.attributeName();
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1914;
	            this.match(XQueryParser.STAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaAttributeTest() {
	    let localctx = new SchemaAttributeTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, XQueryParser.RULE_schemaAttributeTest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1917;
	        this.match(XQueryParser.KW_SCHEMA_ATTR);
	        this.state = 1918;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1919;
	        this.attributeDeclaration();
	        this.state = 1920;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementTest() {
	    let localctx = new ElementTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, XQueryParser.RULE_elementTest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1922;
	        this.match(XQueryParser.KW_ELEMENT);
	        this.state = 1923;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1932;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8 || _la===27 || ((((_la - 53)) & ~0x1f) === 0 && ((1 << (_la - 53)) & 4294967295) !== 0) || ((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 4294967295) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 4290772991) !== 0) || ((((_la - 149)) & ~0x1f) === 0 && ((1 << (_la - 149)) & 4294967295) !== 0) || ((((_la - 181)) & ~0x1f) === 0 && ((1 << (_la - 181)) & 159) !== 0)) {
	            this.state = 1924;
	            this.elementNameOrWildcard();
	            this.state = 1930;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===30) {
	                this.state = 1925;
	                this.match(XQueryParser.COMMA);
	                this.state = 1926;
	                this.typeName();
	                this.state = 1928;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===42) {
	                    this.state = 1927;
	                    localctx.optional = this.match(XQueryParser.QUESTION);
	                }

	            }

	        }

	        this.state = 1934;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementNameOrWildcard() {
	    let localctx = new ElementNameOrWildcardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, XQueryParser.RULE_elementNameOrWildcard);
	    try {
	        this.state = 1938;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 188:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1936;
	            this.elementName();
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1937;
	            this.match(XQueryParser.STAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaElementTest() {
	    let localctx = new SchemaElementTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, XQueryParser.RULE_schemaElementTest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1940;
	        this.match(XQueryParser.KW_SCHEMA_ELEM);
	        this.state = 1941;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1942;
	        this.elementDeclaration();
	        this.state = 1943;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementDeclaration() {
	    let localctx = new ElementDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, XQueryParser.RULE_elementDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1945;
	        this.elementName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeName() {
	    let localctx = new AttributeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, XQueryParser.RULE_attributeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1947;
	        this.eqName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementName() {
	    let localctx = new ElementNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, XQueryParser.RULE_elementName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1949;
	        this.eqName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleTypeName() {
	    let localctx = new SimpleTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, XQueryParser.RULE_simpleTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1951;
	        this.typeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeName() {
	    let localctx = new TypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, XQueryParser.RULE_typeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1953;
	        this.eqName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionTest() {
	    let localctx = new FunctionTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, XQueryParser.RULE_functionTest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1958;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===45) {
	            this.state = 1955;
	            this.annotation();
	            this.state = 1960;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1963;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1961;
	            this.anyFunctionTest();
	            break;

	        case 2:
	            this.state = 1962;
	            this.typedFunctionTest();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anyFunctionTest() {
	    let localctx = new AnyFunctionTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, XQueryParser.RULE_anyFunctionTest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1965;
	        this.match(XQueryParser.KW_FUNCTION);
	        this.state = 1966;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1967;
	        this.match(XQueryParser.STAR);
	        this.state = 1968;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedFunctionTest() {
	    let localctx = new TypedFunctionTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, XQueryParser.RULE_typedFunctionTest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1970;
	        this.match(XQueryParser.KW_FUNCTION);
	        this.state = 1971;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1980;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8 || _la===21 || ((((_la - 45)) & ~0x1f) === 0 && ((1 << (_la - 45)) & 4294967041) !== 0) || ((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 4294967295) !== 0) || ((((_la - 109)) & ~0x1f) === 0 && ((1 << (_la - 109)) & 3221225471) !== 0) || ((((_la - 141)) & ~0x1f) === 0 && ((1 << (_la - 141)) & 4294967295) !== 0) || ((((_la - 173)) & ~0x1f) === 0 && ((1 << (_la - 173)) & 172031) !== 0)) {
	            this.state = 1972;
	            this.sequenceType();
	            this.state = 1977;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===30) {
	                this.state = 1973;
	                this.match(XQueryParser.COMMA);
	                this.state = 1974;
	                this.sequenceType();
	                this.state = 1979;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1982;
	        this.match(XQueryParser.RPAREN);
	        this.state = 1983;
	        this.match(XQueryParser.KW_AS);
	        this.state = 1984;
	        this.sequenceType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapTest() {
	    let localctx = new MapTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, XQueryParser.RULE_mapTest);
	    try {
	        this.state = 1988;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1986;
	            this.anyMapTest();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1987;
	            this.typedMapTest();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anyMapTest() {
	    let localctx = new AnyMapTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, XQueryParser.RULE_anyMapTest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1990;
	        this.match(XQueryParser.KW_MAP);
	        this.state = 1991;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1992;
	        this.match(XQueryParser.STAR);
	        this.state = 1993;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedMapTest() {
	    let localctx = new TypedMapTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, XQueryParser.RULE_typedMapTest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1995;
	        this.match(XQueryParser.KW_MAP);
	        this.state = 1996;
	        this.match(XQueryParser.LPAREN);
	        this.state = 1997;
	        this.eqName();
	        this.state = 1998;
	        this.match(XQueryParser.COMMA);
	        this.state = 1999;
	        this.sequenceType();
	        this.state = 2000;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayTest() {
	    let localctx = new ArrayTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, XQueryParser.RULE_arrayTest);
	    try {
	        this.state = 2004;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2002;
	            this.anyArrayTest();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2003;
	            this.typedArrayTest();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anyArrayTest() {
	    let localctx = new AnyArrayTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, XQueryParser.RULE_anyArrayTest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2006;
	        this.match(XQueryParser.KW_ARRAY);
	        this.state = 2007;
	        this.match(XQueryParser.LPAREN);
	        this.state = 2008;
	        this.match(XQueryParser.STAR);
	        this.state = 2009;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedArrayTest() {
	    let localctx = new TypedArrayTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, XQueryParser.RULE_typedArrayTest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2011;
	        this.match(XQueryParser.KW_ARRAY);
	        this.state = 2012;
	        this.match(XQueryParser.LPAREN);
	        this.state = 2013;
	        this.sequenceType();
	        this.state = 2014;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedItemTest() {
	    let localctx = new ParenthesizedItemTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, XQueryParser.RULE_parenthesizedItemTest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2016;
	        this.match(XQueryParser.LPAREN);
	        this.state = 2017;
	        this.itemType();
	        this.state = 2018;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeDeclaration() {
	    let localctx = new AttributeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, XQueryParser.RULE_attributeDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2020;
	        this.attributeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mlNodeTest() {
	    let localctx = new MlNodeTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, XQueryParser.RULE_mlNodeTest);
	    try {
	        this.state = 2027;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 172:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2022;
	            this.mlArrayNodeTest();
	            break;
	        case 176:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2023;
	            this.mlObjectNodeTest();
	            break;
	        case 175:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2024;
	            this.mlNumberNodeTest();
	            break;
	        case 173:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2025;
	            this.mlBooleanNodeTest();
	            break;
	        case 174:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2026;
	            this.mlNullNodeTest();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mlArrayNodeTest() {
	    let localctx = new MlArrayNodeTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, XQueryParser.RULE_mlArrayNodeTest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2029;
	        this.match(XQueryParser.KW_ARRAY_NODE);
	        this.state = 2030;
	        this.match(XQueryParser.LPAREN);
	        this.state = 2032;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11 || _la===12) {
	            this.state = 2031;
	            this.stringLiteral();
	        }

	        this.state = 2034;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mlObjectNodeTest() {
	    let localctx = new MlObjectNodeTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, XQueryParser.RULE_mlObjectNodeTest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2036;
	        this.match(XQueryParser.KW_OBJECT_NODE);
	        this.state = 2037;
	        this.match(XQueryParser.LPAREN);
	        this.state = 2039;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11 || _la===12) {
	            this.state = 2038;
	            this.stringLiteral();
	        }

	        this.state = 2041;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mlNumberNodeTest() {
	    let localctx = new MlNumberNodeTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, XQueryParser.RULE_mlNumberNodeTest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2043;
	        this.match(XQueryParser.KW_NUMBER_NODE);
	        this.state = 2044;
	        this.match(XQueryParser.LPAREN);
	        this.state = 2046;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11 || _la===12) {
	            this.state = 2045;
	            this.stringLiteral();
	        }

	        this.state = 2048;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mlBooleanNodeTest() {
	    let localctx = new MlBooleanNodeTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, XQueryParser.RULE_mlBooleanNodeTest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2050;
	        this.match(XQueryParser.KW_BOOLEAN_NODE);
	        this.state = 2051;
	        this.match(XQueryParser.LPAREN);
	        this.state = 2053;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11 || _la===12) {
	            this.state = 2052;
	            this.stringLiteral();
	        }

	        this.state = 2055;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mlNullNodeTest() {
	    let localctx = new MlNullNodeTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, XQueryParser.RULE_mlNullNodeTest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2057;
	        this.match(XQueryParser.KW_NULL_NODE);
	        this.state = 2058;
	        this.match(XQueryParser.LPAREN);
	        this.state = 2060;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11 || _la===12) {
	            this.state = 2059;
	            this.stringLiteral();
	        }

	        this.state = 2062;
	        this.match(XQueryParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eqName() {
	    let localctx = new EqNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, XQueryParser.RULE_eqName);
	    try {
	        this.state = 2066;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 185:
	        case 188:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2064;
	            this.qName();
	            break;
	        case 184:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2065;
	            this.match(XQueryParser.URIQualifiedName);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qName() {
	    let localctx = new QNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, XQueryParser.RULE_qName);
	    try {
	        this.state = 2070;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 185:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2068;
	            this.match(XQueryParser.FullQName);
	            break;
	        case 8:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 188:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2069;
	            this.ncName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ncName() {
	    let localctx = new NcNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, XQueryParser.RULE_ncName);
	    try {
	        this.state = 2074;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 188:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2072;
	            this.match(XQueryParser.NCName);
	            break;
	        case 8:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2073;
	            this.keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionName() {
	    let localctx = new FunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, XQueryParser.RULE_functionName);
	    try {
	        this.state = 2080;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 185:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2076;
	            this.match(XQueryParser.FullQName);
	            break;
	        case 188:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2077;
	            this.match(XQueryParser.NCName);
	            break;
	        case 184:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2078;
	            this.match(XQueryParser.URIQualifiedName);
	            break;
	        case 54:
	        case 55:
	        case 56:
	        case 58:
	        case 59:
	        case 60:
	        case 62:
	        case 63:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 70:
	        case 71:
	        case 73:
	        case 75:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 83:
	        case 84:
	        case 87:
	        case 88:
	        case 90:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 125:
	        case 126:
	        case 128:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 141:
	        case 142:
	        case 143:
	        case 146:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 155:
	        case 156:
	        case 157:
	        case 162:
	        case 163:
	        case 165:
	        case 166:
	        case 167:
	        case 169:
	        case 171:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2079;
	            this.keywordOKForFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, XQueryParser.RULE_keyword);
	    try {
	        this.state = 2084;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 54:
	        case 55:
	        case 56:
	        case 58:
	        case 59:
	        case 60:
	        case 62:
	        case 63:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 70:
	        case 71:
	        case 73:
	        case 75:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 83:
	        case 84:
	        case 87:
	        case 88:
	        case 90:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 125:
	        case 126:
	        case 128:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 141:
	        case 142:
	        case 143:
	        case 146:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 155:
	        case 156:
	        case 157:
	        case 162:
	        case 163:
	        case 165:
	        case 166:
	        case 167:
	        case 169:
	        case 171:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2082;
	            this.keywordOKForFunction();
	            break;
	        case 8:
	        case 53:
	        case 57:
	        case 61:
	        case 64:
	        case 69:
	        case 72:
	        case 74:
	        case 76:
	        case 82:
	        case 85:
	        case 86:
	        case 89:
	        case 91:
	        case 105:
	        case 112:
	        case 118:
	        case 123:
	        case 124:
	        case 127:
	        case 129:
	        case 140:
	        case 144:
	        case 145:
	        case 147:
	        case 153:
	        case 154:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 164:
	        case 168:
	        case 170:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2083;
	            this.keywordNotOKForFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keywordNotOKForFunction() {
	    let localctx = new KeywordNotOKForFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, XQueryParser.RULE_keywordNotOKForFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2086;
	        _la = this._input.LA(1);
	        if(!(_la===8 || ((((_la - 53)) & ~0x1f) === 0 && ((1 << (_la - 53)) & 547948817) !== 0) || ((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 135266387) !== 0) || ((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 742394465) !== 0) || ((((_la - 153)) & ~0x1f) === 0 && ((1 << (_la - 153)) & 2147125731) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keywordOKForFunction() {
	    let localctx = new KeywordOKForFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, XQueryParser.RULE_keywordOKForFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2088;
	        _la = this._input.LA(1);
	        if(!(((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 1873509239) !== 0) || ((((_la - 87)) & ~0x1f) === 0 && ((1 << (_la - 87)) & 2113667051) !== 0) || ((((_la - 119)) & ~0x1f) === 0 && ((1 << (_la - 119)) & 3922721487) !== 0) || ((((_la - 151)) & ~0x1f) === 0 && ((1 << (_la - 151)) & 1431667) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uriLiteral() {
	    let localctx = new UriLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, XQueryParser.RULE_uriLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2090;
	        this.stringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteralQuot() {
	    let localctx = new StringLiteralQuotContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, XQueryParser.RULE_stringLiteralQuot);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2092;
	        this.match(XQueryParser.Quot);
	        this.state = 2099;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294588410) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4294442751) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1f) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1f) === 0 && ((1 << (_la - 160)) & 2684354559) !== 0) || _la===198) {
	            this.state = 2097;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 9:
	                this.state = 2093;
	                this.match(XQueryParser.PredefinedEntityRef);
	                break;
	            case 10:
	                this.state = 2094;
	                this.match(XQueryParser.CharRef);
	                break;
	            case 1:
	                this.state = 2095;
	                this.match(XQueryParser.EscapeQuot);
	                break;
	            case 3:
	            case 4:
	            case 5:
	            case 6:
	            case 7:
	            case 8:
	            case 12:
	            case 13:
	            case 17:
	            case 19:
	            case 20:
	            case 21:
	            case 22:
	            case 23:
	            case 24:
	            case 25:
	            case 26:
	            case 27:
	            case 28:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 41:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 50:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 159:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 164:
	            case 165:
	            case 166:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 173:
	            case 174:
	            case 175:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 183:
	            case 184:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 191:
	            case 198:
	                this.state = 2096;
	                this.stringContentQuot();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2101;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2102;
	        this.match(XQueryParser.Quot);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteralApos() {
	    let localctx = new StringLiteralAposContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, XQueryParser.RULE_stringLiteralApos);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2104;
	        this.match(XQueryParser.Apos);
	        this.state = 2111;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294586364) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4294442751) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1f) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1f) === 0 && ((1 << (_la - 160)) & 2684354559) !== 0) || _la===198) {
	            this.state = 2109;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 9:
	                this.state = 2105;
	                this.match(XQueryParser.PredefinedEntityRef);
	                break;
	            case 10:
	                this.state = 2106;
	                this.match(XQueryParser.CharRef);
	                break;
	            case 2:
	                this.state = 2107;
	                this.match(XQueryParser.EscapeApos);
	                break;
	            case 3:
	            case 4:
	            case 5:
	            case 6:
	            case 7:
	            case 8:
	            case 11:
	            case 13:
	            case 17:
	            case 19:
	            case 20:
	            case 21:
	            case 22:
	            case 23:
	            case 24:
	            case 25:
	            case 26:
	            case 27:
	            case 28:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 41:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 50:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 159:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 164:
	            case 165:
	            case 166:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 173:
	            case 174:
	            case 175:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 183:
	            case 184:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 191:
	            case 198:
	                this.state = 2108;
	                this.stringContentApos();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2113;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2114;
	        this.match(XQueryParser.Apos);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, XQueryParser.RULE_stringLiteral);
	    try {
	        this.state = 2118;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 11:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2116;
	            this.stringLiteralQuot();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2117;
	            this.stringLiteralApos();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringContentQuot() {
	    let localctx = new StringContentQuotContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, XQueryParser.RULE_stringContentQuot);
	    try {
	        this.state = 2137;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2121; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2120;
	            		this.match(XQueryParser.ContentChar);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2123; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,200, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2125;
	            this.match(XQueryParser.LBRACE);
	            this.state = 2127;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	            if(la_===1) {
	                this.state = 2126;
	                this.expr();

	            }
	            this.state = 2130;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
	            if(la_===1) {
	                this.state = 2129;
	                this.match(XQueryParser.RBRACE);

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2132;
	            this.match(XQueryParser.RBRACE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2133;
	            this.match(XQueryParser.DOUBLE_LBRACE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2134;
	            this.match(XQueryParser.DOUBLE_RBRACE);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2135;
	            this.noQuotesNoBracesNoAmpNoLAng();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2136;
	            this.stringLiteralApos();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringContentApos() {
	    let localctx = new StringContentAposContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, XQueryParser.RULE_stringContentApos);
	    try {
	        this.state = 2156;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2140; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2139;
	            		this.match(XQueryParser.ContentChar);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2142; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,204, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2144;
	            this.match(XQueryParser.LBRACE);
	            this.state = 2146;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
	            if(la_===1) {
	                this.state = 2145;
	                this.expr();

	            }
	            this.state = 2149;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
	            if(la_===1) {
	                this.state = 2148;
	                this.match(XQueryParser.RBRACE);

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2151;
	            this.match(XQueryParser.RBRACE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2152;
	            this.match(XQueryParser.DOUBLE_LBRACE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2153;
	            this.match(XQueryParser.DOUBLE_RBRACE);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2154;
	            this.noQuotesNoBracesNoAmpNoLAng();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2155;
	            this.stringLiteralQuot();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	noQuotesNoBracesNoAmpNoLAng() {
	    let localctx = new NoQuotesNoBracesNoAmpNoLAngContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, XQueryParser.RULE_noQuotesNoBracesNoAmpNoLAng);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2160; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2160;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
	        		switch(la_) {
	        		case 1:
	        		    this.state = 2158;
	        		    this.keyword();
	        		    break;

	        		case 2:
	        		    this.state = 2159;
	        		    _la = this._input.LA(1);
	        		    if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 4193919200) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 1572607) !== 0) || _la===123 || _la===139 || ((((_la - 184)) & ~0x1f) === 0 && ((1 << (_la - 184)) & 16543) !== 0))) {
	        		    this._errHandler.recoverInline(this);
	        		    }
	        		    else {
	        		    	this._errHandler.reportMatch(this);
	        		        this.consume();
	        		    }
	        		    break;

	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2162; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,209, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

XQueryParser.EOF = antlr4.Token.EOF;
XQueryParser.EscapeQuot = 1;
XQueryParser.EscapeApos = 2;
XQueryParser.DOUBLE_LBRACE = 3;
XQueryParser.DOUBLE_RBRACE = 4;
XQueryParser.IntegerLiteral = 5;
XQueryParser.DecimalLiteral = 6;
XQueryParser.DoubleLiteral = 7;
XQueryParser.DFPropertyName = 8;
XQueryParser.PredefinedEntityRef = 9;
XQueryParser.CharRef = 10;
XQueryParser.Quot = 11;
XQueryParser.Apos = 12;
XQueryParser.COMMENT = 13;
XQueryParser.XMLDECL = 14;
XQueryParser.PI = 15;
XQueryParser.CDATA = 16;
XQueryParser.PRAGMA = 17;
XQueryParser.WS = 18;
XQueryParser.EQUAL = 19;
XQueryParser.NOT_EQUAL = 20;
XQueryParser.LPAREN = 21;
XQueryParser.RPAREN = 22;
XQueryParser.LBRACKET = 23;
XQueryParser.RBRACKET = 24;
XQueryParser.LBRACE = 25;
XQueryParser.RBRACE = 26;
XQueryParser.STAR = 27;
XQueryParser.PLUS = 28;
XQueryParser.MINUS = 29;
XQueryParser.COMMA = 30;
XQueryParser.DOT = 31;
XQueryParser.DDOT = 32;
XQueryParser.COLON = 33;
XQueryParser.COLON_EQ = 34;
XQueryParser.SEMICOLON = 35;
XQueryParser.SLASH = 36;
XQueryParser.DSLASH = 37;
XQueryParser.BACKSLASH = 38;
XQueryParser.VBAR = 39;
XQueryParser.LANGLE = 40;
XQueryParser.RANGLE = 41;
XQueryParser.QUESTION = 42;
XQueryParser.AT = 43;
XQueryParser.DOLLAR = 44;
XQueryParser.MOD = 45;
XQueryParser.BANG = 46;
XQueryParser.HASH = 47;
XQueryParser.CARAT = 48;
XQueryParser.ARROW = 49;
XQueryParser.GRAVE = 50;
XQueryParser.CONCATENATION = 51;
XQueryParser.TILDE = 52;
XQueryParser.KW_ALLOWING = 53;
XQueryParser.KW_ANCESTOR = 54;
XQueryParser.KW_ANCESTOR_OR_SELF = 55;
XQueryParser.KW_AND = 56;
XQueryParser.KW_ARRAY = 57;
XQueryParser.KW_AS = 58;
XQueryParser.KW_ASCENDING = 59;
XQueryParser.KW_AT = 60;
XQueryParser.KW_ATTRIBUTE = 61;
XQueryParser.KW_BASE_URI = 62;
XQueryParser.KW_BOUNDARY_SPACE = 63;
XQueryParser.KW_BINARY = 64;
XQueryParser.KW_BY = 65;
XQueryParser.KW_CASE = 66;
XQueryParser.KW_CAST = 67;
XQueryParser.KW_CASTABLE = 68;
XQueryParser.KW_CATCH = 69;
XQueryParser.KW_CHILD = 70;
XQueryParser.KW_COLLATION = 71;
XQueryParser.KW_COMMENT = 72;
XQueryParser.KW_CONSTRUCTION = 73;
XQueryParser.KW_CONTEXT = 74;
XQueryParser.KW_COPY_NS = 75;
XQueryParser.KW_COUNT = 76;
XQueryParser.KW_DECLARE = 77;
XQueryParser.KW_DEFAULT = 78;
XQueryParser.KW_DESCENDANT = 79;
XQueryParser.KW_DESCENDANT_OR_SELF = 80;
XQueryParser.KW_DESCENDING = 81;
XQueryParser.KW_DECIMAL_FORMAT = 82;
XQueryParser.KW_DIV = 83;
XQueryParser.KW_DOCUMENT = 84;
XQueryParser.KW_DOCUMENT_NODE = 85;
XQueryParser.KW_ELEMENT = 86;
XQueryParser.KW_ELSE = 87;
XQueryParser.KW_EMPTY = 88;
XQueryParser.KW_EMPTY_SEQUENCE = 89;
XQueryParser.KW_ENCODING = 90;
XQueryParser.KW_END = 91;
XQueryParser.KW_EQ = 92;
XQueryParser.KW_EVERY = 93;
XQueryParser.KW_EXCEPT = 94;
XQueryParser.KW_EXTERNAL = 95;
XQueryParser.KW_FOLLOWING = 96;
XQueryParser.KW_FOLLOWING_SIBLING = 97;
XQueryParser.KW_FOR = 98;
XQueryParser.KW_FUNCTION = 99;
XQueryParser.KW_GE = 100;
XQueryParser.KW_GREATEST = 101;
XQueryParser.KW_GROUP = 102;
XQueryParser.KW_GT = 103;
XQueryParser.KW_IDIV = 104;
XQueryParser.KW_IF = 105;
XQueryParser.KW_IMPORT = 106;
XQueryParser.KW_IN = 107;
XQueryParser.KW_INHERIT = 108;
XQueryParser.KW_INSTANCE = 109;
XQueryParser.KW_INTERSECT = 110;
XQueryParser.KW_IS = 111;
XQueryParser.KW_ITEM = 112;
XQueryParser.KW_LAX = 113;
XQueryParser.KW_LE = 114;
XQueryParser.KW_LEAST = 115;
XQueryParser.KW_LET = 116;
XQueryParser.KW_LT = 117;
XQueryParser.KW_MAP = 118;
XQueryParser.KW_MOD = 119;
XQueryParser.KW_MODULE = 120;
XQueryParser.KW_NAMESPACE = 121;
XQueryParser.KW_NE = 122;
XQueryParser.KW_NEXT = 123;
XQueryParser.KW_NAMESPACE_NODE = 124;
XQueryParser.KW_NO_INHERIT = 125;
XQueryParser.KW_NO_PRESERVE = 126;
XQueryParser.KW_NODE = 127;
XQueryParser.KW_OF = 128;
XQueryParser.KW_ONLY = 129;
XQueryParser.KW_OPTION = 130;
XQueryParser.KW_OR = 131;
XQueryParser.KW_ORDER = 132;
XQueryParser.KW_ORDERED = 133;
XQueryParser.KW_ORDERING = 134;
XQueryParser.KW_PARENT = 135;
XQueryParser.KW_PRECEDING = 136;
XQueryParser.KW_PRECEDING_SIBLING = 137;
XQueryParser.KW_PRESERVE = 138;
XQueryParser.KW_PREVIOUS = 139;
XQueryParser.KW_PI = 140;
XQueryParser.KW_RETURN = 141;
XQueryParser.KW_SATISFIES = 142;
XQueryParser.KW_SCHEMA = 143;
XQueryParser.KW_SCHEMA_ATTR = 144;
XQueryParser.KW_SCHEMA_ELEM = 145;
XQueryParser.KW_SELF = 146;
XQueryParser.KW_SLIDING = 147;
XQueryParser.KW_SOME = 148;
XQueryParser.KW_STABLE = 149;
XQueryParser.KW_START = 150;
XQueryParser.KW_STRICT = 151;
XQueryParser.KW_STRIP = 152;
XQueryParser.KW_SWITCH = 153;
XQueryParser.KW_TEXT = 154;
XQueryParser.KW_THEN = 155;
XQueryParser.KW_TO = 156;
XQueryParser.KW_TREAT = 157;
XQueryParser.KW_TRY = 158;
XQueryParser.KW_TUMBLING = 159;
XQueryParser.KW_TYPE = 160;
XQueryParser.KW_TYPESWITCH = 161;
XQueryParser.KW_UNION = 162;
XQueryParser.KW_UNORDERED = 163;
XQueryParser.KW_UPDATE = 164;
XQueryParser.KW_VALIDATE = 165;
XQueryParser.KW_VARIABLE = 166;
XQueryParser.KW_VERSION = 167;
XQueryParser.KW_WHEN = 168;
XQueryParser.KW_WHERE = 169;
XQueryParser.KW_WINDOW = 170;
XQueryParser.KW_XQUERY = 171;
XQueryParser.KW_ARRAY_NODE = 172;
XQueryParser.KW_BOOLEAN_NODE = 173;
XQueryParser.KW_NULL_NODE = 174;
XQueryParser.KW_NUMBER_NODE = 175;
XQueryParser.KW_OBJECT_NODE = 176;
XQueryParser.KW_REPLACE = 177;
XQueryParser.KW_WITH = 178;
XQueryParser.KW_VALUE = 179;
XQueryParser.KW_INSERT = 180;
XQueryParser.KW_INTO = 181;
XQueryParser.KW_DELETE = 182;
XQueryParser.KW_RENAME = 183;
XQueryParser.URIQualifiedName = 184;
XQueryParser.FullQName = 185;
XQueryParser.NCNameWithLocalWildcard = 186;
XQueryParser.NCNameWithPrefixWildcard = 187;
XQueryParser.NCName = 188;
XQueryParser.XDMP_MAPPING_FALSE = 189;
XQueryParser.TEXT_FUNCTION = 190;
XQueryParser.XQDOC_COMMENT_START = 191;
XQueryParser.XQDOC_COMMENT_END = 192;
XQueryParser.XQDocComment = 193;
XQueryParser.XQComment = 194;
XQueryParser.CHAR = 195;
XQueryParser.ENTER_STRING = 196;
XQueryParser.EXIT_INTERPOLATION = 197;
XQueryParser.ContentChar = 198;
XQueryParser.BASIC_CHAR = 199;
XQueryParser.ENTER_INTERPOLATION = 200;
XQueryParser.EXIT_STRING = 201;
XQueryParser.EscapeQuot_QuotString = 202;
XQueryParser.DOUBLE_LBRACE_QuotString = 203;
XQueryParser.DOUBLE_RBRACE_QuotString = 204;
XQueryParser.EscapeApos_AposString = 205;

XQueryParser.RULE_module = 0;
XQueryParser.RULE_xqDocComment = 1;
XQueryParser.RULE_versionDecl = 2;
XQueryParser.RULE_mainModule = 3;
XQueryParser.RULE_queryBody = 4;
XQueryParser.RULE_libraryModule = 5;
XQueryParser.RULE_moduleDecl = 6;
XQueryParser.RULE_prolog = 7;
XQueryParser.RULE_defaultNamespaceDecl = 8;
XQueryParser.RULE_setter = 9;
XQueryParser.RULE_boundarySpaceDecl = 10;
XQueryParser.RULE_defaultCollationDecl = 11;
XQueryParser.RULE_baseURIDecl = 12;
XQueryParser.RULE_constructionDecl = 13;
XQueryParser.RULE_orderingModeDecl = 14;
XQueryParser.RULE_emptyOrderDecl = 15;
XQueryParser.RULE_copyNamespacesDecl = 16;
XQueryParser.RULE_preserveMode = 17;
XQueryParser.RULE_inheritMode = 18;
XQueryParser.RULE_decimalFormatDecl = 19;
XQueryParser.RULE_schemaImport = 20;
XQueryParser.RULE_schemaPrefix = 21;
XQueryParser.RULE_moduleImport = 22;
XQueryParser.RULE_namespaceDecl = 23;
XQueryParser.RULE_varDecl = 24;
XQueryParser.RULE_varValue = 25;
XQueryParser.RULE_varDefaultValue = 26;
XQueryParser.RULE_contextItemDecl = 27;
XQueryParser.RULE_functionDecl = 28;
XQueryParser.RULE_functionParams = 29;
XQueryParser.RULE_functionParam = 30;
XQueryParser.RULE_annotations = 31;
XQueryParser.RULE_annotation = 32;
XQueryParser.RULE_annotList = 33;
XQueryParser.RULE_annotationParam = 34;
XQueryParser.RULE_functionReturn = 35;
XQueryParser.RULE_optionDecl = 36;
XQueryParser.RULE_mappingDecl = 37;
XQueryParser.RULE_expr = 38;
XQueryParser.RULE_exprSingle = 39;
XQueryParser.RULE_flworExpr = 40;
XQueryParser.RULE_initialClause = 41;
XQueryParser.RULE_intermediateClause = 42;
XQueryParser.RULE_forClause = 43;
XQueryParser.RULE_forBinding = 44;
XQueryParser.RULE_allowingEmpty = 45;
XQueryParser.RULE_positionalVar = 46;
XQueryParser.RULE_letClause = 47;
XQueryParser.RULE_letBinding = 48;
XQueryParser.RULE_windowClause = 49;
XQueryParser.RULE_tumblingWindowClause = 50;
XQueryParser.RULE_slidingWindowClause = 51;
XQueryParser.RULE_windowStartCondition = 52;
XQueryParser.RULE_windowEndCondition = 53;
XQueryParser.RULE_windowVars = 54;
XQueryParser.RULE_countClause = 55;
XQueryParser.RULE_whereClause = 56;
XQueryParser.RULE_groupByClause = 57;
XQueryParser.RULE_groupingSpecList = 58;
XQueryParser.RULE_groupingSpec = 59;
XQueryParser.RULE_orderByClause = 60;
XQueryParser.RULE_orderSpec = 61;
XQueryParser.RULE_returnClause = 62;
XQueryParser.RULE_quantifiedExpr = 63;
XQueryParser.RULE_quantifiedVar = 64;
XQueryParser.RULE_switchExpr = 65;
XQueryParser.RULE_switchCaseClause = 66;
XQueryParser.RULE_switchCaseOperand = 67;
XQueryParser.RULE_typeswitchExpr = 68;
XQueryParser.RULE_caseClause = 69;
XQueryParser.RULE_sequenceUnionType = 70;
XQueryParser.RULE_ifExpr = 71;
XQueryParser.RULE_tryCatchExpr = 72;
XQueryParser.RULE_tryClause = 73;
XQueryParser.RULE_enclosedTryTargetExpression = 74;
XQueryParser.RULE_catchClause = 75;
XQueryParser.RULE_enclosedExpression = 76;
XQueryParser.RULE_catchErrorList = 77;
XQueryParser.RULE_existUpdateExpr = 78;
XQueryParser.RULE_existReplaceExpr = 79;
XQueryParser.RULE_existValueExpr = 80;
XQueryParser.RULE_existInsertExpr = 81;
XQueryParser.RULE_existDeleteExpr = 82;
XQueryParser.RULE_existRenameExpr = 83;
XQueryParser.RULE_orExpr = 84;
XQueryParser.RULE_andExpr = 85;
XQueryParser.RULE_comparisonExpr = 86;
XQueryParser.RULE_stringConcatExpr = 87;
XQueryParser.RULE_rangeExpr = 88;
XQueryParser.RULE_additiveExpr = 89;
XQueryParser.RULE_multiplicativeExpr = 90;
XQueryParser.RULE_unionExpr = 91;
XQueryParser.RULE_intersectExceptExpr = 92;
XQueryParser.RULE_instanceOfExpr = 93;
XQueryParser.RULE_treatExpr = 94;
XQueryParser.RULE_castableExpr = 95;
XQueryParser.RULE_castExpr = 96;
XQueryParser.RULE_arrowExpr = 97;
XQueryParser.RULE_unaryExpression = 98;
XQueryParser.RULE_valueExpr = 99;
XQueryParser.RULE_generalComp = 100;
XQueryParser.RULE_valueComp = 101;
XQueryParser.RULE_nodeComp = 102;
XQueryParser.RULE_validateExpr = 103;
XQueryParser.RULE_validationMode = 104;
XQueryParser.RULE_extensionExpr = 105;
XQueryParser.RULE_simpleMapExpr = 106;
XQueryParser.RULE_pathExpr = 107;
XQueryParser.RULE_relativePathExpr = 108;
XQueryParser.RULE_descendantPath = 109;
XQueryParser.RULE_stepExpr = 110;
XQueryParser.RULE_axisStep = 111;
XQueryParser.RULE_forwardStep = 112;
XQueryParser.RULE_forwardAxis = 113;
XQueryParser.RULE_abbrevForwardStep = 114;
XQueryParser.RULE_reverseStep = 115;
XQueryParser.RULE_reverseAxis = 116;
XQueryParser.RULE_abbrevReverseStep = 117;
XQueryParser.RULE_nodeTest = 118;
XQueryParser.RULE_nameTest = 119;
XQueryParser.RULE_wildcard = 120;
XQueryParser.RULE_postfixExpr = 121;
XQueryParser.RULE_argumentList = 122;
XQueryParser.RULE_predicateList = 123;
XQueryParser.RULE_predicate = 124;
XQueryParser.RULE_lookup = 125;
XQueryParser.RULE_keySpecifier = 126;
XQueryParser.RULE_arrowFunctionSpecifier = 127;
XQueryParser.RULE_primaryExpr = 128;
XQueryParser.RULE_literal = 129;
XQueryParser.RULE_numericLiteral = 130;
XQueryParser.RULE_varRef = 131;
XQueryParser.RULE_varName = 132;
XQueryParser.RULE_parenthesizedExpr = 133;
XQueryParser.RULE_contextItemExpr = 134;
XQueryParser.RULE_orderedExpr = 135;
XQueryParser.RULE_unorderedExpr = 136;
XQueryParser.RULE_functionCall = 137;
XQueryParser.RULE_argument = 138;
XQueryParser.RULE_nodeConstructor = 139;
XQueryParser.RULE_directConstructor = 140;
XQueryParser.RULE_dirElemConstructorOpenClose = 141;
XQueryParser.RULE_dirElemConstructorSingleTag = 142;
XQueryParser.RULE_dirAttributeList = 143;
XQueryParser.RULE_dirAttributeValueApos = 144;
XQueryParser.RULE_dirAttributeValueQuot = 145;
XQueryParser.RULE_dirAttributeValue = 146;
XQueryParser.RULE_dirAttributeContentQuot = 147;
XQueryParser.RULE_dirAttributeContentApos = 148;
XQueryParser.RULE_dirElemContent = 149;
XQueryParser.RULE_commonContent = 150;
XQueryParser.RULE_computedConstructor = 151;
XQueryParser.RULE_compMLJSONConstructor = 152;
XQueryParser.RULE_compMLJSONArrayConstructor = 153;
XQueryParser.RULE_compMLJSONObjectConstructor = 154;
XQueryParser.RULE_compMLJSONNumberConstructor = 155;
XQueryParser.RULE_compMLJSONBooleanConstructor = 156;
XQueryParser.RULE_compMLJSONNullConstructor = 157;
XQueryParser.RULE_compBinaryConstructor = 158;
XQueryParser.RULE_compDocConstructor = 159;
XQueryParser.RULE_compElemConstructor = 160;
XQueryParser.RULE_enclosedContentExpr = 161;
XQueryParser.RULE_compAttrConstructor = 162;
XQueryParser.RULE_compNamespaceConstructor = 163;
XQueryParser.RULE_prefix = 164;
XQueryParser.RULE_enclosedPrefixExpr = 165;
XQueryParser.RULE_enclosedURIExpr = 166;
XQueryParser.RULE_compTextConstructor = 167;
XQueryParser.RULE_compCommentConstructor = 168;
XQueryParser.RULE_compPIConstructor = 169;
XQueryParser.RULE_functionItemExpr = 170;
XQueryParser.RULE_namedFunctionRef = 171;
XQueryParser.RULE_inlineFunctionRef = 172;
XQueryParser.RULE_functionBody = 173;
XQueryParser.RULE_mapConstructor = 174;
XQueryParser.RULE_mapConstructorEntry = 175;
XQueryParser.RULE_arrayConstructor = 176;
XQueryParser.RULE_squareArrayConstructor = 177;
XQueryParser.RULE_curlyArrayConstructor = 178;
XQueryParser.RULE_stringConstructor = 179;
XQueryParser.RULE_stringConstructorContent = 180;
XQueryParser.RULE_charNoGrave = 181;
XQueryParser.RULE_charNoLBrace = 182;
XQueryParser.RULE_charNoRBrack = 183;
XQueryParser.RULE_stringConstructorChars = 184;
XQueryParser.RULE_stringConstructorInterpolation = 185;
XQueryParser.RULE_unaryLookup = 186;
XQueryParser.RULE_singleType = 187;
XQueryParser.RULE_typeDeclaration = 188;
XQueryParser.RULE_sequenceType = 189;
XQueryParser.RULE_itemType = 190;
XQueryParser.RULE_atomicOrUnionType = 191;
XQueryParser.RULE_kindTest = 192;
XQueryParser.RULE_anyKindTest = 193;
XQueryParser.RULE_binaryNodeTest = 194;
XQueryParser.RULE_documentTest = 195;
XQueryParser.RULE_textTest = 196;
XQueryParser.RULE_commentTest = 197;
XQueryParser.RULE_namespaceNodeTest = 198;
XQueryParser.RULE_piTest = 199;
XQueryParser.RULE_attributeTest = 200;
XQueryParser.RULE_attributeNameOrWildcard = 201;
XQueryParser.RULE_schemaAttributeTest = 202;
XQueryParser.RULE_elementTest = 203;
XQueryParser.RULE_elementNameOrWildcard = 204;
XQueryParser.RULE_schemaElementTest = 205;
XQueryParser.RULE_elementDeclaration = 206;
XQueryParser.RULE_attributeName = 207;
XQueryParser.RULE_elementName = 208;
XQueryParser.RULE_simpleTypeName = 209;
XQueryParser.RULE_typeName = 210;
XQueryParser.RULE_functionTest = 211;
XQueryParser.RULE_anyFunctionTest = 212;
XQueryParser.RULE_typedFunctionTest = 213;
XQueryParser.RULE_mapTest = 214;
XQueryParser.RULE_anyMapTest = 215;
XQueryParser.RULE_typedMapTest = 216;
XQueryParser.RULE_arrayTest = 217;
XQueryParser.RULE_anyArrayTest = 218;
XQueryParser.RULE_typedArrayTest = 219;
XQueryParser.RULE_parenthesizedItemTest = 220;
XQueryParser.RULE_attributeDeclaration = 221;
XQueryParser.RULE_mlNodeTest = 222;
XQueryParser.RULE_mlArrayNodeTest = 223;
XQueryParser.RULE_mlObjectNodeTest = 224;
XQueryParser.RULE_mlNumberNodeTest = 225;
XQueryParser.RULE_mlBooleanNodeTest = 226;
XQueryParser.RULE_mlNullNodeTest = 227;
XQueryParser.RULE_eqName = 228;
XQueryParser.RULE_qName = 229;
XQueryParser.RULE_ncName = 230;
XQueryParser.RULE_functionName = 231;
XQueryParser.RULE_keyword = 232;
XQueryParser.RULE_keywordNotOKForFunction = 233;
XQueryParser.RULE_keywordOKForFunction = 234;
XQueryParser.RULE_uriLiteral = 235;
XQueryParser.RULE_stringLiteralQuot = 236;
XQueryParser.RULE_stringLiteralApos = 237;
XQueryParser.RULE_stringLiteral = 238;
XQueryParser.RULE_stringContentQuot = 239;
XQueryParser.RULE_stringContentApos = 240;
XQueryParser.RULE_noQuotesNoBracesNoAmpNoLAng = 241;

class ModuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_module;
    }

	libraryModule() {
	    return this.getTypedRuleContext(LibraryModuleContext,0);
	};

	xqDocComment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(XqDocCommentContext);
	    } else {
	        return this.getTypedRuleContext(XqDocCommentContext,i);
	    }
	};

	versionDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VersionDeclContext);
	    } else {
	        return this.getTypedRuleContext(VersionDeclContext,i);
	    }
	};

	mainModule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MainModuleContext);
	    } else {
	        return this.getTypedRuleContext(MainModuleContext,i);
	    }
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.SEMICOLON);
	    } else {
	        return this.getToken(XQueryParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterModule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitModule(this);
		}
	}


}



class XqDocCommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_xqDocComment;
    }

	XQDocComment() {
	    return this.getToken(XQueryParser.XQDocComment, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterXqDocComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitXqDocComment(this);
		}
	}


}



class VersionDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_versionDecl;
        this.version = null;
        this.encoding = null;
    }

	KW_XQUERY() {
	    return this.getToken(XQueryParser.KW_XQUERY, 0);
	};

	KW_VERSION() {
	    return this.getToken(XQueryParser.KW_VERSION, 0);
	};

	SEMICOLON() {
	    return this.getToken(XQueryParser.SEMICOLON, 0);
	};

	stringLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringLiteralContext);
	    } else {
	        return this.getTypedRuleContext(StringLiteralContext,i);
	    }
	};

	KW_ENCODING() {
	    return this.getToken(XQueryParser.KW_ENCODING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterVersionDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitVersionDecl(this);
		}
	}


}



class MainModuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_mainModule;
    }

	prolog() {
	    return this.getTypedRuleContext(PrologContext,0);
	};

	queryBody() {
	    return this.getTypedRuleContext(QueryBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterMainModule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitMainModule(this);
		}
	}


}



class QueryBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_queryBody;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterQueryBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitQueryBody(this);
		}
	}


}



class LibraryModuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_libraryModule;
    }

	moduleDecl() {
	    return this.getTypedRuleContext(ModuleDeclContext,0);
	};

	prolog() {
	    return this.getTypedRuleContext(PrologContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterLibraryModule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitLibraryModule(this);
		}
	}


}



class ModuleDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_moduleDecl;
        this.uri = null;
    }

	KW_MODULE() {
	    return this.getToken(XQueryParser.KW_MODULE, 0);
	};

	KW_NAMESPACE() {
	    return this.getToken(XQueryParser.KW_NAMESPACE, 0);
	};

	ncName() {
	    return this.getTypedRuleContext(NcNameContext,0);
	};

	EQUAL() {
	    return this.getToken(XQueryParser.EQUAL, 0);
	};

	SEMICOLON() {
	    return this.getToken(XQueryParser.SEMICOLON, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterModuleDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitModuleDecl(this);
		}
	}


}



class PrologContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_prolog;
    }

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.SEMICOLON);
	    } else {
	        return this.getToken(XQueryParser.SEMICOLON, i);
	    }
	};


	defaultNamespaceDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefaultNamespaceDeclContext);
	    } else {
	        return this.getTypedRuleContext(DefaultNamespaceDeclContext,i);
	    }
	};

	setter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetterContext);
	    } else {
	        return this.getTypedRuleContext(SetterContext,i);
	    }
	};

	namespaceDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamespaceDeclContext);
	    } else {
	        return this.getTypedRuleContext(NamespaceDeclContext,i);
	    }
	};

	schemaImport = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SchemaImportContext);
	    } else {
	        return this.getTypedRuleContext(SchemaImportContext,i);
	    }
	};

	moduleImport = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleImportContext);
	    } else {
	        return this.getTypedRuleContext(ModuleImportContext,i);
	    }
	};

	varDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VarDeclContext);
	    } else {
	        return this.getTypedRuleContext(VarDeclContext,i);
	    }
	};

	functionDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionDeclContext);
	    } else {
	        return this.getTypedRuleContext(FunctionDeclContext,i);
	    }
	};

	contextItemDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ContextItemDeclContext);
	    } else {
	        return this.getTypedRuleContext(ContextItemDeclContext,i);
	    }
	};

	optionDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OptionDeclContext);
	    } else {
	        return this.getTypedRuleContext(OptionDeclContext,i);
	    }
	};

	xqDocComment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(XqDocCommentContext);
	    } else {
	        return this.getTypedRuleContext(XqDocCommentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterProlog(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitProlog(this);
		}
	}


}



class DefaultNamespaceDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_defaultNamespaceDecl;
        this.type = null;
        this.uri = null;
    }

	KW_DECLARE() {
	    return this.getToken(XQueryParser.KW_DECLARE, 0);
	};

	KW_DEFAULT() {
	    return this.getToken(XQueryParser.KW_DEFAULT, 0);
	};

	KW_NAMESPACE() {
	    return this.getToken(XQueryParser.KW_NAMESPACE, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	KW_ELEMENT() {
	    return this.getToken(XQueryParser.KW_ELEMENT, 0);
	};

	KW_FUNCTION() {
	    return this.getToken(XQueryParser.KW_FUNCTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterDefaultNamespaceDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitDefaultNamespaceDecl(this);
		}
	}


}



class SetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_setter;
    }

	boundarySpaceDecl() {
	    return this.getTypedRuleContext(BoundarySpaceDeclContext,0);
	};

	defaultCollationDecl() {
	    return this.getTypedRuleContext(DefaultCollationDeclContext,0);
	};

	baseURIDecl() {
	    return this.getTypedRuleContext(BaseURIDeclContext,0);
	};

	constructionDecl() {
	    return this.getTypedRuleContext(ConstructionDeclContext,0);
	};

	orderingModeDecl() {
	    return this.getTypedRuleContext(OrderingModeDeclContext,0);
	};

	emptyOrderDecl() {
	    return this.getTypedRuleContext(EmptyOrderDeclContext,0);
	};

	copyNamespacesDecl() {
	    return this.getTypedRuleContext(CopyNamespacesDeclContext,0);
	};

	decimalFormatDecl() {
	    return this.getTypedRuleContext(DecimalFormatDeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterSetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitSetter(this);
		}
	}


}



class BoundarySpaceDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_boundarySpaceDecl;
        this.type = null;
    }

	KW_DECLARE() {
	    return this.getToken(XQueryParser.KW_DECLARE, 0);
	};

	KW_BOUNDARY_SPACE() {
	    return this.getToken(XQueryParser.KW_BOUNDARY_SPACE, 0);
	};

	KW_PRESERVE() {
	    return this.getToken(XQueryParser.KW_PRESERVE, 0);
	};

	KW_STRIP() {
	    return this.getToken(XQueryParser.KW_STRIP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterBoundarySpaceDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitBoundarySpaceDecl(this);
		}
	}


}



class DefaultCollationDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_defaultCollationDecl;
    }

	KW_DECLARE() {
	    return this.getToken(XQueryParser.KW_DECLARE, 0);
	};

	KW_DEFAULT() {
	    return this.getToken(XQueryParser.KW_DEFAULT, 0);
	};

	KW_COLLATION() {
	    return this.getToken(XQueryParser.KW_COLLATION, 0);
	};

	uriLiteral() {
	    return this.getTypedRuleContext(UriLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterDefaultCollationDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitDefaultCollationDecl(this);
		}
	}


}



class BaseURIDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_baseURIDecl;
    }

	KW_DECLARE() {
	    return this.getToken(XQueryParser.KW_DECLARE, 0);
	};

	KW_BASE_URI() {
	    return this.getToken(XQueryParser.KW_BASE_URI, 0);
	};

	uriLiteral() {
	    return this.getTypedRuleContext(UriLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterBaseURIDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitBaseURIDecl(this);
		}
	}


}



class ConstructionDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_constructionDecl;
        this.type = null;
    }

	KW_DECLARE() {
	    return this.getToken(XQueryParser.KW_DECLARE, 0);
	};

	KW_CONSTRUCTION() {
	    return this.getToken(XQueryParser.KW_CONSTRUCTION, 0);
	};

	KW_STRIP() {
	    return this.getToken(XQueryParser.KW_STRIP, 0);
	};

	KW_PRESERVE() {
	    return this.getToken(XQueryParser.KW_PRESERVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterConstructionDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitConstructionDecl(this);
		}
	}


}



class OrderingModeDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_orderingModeDecl;
        this.type = null;
    }

	KW_DECLARE() {
	    return this.getToken(XQueryParser.KW_DECLARE, 0);
	};

	KW_ORDERING() {
	    return this.getToken(XQueryParser.KW_ORDERING, 0);
	};

	KW_ORDERED() {
	    return this.getToken(XQueryParser.KW_ORDERED, 0);
	};

	KW_UNORDERED() {
	    return this.getToken(XQueryParser.KW_UNORDERED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterOrderingModeDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitOrderingModeDecl(this);
		}
	}


}



class EmptyOrderDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_emptyOrderDecl;
        this.type = null;
    }

	KW_DECLARE() {
	    return this.getToken(XQueryParser.KW_DECLARE, 0);
	};

	KW_DEFAULT() {
	    return this.getToken(XQueryParser.KW_DEFAULT, 0);
	};

	KW_ORDER() {
	    return this.getToken(XQueryParser.KW_ORDER, 0);
	};

	KW_EMPTY() {
	    return this.getToken(XQueryParser.KW_EMPTY, 0);
	};

	KW_GREATEST() {
	    return this.getToken(XQueryParser.KW_GREATEST, 0);
	};

	KW_LEAST() {
	    return this.getToken(XQueryParser.KW_LEAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterEmptyOrderDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitEmptyOrderDecl(this);
		}
	}


}



class CopyNamespacesDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_copyNamespacesDecl;
    }

	KW_DECLARE() {
	    return this.getToken(XQueryParser.KW_DECLARE, 0);
	};

	KW_COPY_NS() {
	    return this.getToken(XQueryParser.KW_COPY_NS, 0);
	};

	preserveMode() {
	    return this.getTypedRuleContext(PreserveModeContext,0);
	};

	COMMA() {
	    return this.getToken(XQueryParser.COMMA, 0);
	};

	inheritMode() {
	    return this.getTypedRuleContext(InheritModeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCopyNamespacesDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCopyNamespacesDecl(this);
		}
	}


}



class PreserveModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_preserveMode;
    }

	KW_PRESERVE() {
	    return this.getToken(XQueryParser.KW_PRESERVE, 0);
	};

	KW_NO_PRESERVE() {
	    return this.getToken(XQueryParser.KW_NO_PRESERVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterPreserveMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitPreserveMode(this);
		}
	}


}



class InheritModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_inheritMode;
    }

	KW_INHERIT() {
	    return this.getToken(XQueryParser.KW_INHERIT, 0);
	};

	KW_NO_INHERIT() {
	    return this.getToken(XQueryParser.KW_NO_INHERIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterInheritMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitInheritMode(this);
		}
	}


}



class DecimalFormatDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_decimalFormatDecl;
    }

	KW_DECLARE() {
	    return this.getToken(XQueryParser.KW_DECLARE, 0);
	};

	DFPropertyName = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.DFPropertyName);
	    } else {
	        return this.getToken(XQueryParser.DFPropertyName, i);
	    }
	};


	EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.EQUAL);
	    } else {
	        return this.getToken(XQueryParser.EQUAL, i);
	    }
	};


	stringLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringLiteralContext);
	    } else {
	        return this.getTypedRuleContext(StringLiteralContext,i);
	    }
	};

	KW_DECIMAL_FORMAT() {
	    return this.getToken(XQueryParser.KW_DECIMAL_FORMAT, 0);
	};

	eqName() {
	    return this.getTypedRuleContext(EqNameContext,0);
	};

	KW_DEFAULT() {
	    return this.getToken(XQueryParser.KW_DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterDecimalFormatDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitDecimalFormatDecl(this);
		}
	}


}



class SchemaImportContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_schemaImport;
        this.nsURI = null;
        this._uriLiteral = null;
        this.locations = [];
    }

	KW_IMPORT() {
	    return this.getToken(XQueryParser.KW_IMPORT, 0);
	};

	KW_SCHEMA() {
	    return this.getToken(XQueryParser.KW_SCHEMA, 0);
	};

	uriLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UriLiteralContext);
	    } else {
	        return this.getTypedRuleContext(UriLiteralContext,i);
	    }
	};

	schemaPrefix() {
	    return this.getTypedRuleContext(SchemaPrefixContext,0);
	};

	KW_AT() {
	    return this.getToken(XQueryParser.KW_AT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COMMA);
	    } else {
	        return this.getToken(XQueryParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterSchemaImport(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitSchemaImport(this);
		}
	}


}



class SchemaPrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_schemaPrefix;
    }

	KW_NAMESPACE() {
	    return this.getToken(XQueryParser.KW_NAMESPACE, 0);
	};

	ncName() {
	    return this.getTypedRuleContext(NcNameContext,0);
	};

	EQUAL() {
	    return this.getToken(XQueryParser.EQUAL, 0);
	};

	KW_DEFAULT() {
	    return this.getToken(XQueryParser.KW_DEFAULT, 0);
	};

	KW_ELEMENT() {
	    return this.getToken(XQueryParser.KW_ELEMENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterSchemaPrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitSchemaPrefix(this);
		}
	}


}



class ModuleImportContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_moduleImport;
        this.nsURI = null;
        this._uriLiteral = null;
        this.locations = [];
    }

	KW_IMPORT() {
	    return this.getToken(XQueryParser.KW_IMPORT, 0);
	};

	KW_MODULE() {
	    return this.getToken(XQueryParser.KW_MODULE, 0);
	};

	uriLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UriLiteralContext);
	    } else {
	        return this.getTypedRuleContext(UriLiteralContext,i);
	    }
	};

	KW_NAMESPACE() {
	    return this.getToken(XQueryParser.KW_NAMESPACE, 0);
	};

	ncName() {
	    return this.getTypedRuleContext(NcNameContext,0);
	};

	EQUAL() {
	    return this.getToken(XQueryParser.EQUAL, 0);
	};

	KW_AT() {
	    return this.getToken(XQueryParser.KW_AT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COMMA);
	    } else {
	        return this.getToken(XQueryParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterModuleImport(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitModuleImport(this);
		}
	}


}



class NamespaceDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_namespaceDecl;
    }

	KW_DECLARE() {
	    return this.getToken(XQueryParser.KW_DECLARE, 0);
	};

	KW_NAMESPACE() {
	    return this.getToken(XQueryParser.KW_NAMESPACE, 0);
	};

	ncName() {
	    return this.getTypedRuleContext(NcNameContext,0);
	};

	EQUAL() {
	    return this.getToken(XQueryParser.EQUAL, 0);
	};

	uriLiteral() {
	    return this.getTypedRuleContext(UriLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterNamespaceDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitNamespaceDecl(this);
		}
	}


}



class VarDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_varDecl;
    }

	KW_DECLARE() {
	    return this.getToken(XQueryParser.KW_DECLARE, 0);
	};

	KW_VARIABLE() {
	    return this.getToken(XQueryParser.KW_VARIABLE, 0);
	};

	DOLLAR() {
	    return this.getToken(XQueryParser.DOLLAR, 0);
	};

	varName() {
	    return this.getTypedRuleContext(VarNameContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	ncName() {
	    return this.getTypedRuleContext(NcNameContext,0);
	};

	typeDeclaration() {
	    return this.getTypedRuleContext(TypeDeclarationContext,0);
	};

	COLON_EQ() {
	    return this.getToken(XQueryParser.COLON_EQ, 0);
	};

	varValue() {
	    return this.getTypedRuleContext(VarValueContext,0);
	};

	KW_EXTERNAL() {
	    return this.getToken(XQueryParser.KW_EXTERNAL, 0);
	};

	LBRACE() {
	    return this.getToken(XQueryParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(XQueryParser.RBRACE, 0);
	};

	varDefaultValue() {
	    return this.getTypedRuleContext(VarDefaultValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterVarDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitVarDecl(this);
		}
	}


}



class VarValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_varValue;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterVarValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitVarValue(this);
		}
	}


}



class VarDefaultValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_varDefaultValue;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterVarDefaultValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitVarDefaultValue(this);
		}
	}


}



class ContextItemDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_contextItemDecl;
        this.value = null;
        this.defaultValue = null;
    }

	KW_DECLARE() {
	    return this.getToken(XQueryParser.KW_DECLARE, 0);
	};

	KW_CONTEXT() {
	    return this.getToken(XQueryParser.KW_CONTEXT, 0);
	};

	KW_ITEM() {
	    return this.getToken(XQueryParser.KW_ITEM, 0);
	};

	KW_AS() {
	    return this.getToken(XQueryParser.KW_AS, 0);
	};

	itemType() {
	    return this.getTypedRuleContext(ItemTypeContext,0);
	};

	COLON_EQ() {
	    return this.getToken(XQueryParser.COLON_EQ, 0);
	};

	KW_EXTERNAL() {
	    return this.getToken(XQueryParser.KW_EXTERNAL, 0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterContextItemDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitContextItemDecl(this);
		}
	}


}



class FunctionDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_functionDecl;
        this.name = null;
    }

	KW_DECLARE() {
	    return this.getToken(XQueryParser.KW_DECLARE, 0);
	};

	KW_FUNCTION() {
	    return this.getToken(XQueryParser.KW_FUNCTION, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	eqName() {
	    return this.getTypedRuleContext(EqNameContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	ncName() {
	    return this.getTypedRuleContext(NcNameContext,0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	KW_EXTERNAL() {
	    return this.getToken(XQueryParser.KW_EXTERNAL, 0);
	};

	functionParams() {
	    return this.getTypedRuleContext(FunctionParamsContext,0);
	};

	functionReturn() {
	    return this.getTypedRuleContext(FunctionReturnContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterFunctionDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitFunctionDecl(this);
		}
	}


}



class FunctionParamsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_functionParams;
    }

	functionParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionParamContext);
	    } else {
	        return this.getTypedRuleContext(FunctionParamContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COMMA);
	    } else {
	        return this.getToken(XQueryParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterFunctionParams(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitFunctionParams(this);
		}
	}


}



class FunctionParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_functionParam;
        this.name = null;
        this.type = null;
    }

	DOLLAR() {
	    return this.getToken(XQueryParser.DOLLAR, 0);
	};

	qName() {
	    return this.getTypedRuleContext(QNameContext,0);
	};

	typeDeclaration() {
	    return this.getTypedRuleContext(TypeDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterFunctionParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitFunctionParam(this);
		}
	}


}



class AnnotationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_annotations;
    }

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAnnotations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAnnotations(this);
		}
	}


}



class AnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_annotation;
    }

	MOD() {
	    return this.getToken(XQueryParser.MOD, 0);
	};

	qName() {
	    return this.getTypedRuleContext(QNameContext,0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	annotList() {
	    return this.getTypedRuleContext(AnnotListContext,0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAnnotation(this);
		}
	}


}



class AnnotListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_annotList;
    }

	annotationParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationParamContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationParamContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COMMA);
	    } else {
	        return this.getToken(XQueryParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAnnotList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAnnotList(this);
		}
	}


}



class AnnotationParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_annotationParam;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAnnotationParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAnnotationParam(this);
		}
	}


}



class FunctionReturnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_functionReturn;
    }

	KW_AS() {
	    return this.getToken(XQueryParser.KW_AS, 0);
	};

	sequenceType() {
	    return this.getTypedRuleContext(SequenceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterFunctionReturn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitFunctionReturn(this);
		}
	}


}



class OptionDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_optionDecl;
        this.name = null;
        this.value = null;
    }

	KW_DECLARE() {
	    return this.getToken(XQueryParser.KW_DECLARE, 0);
	};

	KW_OPTION() {
	    return this.getToken(XQueryParser.KW_OPTION, 0);
	};

	mappingDecl() {
	    return this.getTypedRuleContext(MappingDeclContext,0);
	};

	qName() {
	    return this.getTypedRuleContext(QNameContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterOptionDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitOptionDecl(this);
		}
	}


}



class MappingDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_mappingDecl;
    }

	XDMP_MAPPING_FALSE() {
	    return this.getToken(XQueryParser.XDMP_MAPPING_FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterMappingDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitMappingDecl(this);
		}
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_expr;
    }

	exprSingle = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprSingleContext);
	    } else {
	        return this.getTypedRuleContext(ExprSingleContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COMMA);
	    } else {
	        return this.getToken(XQueryParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitExpr(this);
		}
	}


}



class ExprSingleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_exprSingle;
    }

	flworExpr() {
	    return this.getTypedRuleContext(FlworExprContext,0);
	};

	quantifiedExpr() {
	    return this.getTypedRuleContext(QuantifiedExprContext,0);
	};

	switchExpr() {
	    return this.getTypedRuleContext(SwitchExprContext,0);
	};

	typeswitchExpr() {
	    return this.getTypedRuleContext(TypeswitchExprContext,0);
	};

	existUpdateExpr() {
	    return this.getTypedRuleContext(ExistUpdateExprContext,0);
	};

	ifExpr() {
	    return this.getTypedRuleContext(IfExprContext,0);
	};

	tryCatchExpr() {
	    return this.getTypedRuleContext(TryCatchExprContext,0);
	};

	orExpr() {
	    return this.getTypedRuleContext(OrExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterExprSingle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitExprSingle(this);
		}
	}


}



class FlworExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_flworExpr;
    }

	initialClause() {
	    return this.getTypedRuleContext(InitialClauseContext,0);
	};

	returnClause() {
	    return this.getTypedRuleContext(ReturnClauseContext,0);
	};

	intermediateClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntermediateClauseContext);
	    } else {
	        return this.getTypedRuleContext(IntermediateClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterFlworExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitFlworExpr(this);
		}
	}


}



class InitialClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_initialClause;
    }

	forClause() {
	    return this.getTypedRuleContext(ForClauseContext,0);
	};

	letClause() {
	    return this.getTypedRuleContext(LetClauseContext,0);
	};

	windowClause() {
	    return this.getTypedRuleContext(WindowClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterInitialClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitInitialClause(this);
		}
	}


}



class IntermediateClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_intermediateClause;
    }

	initialClause() {
	    return this.getTypedRuleContext(InitialClauseContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	countClause() {
	    return this.getTypedRuleContext(CountClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterIntermediateClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitIntermediateClause(this);
		}
	}


}



class ForClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_forClause;
        this._forBinding = null;
        this.vars = [];
    }

	KW_FOR() {
	    return this.getToken(XQueryParser.KW_FOR, 0);
	};

	forBinding = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ForBindingContext);
	    } else {
	        return this.getTypedRuleContext(ForBindingContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COMMA);
	    } else {
	        return this.getToken(XQueryParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterForClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitForClause(this);
		}
	}


}



class ForBindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_forBinding;
        this.name = null;
        this.type = null;
        this.in_ = null;
    }

	DOLLAR() {
	    return this.getToken(XQueryParser.DOLLAR, 0);
	};

	KW_IN() {
	    return this.getToken(XQueryParser.KW_IN, 0);
	};

	varName() {
	    return this.getTypedRuleContext(VarNameContext,0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	allowingEmpty() {
	    return this.getTypedRuleContext(AllowingEmptyContext,0);
	};

	positionalVar() {
	    return this.getTypedRuleContext(PositionalVarContext,0);
	};

	typeDeclaration() {
	    return this.getTypedRuleContext(TypeDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterForBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitForBinding(this);
		}
	}


}



class AllowingEmptyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_allowingEmpty;
    }

	KW_ALLOWING() {
	    return this.getToken(XQueryParser.KW_ALLOWING, 0);
	};

	KW_EMPTY() {
	    return this.getToken(XQueryParser.KW_EMPTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAllowingEmpty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAllowingEmpty(this);
		}
	}


}



class PositionalVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_positionalVar;
        this.pvar = null;
    }

	KW_AT() {
	    return this.getToken(XQueryParser.KW_AT, 0);
	};

	DOLLAR() {
	    return this.getToken(XQueryParser.DOLLAR, 0);
	};

	varName() {
	    return this.getTypedRuleContext(VarNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterPositionalVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitPositionalVar(this);
		}
	}


}



class LetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_letClause;
        this._letBinding = null;
        this.vars = [];
    }

	KW_LET() {
	    return this.getToken(XQueryParser.KW_LET, 0);
	};

	letBinding = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LetBindingContext);
	    } else {
	        return this.getTypedRuleContext(LetBindingContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COMMA);
	    } else {
	        return this.getToken(XQueryParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterLetClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitLetClause(this);
		}
	}


}



class LetBindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_letBinding;
    }

	DOLLAR() {
	    return this.getToken(XQueryParser.DOLLAR, 0);
	};

	varName() {
	    return this.getTypedRuleContext(VarNameContext,0);
	};

	COLON_EQ() {
	    return this.getToken(XQueryParser.COLON_EQ, 0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	typeDeclaration() {
	    return this.getTypedRuleContext(TypeDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterLetBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitLetBinding(this);
		}
	}


}



class WindowClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_windowClause;
    }

	KW_FOR() {
	    return this.getToken(XQueryParser.KW_FOR, 0);
	};

	tumblingWindowClause() {
	    return this.getTypedRuleContext(TumblingWindowClauseContext,0);
	};

	slidingWindowClause() {
	    return this.getTypedRuleContext(SlidingWindowClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterWindowClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitWindowClause(this);
		}
	}


}



class TumblingWindowClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_tumblingWindowClause;
        this.name = null;
        this.type = null;
    }

	KW_TUMBLING() {
	    return this.getToken(XQueryParser.KW_TUMBLING, 0);
	};

	KW_WINDOW() {
	    return this.getToken(XQueryParser.KW_WINDOW, 0);
	};

	DOLLAR() {
	    return this.getToken(XQueryParser.DOLLAR, 0);
	};

	KW_IN() {
	    return this.getToken(XQueryParser.KW_IN, 0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	windowStartCondition() {
	    return this.getTypedRuleContext(WindowStartConditionContext,0);
	};

	qName() {
	    return this.getTypedRuleContext(QNameContext,0);
	};

	windowEndCondition() {
	    return this.getTypedRuleContext(WindowEndConditionContext,0);
	};

	typeDeclaration() {
	    return this.getTypedRuleContext(TypeDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterTumblingWindowClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitTumblingWindowClause(this);
		}
	}


}



class SlidingWindowClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_slidingWindowClause;
        this.name = null;
        this.type = null;
    }

	KW_SLIDING() {
	    return this.getToken(XQueryParser.KW_SLIDING, 0);
	};

	KW_WINDOW() {
	    return this.getToken(XQueryParser.KW_WINDOW, 0);
	};

	DOLLAR() {
	    return this.getToken(XQueryParser.DOLLAR, 0);
	};

	KW_IN() {
	    return this.getToken(XQueryParser.KW_IN, 0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	windowStartCondition() {
	    return this.getTypedRuleContext(WindowStartConditionContext,0);
	};

	windowEndCondition() {
	    return this.getTypedRuleContext(WindowEndConditionContext,0);
	};

	qName() {
	    return this.getTypedRuleContext(QNameContext,0);
	};

	typeDeclaration() {
	    return this.getTypedRuleContext(TypeDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterSlidingWindowClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitSlidingWindowClause(this);
		}
	}


}



class WindowStartConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_windowStartCondition;
    }

	KW_START() {
	    return this.getToken(XQueryParser.KW_START, 0);
	};

	windowVars() {
	    return this.getTypedRuleContext(WindowVarsContext,0);
	};

	KW_WHEN() {
	    return this.getToken(XQueryParser.KW_WHEN, 0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterWindowStartCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitWindowStartCondition(this);
		}
	}


}



class WindowEndConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_windowEndCondition;
    }

	KW_END() {
	    return this.getToken(XQueryParser.KW_END, 0);
	};

	windowVars() {
	    return this.getTypedRuleContext(WindowVarsContext,0);
	};

	KW_WHEN() {
	    return this.getToken(XQueryParser.KW_WHEN, 0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	KW_ONLY() {
	    return this.getToken(XQueryParser.KW_ONLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterWindowEndCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitWindowEndCondition(this);
		}
	}


}



class WindowVarsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_windowVars;
        this.currentItem = null;
        this.previousItem = null;
        this.nextItem = null;
    }

	DOLLAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.DOLLAR);
	    } else {
	        return this.getToken(XQueryParser.DOLLAR, i);
	    }
	};


	positionalVar() {
	    return this.getTypedRuleContext(PositionalVarContext,0);
	};

	KW_PREVIOUS() {
	    return this.getToken(XQueryParser.KW_PREVIOUS, 0);
	};

	KW_NEXT() {
	    return this.getToken(XQueryParser.KW_NEXT, 0);
	};

	eqName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EqNameContext);
	    } else {
	        return this.getTypedRuleContext(EqNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterWindowVars(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitWindowVars(this);
		}
	}


}



class CountClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_countClause;
    }

	KW_COUNT() {
	    return this.getToken(XQueryParser.KW_COUNT, 0);
	};

	DOLLAR() {
	    return this.getToken(XQueryParser.DOLLAR, 0);
	};

	varName() {
	    return this.getTypedRuleContext(VarNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCountClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCountClause(this);
		}
	}


}



class WhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_whereClause;
        this.whereExpr = null;
    }

	KW_WHERE() {
	    return this.getToken(XQueryParser.KW_WHERE, 0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitWhereClause(this);
		}
	}


}



class GroupByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_groupByClause;
    }

	KW_GROUP() {
	    return this.getToken(XQueryParser.KW_GROUP, 0);
	};

	KW_BY() {
	    return this.getToken(XQueryParser.KW_BY, 0);
	};

	groupingSpecList() {
	    return this.getTypedRuleContext(GroupingSpecListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterGroupByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitGroupByClause(this);
		}
	}


}



class GroupingSpecListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_groupingSpecList;
    }

	groupingSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupingSpecContext);
	    } else {
	        return this.getTypedRuleContext(GroupingSpecContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COMMA);
	    } else {
	        return this.getToken(XQueryParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterGroupingSpecList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitGroupingSpecList(this);
		}
	}


}



class GroupingSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_groupingSpec;
        this.name = null;
        this.type = null;
        this.uri = null;
    }

	DOLLAR() {
	    return this.getToken(XQueryParser.DOLLAR, 0);
	};

	varName() {
	    return this.getTypedRuleContext(VarNameContext,0);
	};

	COLON_EQ() {
	    return this.getToken(XQueryParser.COLON_EQ, 0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	KW_COLLATION() {
	    return this.getToken(XQueryParser.KW_COLLATION, 0);
	};

	uriLiteral() {
	    return this.getTypedRuleContext(UriLiteralContext,0);
	};

	typeDeclaration() {
	    return this.getTypedRuleContext(TypeDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterGroupingSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitGroupingSpec(this);
		}
	}


}



class OrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_orderByClause;
        this._orderSpec = null;
        this.specs = [];
    }

	KW_ORDER() {
	    return this.getToken(XQueryParser.KW_ORDER, 0);
	};

	KW_BY() {
	    return this.getToken(XQueryParser.KW_BY, 0);
	};

	orderSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderSpecContext);
	    } else {
	        return this.getTypedRuleContext(OrderSpecContext,i);
	    }
	};

	KW_STABLE() {
	    return this.getToken(XQueryParser.KW_STABLE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COMMA);
	    } else {
	        return this.getToken(XQueryParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterOrderByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitOrderByClause(this);
		}
	}


}



class OrderSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_orderSpec;
        this.value = null;
        this.order = null;
        this.empty = null;
        this.collation = null;
    }

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	KW_EMPTY() {
	    return this.getToken(XQueryParser.KW_EMPTY, 0);
	};

	KW_COLLATION() {
	    return this.getToken(XQueryParser.KW_COLLATION, 0);
	};

	uriLiteral() {
	    return this.getTypedRuleContext(UriLiteralContext,0);
	};

	KW_ASCENDING() {
	    return this.getToken(XQueryParser.KW_ASCENDING, 0);
	};

	KW_DESCENDING() {
	    return this.getToken(XQueryParser.KW_DESCENDING, 0);
	};

	KW_GREATEST() {
	    return this.getToken(XQueryParser.KW_GREATEST, 0);
	};

	KW_LEAST() {
	    return this.getToken(XQueryParser.KW_LEAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterOrderSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitOrderSpec(this);
		}
	}


}



class ReturnClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_returnClause;
    }

	KW_RETURN() {
	    return this.getToken(XQueryParser.KW_RETURN, 0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterReturnClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitReturnClause(this);
		}
	}


}



class QuantifiedExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_quantifiedExpr;
        this.quantifier = null;
        this.value = null;
    }

	quantifiedVar = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QuantifiedVarContext);
	    } else {
	        return this.getTypedRuleContext(QuantifiedVarContext,i);
	    }
	};

	KW_SATISFIES() {
	    return this.getToken(XQueryParser.KW_SATISFIES, 0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	KW_SOME() {
	    return this.getToken(XQueryParser.KW_SOME, 0);
	};

	KW_EVERY() {
	    return this.getToken(XQueryParser.KW_EVERY, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COMMA);
	    } else {
	        return this.getToken(XQueryParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterQuantifiedExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitQuantifiedExpr(this);
		}
	}


}



class QuantifiedVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_quantifiedVar;
    }

	DOLLAR() {
	    return this.getToken(XQueryParser.DOLLAR, 0);
	};

	varName() {
	    return this.getTypedRuleContext(VarNameContext,0);
	};

	KW_IN() {
	    return this.getToken(XQueryParser.KW_IN, 0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	typeDeclaration() {
	    return this.getTypedRuleContext(TypeDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterQuantifiedVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitQuantifiedVar(this);
		}
	}


}



class SwitchExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_switchExpr;
        this.returnExpr = null;
    }

	KW_SWITCH() {
	    return this.getToken(XQueryParser.KW_SWITCH, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	KW_DEFAULT() {
	    return this.getToken(XQueryParser.KW_DEFAULT, 0);
	};

	KW_RETURN() {
	    return this.getToken(XQueryParser.KW_RETURN, 0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	switchCaseClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchCaseClauseContext);
	    } else {
	        return this.getTypedRuleContext(SwitchCaseClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterSwitchExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitSwitchExpr(this);
		}
	}


}



class SwitchCaseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_switchCaseClause;
    }

	KW_RETURN() {
	    return this.getToken(XQueryParser.KW_RETURN, 0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	KW_CASE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.KW_CASE);
	    } else {
	        return this.getToken(XQueryParser.KW_CASE, i);
	    }
	};


	switchCaseOperand = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchCaseOperandContext);
	    } else {
	        return this.getTypedRuleContext(SwitchCaseOperandContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterSwitchCaseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitSwitchCaseClause(this);
		}
	}


}



class SwitchCaseOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_switchCaseOperand;
    }

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterSwitchCaseOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitSwitchCaseOperand(this);
		}
	}


}



class TypeswitchExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_typeswitchExpr;
        this.clauses = null;
        this.var_ = null;
        this.returnExpr = null;
    }

	KW_TYPESWITCH() {
	    return this.getToken(XQueryParser.KW_TYPESWITCH, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	KW_DEFAULT() {
	    return this.getToken(XQueryParser.KW_DEFAULT, 0);
	};

	KW_RETURN() {
	    return this.getToken(XQueryParser.KW_RETURN, 0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	DOLLAR() {
	    return this.getToken(XQueryParser.DOLLAR, 0);
	};

	caseClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClauseContext);
	    } else {
	        return this.getTypedRuleContext(CaseClauseContext,i);
	    }
	};

	varName() {
	    return this.getTypedRuleContext(VarNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterTypeswitchExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitTypeswitchExpr(this);
		}
	}


}



class CaseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_caseClause;
        this.var_ = null;
        this.type = null;
        this.returnExpr = null;
    }

	KW_CASE() {
	    return this.getToken(XQueryParser.KW_CASE, 0);
	};

	KW_RETURN() {
	    return this.getToken(XQueryParser.KW_RETURN, 0);
	};

	sequenceUnionType() {
	    return this.getTypedRuleContext(SequenceUnionTypeContext,0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	DOLLAR() {
	    return this.getToken(XQueryParser.DOLLAR, 0);
	};

	KW_AS() {
	    return this.getToken(XQueryParser.KW_AS, 0);
	};

	varName() {
	    return this.getTypedRuleContext(VarNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCaseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCaseClause(this);
		}
	}


}



class SequenceUnionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_sequenceUnionType;
    }

	sequenceType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SequenceTypeContext);
	    } else {
	        return this.getTypedRuleContext(SequenceTypeContext,i);
	    }
	};

	VBAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.VBAR);
	    } else {
	        return this.getToken(XQueryParser.VBAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterSequenceUnionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitSequenceUnionType(this);
		}
	}


}



class IfExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_ifExpr;
        this.conditionExpr = null;
        this.thenExpr = null;
        this.elseExpr = null;
    }

	KW_IF() {
	    return this.getToken(XQueryParser.KW_IF, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	KW_THEN() {
	    return this.getToken(XQueryParser.KW_THEN, 0);
	};

	KW_ELSE() {
	    return this.getToken(XQueryParser.KW_ELSE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	exprSingle = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprSingleContext);
	    } else {
	        return this.getTypedRuleContext(ExprSingleContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterIfExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitIfExpr(this);
		}
	}


}



class TryCatchExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_tryCatchExpr;
    }

	tryClause() {
	    return this.getTypedRuleContext(TryClauseContext,0);
	};

	catchClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CatchClauseContext);
	    } else {
	        return this.getTypedRuleContext(CatchClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterTryCatchExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitTryCatchExpr(this);
		}
	}


}



class TryClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_tryClause;
    }

	KW_TRY() {
	    return this.getToken(XQueryParser.KW_TRY, 0);
	};

	enclosedTryTargetExpression() {
	    return this.getTypedRuleContext(EnclosedTryTargetExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterTryClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitTryClause(this);
		}
	}


}



class EnclosedTryTargetExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_enclosedTryTargetExpression;
    }

	enclosedExpression() {
	    return this.getTypedRuleContext(EnclosedExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterEnclosedTryTargetExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitEnclosedTryTargetExpression(this);
		}
	}


}



class CatchClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_catchClause;
    }

	KW_CATCH() {
	    return this.getToken(XQueryParser.KW_CATCH, 0);
	};

	enclosedExpression() {
	    return this.getTypedRuleContext(EnclosedExpressionContext,0);
	};

	catchErrorList() {
	    return this.getTypedRuleContext(CatchErrorListContext,0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	DOLLAR() {
	    return this.getToken(XQueryParser.DOLLAR, 0);
	};

	varName() {
	    return this.getTypedRuleContext(VarNameContext,0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCatchClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCatchClause(this);
		}
	}


}



class EnclosedExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_enclosedExpression;
    }

	LBRACE() {
	    return this.getToken(XQueryParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(XQueryParser.RBRACE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterEnclosedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitEnclosedExpression(this);
		}
	}


}



class CatchErrorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_catchErrorList;
    }

	nameTest = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameTestContext);
	    } else {
	        return this.getTypedRuleContext(NameTestContext,i);
	    }
	};

	VBAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.VBAR);
	    } else {
	        return this.getToken(XQueryParser.VBAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCatchErrorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCatchErrorList(this);
		}
	}


}



class ExistUpdateExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_existUpdateExpr;
    }

	KW_UPDATE() {
	    return this.getToken(XQueryParser.KW_UPDATE, 0);
	};

	existReplaceExpr() {
	    return this.getTypedRuleContext(ExistReplaceExprContext,0);
	};

	existValueExpr() {
	    return this.getTypedRuleContext(ExistValueExprContext,0);
	};

	existInsertExpr() {
	    return this.getTypedRuleContext(ExistInsertExprContext,0);
	};

	existDeleteExpr() {
	    return this.getTypedRuleContext(ExistDeleteExprContext,0);
	};

	existRenameExpr() {
	    return this.getTypedRuleContext(ExistRenameExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterExistUpdateExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitExistUpdateExpr(this);
		}
	}


}



class ExistReplaceExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_existReplaceExpr;
    }

	KW_REPLACE() {
	    return this.getToken(XQueryParser.KW_REPLACE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	KW_WITH() {
	    return this.getToken(XQueryParser.KW_WITH, 0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterExistReplaceExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitExistReplaceExpr(this);
		}
	}


}



class ExistValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_existValueExpr;
    }

	KW_VALUE() {
	    return this.getToken(XQueryParser.KW_VALUE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	KW_WITH() {
	    return this.getToken(XQueryParser.KW_WITH, 0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterExistValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitExistValueExpr(this);
		}
	}


}



class ExistInsertExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_existInsertExpr;
    }

	KW_INSERT() {
	    return this.getToken(XQueryParser.KW_INSERT, 0);
	};

	exprSingle = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprSingleContext);
	    } else {
	        return this.getTypedRuleContext(ExprSingleContext,i);
	    }
	};

	KW_INTO() {
	    return this.getToken(XQueryParser.KW_INTO, 0);
	};

	KW_PRECEDING() {
	    return this.getToken(XQueryParser.KW_PRECEDING, 0);
	};

	KW_FOLLOWING() {
	    return this.getToken(XQueryParser.KW_FOLLOWING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterExistInsertExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitExistInsertExpr(this);
		}
	}


}



class ExistDeleteExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_existDeleteExpr;
    }

	KW_DELETE() {
	    return this.getToken(XQueryParser.KW_DELETE, 0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterExistDeleteExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitExistDeleteExpr(this);
		}
	}


}



class ExistRenameExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_existRenameExpr;
    }

	KW_RENAME() {
	    return this.getToken(XQueryParser.KW_RENAME, 0);
	};

	exprSingle = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprSingleContext);
	    } else {
	        return this.getTypedRuleContext(ExprSingleContext,i);
	    }
	};

	KW_AS() {
	    return this.getToken(XQueryParser.KW_AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterExistRenameExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitExistRenameExpr(this);
		}
	}


}



class OrExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_orExpr;
    }

	andExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AndExprContext);
	    } else {
	        return this.getTypedRuleContext(AndExprContext,i);
	    }
	};

	KW_OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.KW_OR);
	    } else {
	        return this.getToken(XQueryParser.KW_OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterOrExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitOrExpr(this);
		}
	}


}



class AndExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_andExpr;
    }

	comparisonExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComparisonExprContext);
	    } else {
	        return this.getTypedRuleContext(ComparisonExprContext,i);
	    }
	};

	KW_AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.KW_AND);
	    } else {
	        return this.getToken(XQueryParser.KW_AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAndExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAndExpr(this);
		}
	}


}



class ComparisonExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_comparisonExpr;
    }

	stringConcatExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringConcatExprContext);
	    } else {
	        return this.getTypedRuleContext(StringConcatExprContext,i);
	    }
	};

	valueComp() {
	    return this.getTypedRuleContext(ValueCompContext,0);
	};

	generalComp() {
	    return this.getTypedRuleContext(GeneralCompContext,0);
	};

	nodeComp() {
	    return this.getTypedRuleContext(NodeCompContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterComparisonExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitComparisonExpr(this);
		}
	}


}



class StringConcatExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_stringConcatExpr;
    }

	rangeExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RangeExprContext);
	    } else {
	        return this.getTypedRuleContext(RangeExprContext,i);
	    }
	};

	CONCATENATION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.CONCATENATION);
	    } else {
	        return this.getToken(XQueryParser.CONCATENATION, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterStringConcatExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitStringConcatExpr(this);
		}
	}


}



class RangeExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_rangeExpr;
    }

	additiveExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveExprContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveExprContext,i);
	    }
	};

	KW_TO() {
	    return this.getToken(XQueryParser.KW_TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterRangeExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitRangeExpr(this);
		}
	}


}



class AdditiveExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_additiveExpr;
    }

	multiplicativeExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicativeExprContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicativeExprContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.PLUS);
	    } else {
	        return this.getToken(XQueryParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.MINUS);
	    } else {
	        return this.getToken(XQueryParser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAdditiveExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAdditiveExpr(this);
		}
	}


}



class MultiplicativeExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_multiplicativeExpr;
    }

	unionExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnionExprContext);
	    } else {
	        return this.getTypedRuleContext(UnionExprContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.STAR);
	    } else {
	        return this.getToken(XQueryParser.STAR, i);
	    }
	};


	KW_DIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.KW_DIV);
	    } else {
	        return this.getToken(XQueryParser.KW_DIV, i);
	    }
	};


	KW_IDIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.KW_IDIV);
	    } else {
	        return this.getToken(XQueryParser.KW_IDIV, i);
	    }
	};


	KW_MOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.KW_MOD);
	    } else {
	        return this.getToken(XQueryParser.KW_MOD, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterMultiplicativeExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitMultiplicativeExpr(this);
		}
	}


}



class UnionExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_unionExpr;
    }

	intersectExceptExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntersectExceptExprContext);
	    } else {
	        return this.getTypedRuleContext(IntersectExceptExprContext,i);
	    }
	};

	KW_UNION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.KW_UNION);
	    } else {
	        return this.getToken(XQueryParser.KW_UNION, i);
	    }
	};


	VBAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.VBAR);
	    } else {
	        return this.getToken(XQueryParser.VBAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterUnionExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitUnionExpr(this);
		}
	}


}



class IntersectExceptExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_intersectExceptExpr;
    }

	instanceOfExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InstanceOfExprContext);
	    } else {
	        return this.getTypedRuleContext(InstanceOfExprContext,i);
	    }
	};

	KW_INTERSECT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.KW_INTERSECT);
	    } else {
	        return this.getToken(XQueryParser.KW_INTERSECT, i);
	    }
	};


	KW_EXCEPT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.KW_EXCEPT);
	    } else {
	        return this.getToken(XQueryParser.KW_EXCEPT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterIntersectExceptExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitIntersectExceptExpr(this);
		}
	}


}



class InstanceOfExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_instanceOfExpr;
    }

	treatExpr() {
	    return this.getTypedRuleContext(TreatExprContext,0);
	};

	KW_INSTANCE() {
	    return this.getToken(XQueryParser.KW_INSTANCE, 0);
	};

	KW_OF() {
	    return this.getToken(XQueryParser.KW_OF, 0);
	};

	sequenceType() {
	    return this.getTypedRuleContext(SequenceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterInstanceOfExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitInstanceOfExpr(this);
		}
	}


}



class TreatExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_treatExpr;
    }

	castableExpr() {
	    return this.getTypedRuleContext(CastableExprContext,0);
	};

	KW_TREAT() {
	    return this.getToken(XQueryParser.KW_TREAT, 0);
	};

	KW_AS() {
	    return this.getToken(XQueryParser.KW_AS, 0);
	};

	sequenceType() {
	    return this.getTypedRuleContext(SequenceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterTreatExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitTreatExpr(this);
		}
	}


}



class CastableExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_castableExpr;
    }

	castExpr() {
	    return this.getTypedRuleContext(CastExprContext,0);
	};

	KW_CASTABLE() {
	    return this.getToken(XQueryParser.KW_CASTABLE, 0);
	};

	KW_AS() {
	    return this.getToken(XQueryParser.KW_AS, 0);
	};

	singleType() {
	    return this.getTypedRuleContext(SingleTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCastableExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCastableExpr(this);
		}
	}


}



class CastExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_castExpr;
    }

	arrowExpr() {
	    return this.getTypedRuleContext(ArrowExprContext,0);
	};

	KW_CAST() {
	    return this.getToken(XQueryParser.KW_CAST, 0);
	};

	KW_AS() {
	    return this.getToken(XQueryParser.KW_AS, 0);
	};

	singleType() {
	    return this.getTypedRuleContext(SingleTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCastExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCastExpr(this);
		}
	}


}



class ArrowExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_arrowExpr;
    }

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	ARROW = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.ARROW);
	    } else {
	        return this.getToken(XQueryParser.ARROW, i);
	    }
	};


	arrowFunctionSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArrowFunctionSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(ArrowFunctionSpecifierContext,i);
	    }
	};

	argumentList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentListContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterArrowExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitArrowExpr(this);
		}
	}


}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_unaryExpression;
    }

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.MINUS);
	    } else {
	        return this.getToken(XQueryParser.MINUS, i);
	    }
	};


	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.PLUS);
	    } else {
	        return this.getToken(XQueryParser.PLUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitUnaryExpression(this);
		}
	}


}



class ValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_valueExpr;
    }

	validateExpr() {
	    return this.getTypedRuleContext(ValidateExprContext,0);
	};

	extensionExpr() {
	    return this.getTypedRuleContext(ExtensionExprContext,0);
	};

	simpleMapExpr() {
	    return this.getTypedRuleContext(SimpleMapExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitValueExpr(this);
		}
	}


}



class GeneralCompContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_generalComp;
    }

	EQUAL() {
	    return this.getToken(XQueryParser.EQUAL, 0);
	};

	NOT_EQUAL() {
	    return this.getToken(XQueryParser.NOT_EQUAL, 0);
	};

	LANGLE() {
	    return this.getToken(XQueryParser.LANGLE, 0);
	};

	RANGLE() {
	    return this.getToken(XQueryParser.RANGLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterGeneralComp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitGeneralComp(this);
		}
	}


}



class ValueCompContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_valueComp;
    }

	KW_EQ() {
	    return this.getToken(XQueryParser.KW_EQ, 0);
	};

	KW_NE() {
	    return this.getToken(XQueryParser.KW_NE, 0);
	};

	KW_LT() {
	    return this.getToken(XQueryParser.KW_LT, 0);
	};

	KW_LE() {
	    return this.getToken(XQueryParser.KW_LE, 0);
	};

	KW_GT() {
	    return this.getToken(XQueryParser.KW_GT, 0);
	};

	KW_GE() {
	    return this.getToken(XQueryParser.KW_GE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterValueComp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitValueComp(this);
		}
	}


}



class NodeCompContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_nodeComp;
    }

	KW_IS() {
	    return this.getToken(XQueryParser.KW_IS, 0);
	};

	LANGLE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.LANGLE);
	    } else {
	        return this.getToken(XQueryParser.LANGLE, i);
	    }
	};


	RANGLE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.RANGLE);
	    } else {
	        return this.getToken(XQueryParser.RANGLE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterNodeComp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitNodeComp(this);
		}
	}


}



class ValidateExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_validateExpr;
    }

	KW_VALIDATE() {
	    return this.getToken(XQueryParser.KW_VALIDATE, 0);
	};

	enclosedExpression() {
	    return this.getTypedRuleContext(EnclosedExpressionContext,0);
	};

	validationMode() {
	    return this.getTypedRuleContext(ValidationModeContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	KW_TYPE() {
	    return this.getToken(XQueryParser.KW_TYPE, 0);
	};

	KW_AS() {
	    return this.getToken(XQueryParser.KW_AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterValidateExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitValidateExpr(this);
		}
	}


}



class ValidationModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_validationMode;
    }

	KW_LAX() {
	    return this.getToken(XQueryParser.KW_LAX, 0);
	};

	KW_STRICT() {
	    return this.getToken(XQueryParser.KW_STRICT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterValidationMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitValidationMode(this);
		}
	}


}



class ExtensionExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_extensionExpr;
    }

	LBRACE() {
	    return this.getToken(XQueryParser.LBRACE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RBRACE() {
	    return this.getToken(XQueryParser.RBRACE, 0);
	};

	PRAGMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.PRAGMA);
	    } else {
	        return this.getToken(XQueryParser.PRAGMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterExtensionExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitExtensionExpr(this);
		}
	}


}



class SimpleMapExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_simpleMapExpr;
    }

	pathExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathExprContext);
	    } else {
	        return this.getTypedRuleContext(PathExprContext,i);
	    }
	};

	BANG = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.BANG);
	    } else {
	        return this.getToken(XQueryParser.BANG, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterSimpleMapExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitSimpleMapExpr(this);
		}
	}


}



class PathExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_pathExpr;
    }

	SLASH() {
	    return this.getToken(XQueryParser.SLASH, 0);
	};

	relativePathExpr() {
	    return this.getTypedRuleContext(RelativePathExprContext,0);
	};

	descendantPath() {
	    return this.getTypedRuleContext(DescendantPathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterPathExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitPathExpr(this);
		}
	}


}



class RelativePathExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_relativePathExpr;
    }

	stepExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StepExprContext);
	    } else {
	        return this.getTypedRuleContext(StepExprContext,i);
	    }
	};

	SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.SLASH);
	    } else {
	        return this.getToken(XQueryParser.SLASH, i);
	    }
	};


	descendantPath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DescendantPathContext);
	    } else {
	        return this.getTypedRuleContext(DescendantPathContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterRelativePathExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitRelativePathExpr(this);
		}
	}


}



class DescendantPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_descendantPath;
    }

	DSLASH() {
	    return this.getToken(XQueryParser.DSLASH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterDescendantPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitDescendantPath(this);
		}
	}


}



class StepExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_stepExpr;
    }

	postfixExpr() {
	    return this.getTypedRuleContext(PostfixExprContext,0);
	};

	axisStep() {
	    return this.getTypedRuleContext(AxisStepContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterStepExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitStepExpr(this);
		}
	}


}



class AxisStepContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_axisStep;
    }

	predicateList() {
	    return this.getTypedRuleContext(PredicateListContext,0);
	};

	reverseStep() {
	    return this.getTypedRuleContext(ReverseStepContext,0);
	};

	forwardStep() {
	    return this.getTypedRuleContext(ForwardStepContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAxisStep(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAxisStep(this);
		}
	}


}



class ForwardStepContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_forwardStep;
    }

	forwardAxis() {
	    return this.getTypedRuleContext(ForwardAxisContext,0);
	};

	nodeTest() {
	    return this.getTypedRuleContext(NodeTestContext,0);
	};

	abbrevForwardStep() {
	    return this.getTypedRuleContext(AbbrevForwardStepContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterForwardStep(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitForwardStep(this);
		}
	}


}



class ForwardAxisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_forwardAxis;
    }

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COLON);
	    } else {
	        return this.getToken(XQueryParser.COLON, i);
	    }
	};


	KW_CHILD() {
	    return this.getToken(XQueryParser.KW_CHILD, 0);
	};

	KW_DESCENDANT() {
	    return this.getToken(XQueryParser.KW_DESCENDANT, 0);
	};

	KW_ATTRIBUTE() {
	    return this.getToken(XQueryParser.KW_ATTRIBUTE, 0);
	};

	KW_SELF() {
	    return this.getToken(XQueryParser.KW_SELF, 0);
	};

	KW_DESCENDANT_OR_SELF() {
	    return this.getToken(XQueryParser.KW_DESCENDANT_OR_SELF, 0);
	};

	KW_FOLLOWING_SIBLING() {
	    return this.getToken(XQueryParser.KW_FOLLOWING_SIBLING, 0);
	};

	KW_FOLLOWING() {
	    return this.getToken(XQueryParser.KW_FOLLOWING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterForwardAxis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitForwardAxis(this);
		}
	}


}



class AbbrevForwardStepContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_abbrevForwardStep;
    }

	nodeTest() {
	    return this.getTypedRuleContext(NodeTestContext,0);
	};

	AT() {
	    return this.getToken(XQueryParser.AT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAbbrevForwardStep(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAbbrevForwardStep(this);
		}
	}


}



class ReverseStepContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_reverseStep;
    }

	reverseAxis() {
	    return this.getTypedRuleContext(ReverseAxisContext,0);
	};

	nodeTest() {
	    return this.getTypedRuleContext(NodeTestContext,0);
	};

	abbrevReverseStep() {
	    return this.getTypedRuleContext(AbbrevReverseStepContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterReverseStep(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitReverseStep(this);
		}
	}


}



class ReverseAxisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_reverseAxis;
    }

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COLON);
	    } else {
	        return this.getToken(XQueryParser.COLON, i);
	    }
	};


	KW_PARENT() {
	    return this.getToken(XQueryParser.KW_PARENT, 0);
	};

	KW_ANCESTOR() {
	    return this.getToken(XQueryParser.KW_ANCESTOR, 0);
	};

	KW_PRECEDING_SIBLING() {
	    return this.getToken(XQueryParser.KW_PRECEDING_SIBLING, 0);
	};

	KW_PRECEDING() {
	    return this.getToken(XQueryParser.KW_PRECEDING, 0);
	};

	KW_ANCESTOR_OR_SELF() {
	    return this.getToken(XQueryParser.KW_ANCESTOR_OR_SELF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterReverseAxis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitReverseAxis(this);
		}
	}


}



class AbbrevReverseStepContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_abbrevReverseStep;
    }

	DDOT() {
	    return this.getToken(XQueryParser.DDOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAbbrevReverseStep(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAbbrevReverseStep(this);
		}
	}


}



class NodeTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_nodeTest;
    }

	nameTest() {
	    return this.getTypedRuleContext(NameTestContext,0);
	};

	kindTest() {
	    return this.getTypedRuleContext(KindTestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterNodeTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitNodeTest(this);
		}
	}


}



class NameTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_nameTest;
    }

	eqName() {
	    return this.getTypedRuleContext(EqNameContext,0);
	};

	wildcard() {
	    return this.getTypedRuleContext(WildcardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterNameTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitNameTest(this);
		}
	}


}



class WildcardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_wildcard;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AllNamesContext extends WildcardContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STAR() {
	    return this.getToken(XQueryParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAllNames(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAllNames(this);
		}
	}


}

XQueryParser.AllNamesContext = AllNamesContext;

class AllWithLocalContext extends WildcardContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NCNameWithPrefixWildcard() {
	    return this.getToken(XQueryParser.NCNameWithPrefixWildcard, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAllWithLocal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAllWithLocal(this);
		}
	}


}

XQueryParser.AllWithLocalContext = AllWithLocalContext;

class AllWithNSContext extends WildcardContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NCNameWithLocalWildcard() {
	    return this.getToken(XQueryParser.NCNameWithLocalWildcard, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAllWithNS(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAllWithNS(this);
		}
	}


}

XQueryParser.AllWithNSContext = AllWithNSContext;

class PostfixExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_postfixExpr;
    }

	primaryExpr() {
	    return this.getTypedRuleContext(PrimaryExprContext,0);
	};

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	argumentList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentListContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentListContext,i);
	    }
	};

	lookup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LookupContext);
	    } else {
	        return this.getTypedRuleContext(LookupContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterPostfixExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitPostfixExpr(this);
		}
	}


}



class ArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_argumentList;
    }

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COMMA);
	    } else {
	        return this.getToken(XQueryParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitArgumentList(this);
		}
	}


}



class PredicateListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_predicateList;
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterPredicateList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitPredicateList(this);
		}
	}


}



class PredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_predicate;
    }

	LBRACKET() {
	    return this.getToken(XQueryParser.LBRACKET, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RBRACKET() {
	    return this.getToken(XQueryParser.RBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitPredicate(this);
		}
	}


}



class LookupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_lookup;
    }

	QUESTION() {
	    return this.getToken(XQueryParser.QUESTION, 0);
	};

	keySpecifier() {
	    return this.getTypedRuleContext(KeySpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterLookup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitLookup(this);
		}
	}


}



class KeySpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_keySpecifier;
    }

	ncName() {
	    return this.getTypedRuleContext(NcNameContext,0);
	};

	IntegerLiteral() {
	    return this.getToken(XQueryParser.IntegerLiteral, 0);
	};

	parenthesizedExpr() {
	    return this.getTypedRuleContext(ParenthesizedExprContext,0);
	};

	STAR() {
	    return this.getToken(XQueryParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterKeySpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitKeySpecifier(this);
		}
	}


}



class ArrowFunctionSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_arrowFunctionSpecifier;
    }

	eqName() {
	    return this.getTypedRuleContext(EqNameContext,0);
	};

	varRef() {
	    return this.getTypedRuleContext(VarRefContext,0);
	};

	parenthesizedExpr() {
	    return this.getTypedRuleContext(ParenthesizedExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterArrowFunctionSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitArrowFunctionSpecifier(this);
		}
	}


}



class PrimaryExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_primaryExpr;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	varRef() {
	    return this.getTypedRuleContext(VarRefContext,0);
	};

	parenthesizedExpr() {
	    return this.getTypedRuleContext(ParenthesizedExprContext,0);
	};

	contextItemExpr() {
	    return this.getTypedRuleContext(ContextItemExprContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	orderedExpr() {
	    return this.getTypedRuleContext(OrderedExprContext,0);
	};

	unorderedExpr() {
	    return this.getTypedRuleContext(UnorderedExprContext,0);
	};

	nodeConstructor() {
	    return this.getTypedRuleContext(NodeConstructorContext,0);
	};

	functionItemExpr() {
	    return this.getTypedRuleContext(FunctionItemExprContext,0);
	};

	mapConstructor() {
	    return this.getTypedRuleContext(MapConstructorContext,0);
	};

	arrayConstructor() {
	    return this.getTypedRuleContext(ArrayConstructorContext,0);
	};

	stringConstructor() {
	    return this.getTypedRuleContext(StringConstructorContext,0);
	};

	unaryLookup() {
	    return this.getTypedRuleContext(UnaryLookupContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterPrimaryExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitPrimaryExpr(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_literal;
    }

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class NumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_numericLiteral;
    }

	IntegerLiteral() {
	    return this.getToken(XQueryParser.IntegerLiteral, 0);
	};

	DecimalLiteral() {
	    return this.getToken(XQueryParser.DecimalLiteral, 0);
	};

	DoubleLiteral() {
	    return this.getToken(XQueryParser.DoubleLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitNumericLiteral(this);
		}
	}


}



class VarRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_varRef;
    }

	DOLLAR() {
	    return this.getToken(XQueryParser.DOLLAR, 0);
	};

	eqName() {
	    return this.getTypedRuleContext(EqNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterVarRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitVarRef(this);
		}
	}


}



class VarNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_varName;
    }

	eqName() {
	    return this.getTypedRuleContext(EqNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterVarName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitVarName(this);
		}
	}


}



class ParenthesizedExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_parenthesizedExpr;
    }

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterParenthesizedExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitParenthesizedExpr(this);
		}
	}


}



class ContextItemExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_contextItemExpr;
    }

	DOT() {
	    return this.getToken(XQueryParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterContextItemExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitContextItemExpr(this);
		}
	}


}



class OrderedExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_orderedExpr;
    }

	KW_ORDERED() {
	    return this.getToken(XQueryParser.KW_ORDERED, 0);
	};

	enclosedExpression() {
	    return this.getTypedRuleContext(EnclosedExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterOrderedExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitOrderedExpr(this);
		}
	}


}



class UnorderedExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_unorderedExpr;
    }

	KW_UNORDERED() {
	    return this.getToken(XQueryParser.KW_UNORDERED, 0);
	};

	enclosedExpression() {
	    return this.getTypedRuleContext(EnclosedExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterUnorderedExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitUnorderedExpr(this);
		}
	}


}



class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_functionCall;
    }

	eqName() {
	    return this.getTypedRuleContext(EqNameContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitFunctionCall(this);
		}
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_argument;
    }

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	QUESTION() {
	    return this.getToken(XQueryParser.QUESTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitArgument(this);
		}
	}


}



class NodeConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_nodeConstructor;
    }

	directConstructor() {
	    return this.getTypedRuleContext(DirectConstructorContext,0);
	};

	computedConstructor() {
	    return this.getTypedRuleContext(ComputedConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterNodeConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitNodeConstructor(this);
		}
	}


}



class DirectConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_directConstructor;
    }

	dirElemConstructorOpenClose() {
	    return this.getTypedRuleContext(DirElemConstructorOpenCloseContext,0);
	};

	dirElemConstructorSingleTag() {
	    return this.getTypedRuleContext(DirElemConstructorSingleTagContext,0);
	};

	COMMENT() {
	    return this.getToken(XQueryParser.COMMENT, 0);
	};

	PI() {
	    return this.getToken(XQueryParser.PI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterDirectConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitDirectConstructor(this);
		}
	}


}



class DirElemConstructorOpenCloseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_dirElemConstructorOpenClose;
        this.openName = null;
        this.endOpen = null;
        this.startClose = null;
        this.slashClose = null;
        this.closeName = null;
    }

	LANGLE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.LANGLE);
	    } else {
	        return this.getToken(XQueryParser.LANGLE, i);
	    }
	};


	dirAttributeList() {
	    return this.getTypedRuleContext(DirAttributeListContext,0);
	};

	RANGLE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.RANGLE);
	    } else {
	        return this.getToken(XQueryParser.RANGLE, i);
	    }
	};


	qName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QNameContext);
	    } else {
	        return this.getTypedRuleContext(QNameContext,i);
	    }
	};

	SLASH() {
	    return this.getToken(XQueryParser.SLASH, 0);
	};

	dirElemContent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DirElemContentContext);
	    } else {
	        return this.getTypedRuleContext(DirElemContentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterDirElemConstructorOpenClose(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitDirElemConstructorOpenClose(this);
		}
	}


}



class DirElemConstructorSingleTagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_dirElemConstructorSingleTag;
        this.openName = null;
        this.slashClose = null;
    }

	LANGLE() {
	    return this.getToken(XQueryParser.LANGLE, 0);
	};

	dirAttributeList() {
	    return this.getTypedRuleContext(DirAttributeListContext,0);
	};

	RANGLE() {
	    return this.getToken(XQueryParser.RANGLE, 0);
	};

	qName() {
	    return this.getTypedRuleContext(QNameContext,0);
	};

	SLASH() {
	    return this.getToken(XQueryParser.SLASH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterDirElemConstructorSingleTag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitDirElemConstructorSingleTag(this);
		}
	}


}



class DirAttributeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_dirAttributeList;
    }

	qName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QNameContext);
	    } else {
	        return this.getTypedRuleContext(QNameContext,i);
	    }
	};

	EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.EQUAL);
	    } else {
	        return this.getToken(XQueryParser.EQUAL, i);
	    }
	};


	dirAttributeValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DirAttributeValueContext);
	    } else {
	        return this.getTypedRuleContext(DirAttributeValueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterDirAttributeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitDirAttributeList(this);
		}
	}


}



class DirAttributeValueAposContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_dirAttributeValueApos;
    }

	Quot = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.Quot);
	    } else {
	        return this.getToken(XQueryParser.Quot, i);
	    }
	};


	PredefinedEntityRef = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.PredefinedEntityRef);
	    } else {
	        return this.getToken(XQueryParser.PredefinedEntityRef, i);
	    }
	};


	CharRef = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.CharRef);
	    } else {
	        return this.getToken(XQueryParser.CharRef, i);
	    }
	};


	EscapeQuot = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.EscapeQuot);
	    } else {
	        return this.getToken(XQueryParser.EscapeQuot, i);
	    }
	};


	dirAttributeContentQuot = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DirAttributeContentQuotContext);
	    } else {
	        return this.getTypedRuleContext(DirAttributeContentQuotContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterDirAttributeValueApos(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitDirAttributeValueApos(this);
		}
	}


}



class DirAttributeValueQuotContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_dirAttributeValueQuot;
    }

	Apos = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.Apos);
	    } else {
	        return this.getToken(XQueryParser.Apos, i);
	    }
	};


	PredefinedEntityRef = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.PredefinedEntityRef);
	    } else {
	        return this.getToken(XQueryParser.PredefinedEntityRef, i);
	    }
	};


	CharRef = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.CharRef);
	    } else {
	        return this.getToken(XQueryParser.CharRef, i);
	    }
	};


	EscapeApos = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.EscapeApos);
	    } else {
	        return this.getToken(XQueryParser.EscapeApos, i);
	    }
	};


	dirAttributeContentApos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DirAttributeContentAposContext);
	    } else {
	        return this.getTypedRuleContext(DirAttributeContentAposContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterDirAttributeValueQuot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitDirAttributeValueQuot(this);
		}
	}


}



class DirAttributeValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_dirAttributeValue;
    }

	dirAttributeValueApos() {
	    return this.getTypedRuleContext(DirAttributeValueAposContext,0);
	};

	dirAttributeValueQuot() {
	    return this.getTypedRuleContext(DirAttributeValueQuotContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterDirAttributeValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitDirAttributeValue(this);
		}
	}


}



class DirAttributeContentQuotContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_dirAttributeContentQuot;
    }

	ContentChar = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.ContentChar);
	    } else {
	        return this.getToken(XQueryParser.ContentChar, i);
	    }
	};


	DOUBLE_LBRACE() {
	    return this.getToken(XQueryParser.DOUBLE_LBRACE, 0);
	};

	DOUBLE_RBRACE() {
	    return this.getToken(XQueryParser.DOUBLE_RBRACE, 0);
	};

	dirAttributeValueApos() {
	    return this.getTypedRuleContext(DirAttributeValueAposContext,0);
	};

	LBRACE() {
	    return this.getToken(XQueryParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(XQueryParser.RBRACE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterDirAttributeContentQuot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitDirAttributeContentQuot(this);
		}
	}


}



class DirAttributeContentAposContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_dirAttributeContentApos;
    }

	ContentChar = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.ContentChar);
	    } else {
	        return this.getToken(XQueryParser.ContentChar, i);
	    }
	};


	DOUBLE_LBRACE() {
	    return this.getToken(XQueryParser.DOUBLE_LBRACE, 0);
	};

	DOUBLE_RBRACE() {
	    return this.getToken(XQueryParser.DOUBLE_RBRACE, 0);
	};

	dirAttributeValueQuot() {
	    return this.getTypedRuleContext(DirAttributeValueQuotContext,0);
	};

	LBRACE() {
	    return this.getToken(XQueryParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(XQueryParser.RBRACE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterDirAttributeContentApos(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitDirAttributeContentApos(this);
		}
	}


}



class DirElemContentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_dirElemContent;
    }

	directConstructor() {
	    return this.getTypedRuleContext(DirectConstructorContext,0);
	};

	commonContent() {
	    return this.getTypedRuleContext(CommonContentContext,0);
	};

	CDATA() {
	    return this.getToken(XQueryParser.CDATA, 0);
	};

	Quot() {
	    return this.getToken(XQueryParser.Quot, 0);
	};

	Apos() {
	    return this.getToken(XQueryParser.Apos, 0);
	};

	noQuotesNoBracesNoAmpNoLAng() {
	    return this.getTypedRuleContext(NoQuotesNoBracesNoAmpNoLAngContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterDirElemContent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitDirElemContent(this);
		}
	}


}



class CommonContentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_commonContent;
    }

	PredefinedEntityRef() {
	    return this.getToken(XQueryParser.PredefinedEntityRef, 0);
	};

	CharRef() {
	    return this.getToken(XQueryParser.CharRef, 0);
	};

	LBRACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.LBRACE);
	    } else {
	        return this.getToken(XQueryParser.LBRACE, i);
	    }
	};


	RBRACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.RBRACE);
	    } else {
	        return this.getToken(XQueryParser.RBRACE, i);
	    }
	};


	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCommonContent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCommonContent(this);
		}
	}


}



class ComputedConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_computedConstructor;
    }

	compDocConstructor() {
	    return this.getTypedRuleContext(CompDocConstructorContext,0);
	};

	compElemConstructor() {
	    return this.getTypedRuleContext(CompElemConstructorContext,0);
	};

	compAttrConstructor() {
	    return this.getTypedRuleContext(CompAttrConstructorContext,0);
	};

	compNamespaceConstructor() {
	    return this.getTypedRuleContext(CompNamespaceConstructorContext,0);
	};

	compTextConstructor() {
	    return this.getTypedRuleContext(CompTextConstructorContext,0);
	};

	compCommentConstructor() {
	    return this.getTypedRuleContext(CompCommentConstructorContext,0);
	};

	compPIConstructor() {
	    return this.getTypedRuleContext(CompPIConstructorContext,0);
	};

	compMLJSONConstructor() {
	    return this.getTypedRuleContext(CompMLJSONConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterComputedConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitComputedConstructor(this);
		}
	}


}



class CompMLJSONConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_compMLJSONConstructor;
    }

	compMLJSONArrayConstructor() {
	    return this.getTypedRuleContext(CompMLJSONArrayConstructorContext,0);
	};

	compMLJSONObjectConstructor() {
	    return this.getTypedRuleContext(CompMLJSONObjectConstructorContext,0);
	};

	compMLJSONNumberConstructor() {
	    return this.getTypedRuleContext(CompMLJSONNumberConstructorContext,0);
	};

	compMLJSONBooleanConstructor() {
	    return this.getTypedRuleContext(CompMLJSONBooleanConstructorContext,0);
	};

	compMLJSONNullConstructor() {
	    return this.getTypedRuleContext(CompMLJSONNullConstructorContext,0);
	};

	compBinaryConstructor() {
	    return this.getTypedRuleContext(CompBinaryConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCompMLJSONConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCompMLJSONConstructor(this);
		}
	}


}



class CompMLJSONArrayConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_compMLJSONArrayConstructor;
    }

	KW_ARRAY_NODE() {
	    return this.getToken(XQueryParser.KW_ARRAY_NODE, 0);
	};

	enclosedContentExpr() {
	    return this.getTypedRuleContext(EnclosedContentExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCompMLJSONArrayConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCompMLJSONArrayConstructor(this);
		}
	}


}



class CompMLJSONObjectConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_compMLJSONObjectConstructor;
    }

	KW_OBJECT_NODE() {
	    return this.getToken(XQueryParser.KW_OBJECT_NODE, 0);
	};

	LBRACE() {
	    return this.getToken(XQueryParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(XQueryParser.RBRACE, 0);
	};

	exprSingle = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprSingleContext);
	    } else {
	        return this.getTypedRuleContext(ExprSingleContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COLON);
	    } else {
	        return this.getToken(XQueryParser.COLON, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COMMA);
	    } else {
	        return this.getToken(XQueryParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCompMLJSONObjectConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCompMLJSONObjectConstructor(this);
		}
	}


}



class CompMLJSONNumberConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_compMLJSONNumberConstructor;
    }

	KW_NUMBER_NODE() {
	    return this.getToken(XQueryParser.KW_NUMBER_NODE, 0);
	};

	enclosedContentExpr() {
	    return this.getTypedRuleContext(EnclosedContentExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCompMLJSONNumberConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCompMLJSONNumberConstructor(this);
		}
	}


}



class CompMLJSONBooleanConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_compMLJSONBooleanConstructor;
    }

	KW_BOOLEAN_NODE() {
	    return this.getToken(XQueryParser.KW_BOOLEAN_NODE, 0);
	};

	LBRACE() {
	    return this.getToken(XQueryParser.LBRACE, 0);
	};

	exprSingle() {
	    return this.getTypedRuleContext(ExprSingleContext,0);
	};

	RBRACE() {
	    return this.getToken(XQueryParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCompMLJSONBooleanConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCompMLJSONBooleanConstructor(this);
		}
	}


}



class CompMLJSONNullConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_compMLJSONNullConstructor;
    }

	KW_NULL_NODE() {
	    return this.getToken(XQueryParser.KW_NULL_NODE, 0);
	};

	LBRACE() {
	    return this.getToken(XQueryParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(XQueryParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCompMLJSONNullConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCompMLJSONNullConstructor(this);
		}
	}


}



class CompBinaryConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_compBinaryConstructor;
    }

	KW_BINARY() {
	    return this.getToken(XQueryParser.KW_BINARY, 0);
	};

	enclosedContentExpr() {
	    return this.getTypedRuleContext(EnclosedContentExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCompBinaryConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCompBinaryConstructor(this);
		}
	}


}



class CompDocConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_compDocConstructor;
    }

	KW_DOCUMENT() {
	    return this.getToken(XQueryParser.KW_DOCUMENT, 0);
	};

	enclosedExpression() {
	    return this.getTypedRuleContext(EnclosedExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCompDocConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCompDocConstructor(this);
		}
	}


}



class CompElemConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_compElemConstructor;
    }

	KW_ELEMENT() {
	    return this.getToken(XQueryParser.KW_ELEMENT, 0);
	};

	enclosedContentExpr() {
	    return this.getTypedRuleContext(EnclosedContentExprContext,0);
	};

	eqName() {
	    return this.getTypedRuleContext(EqNameContext,0);
	};

	LBRACE() {
	    return this.getToken(XQueryParser.LBRACE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RBRACE() {
	    return this.getToken(XQueryParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCompElemConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCompElemConstructor(this);
		}
	}


}



class EnclosedContentExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_enclosedContentExpr;
    }

	enclosedExpression() {
	    return this.getTypedRuleContext(EnclosedExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterEnclosedContentExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitEnclosedContentExpr(this);
		}
	}


}



class CompAttrConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_compAttrConstructor;
    }

	KW_ATTRIBUTE() {
	    return this.getToken(XQueryParser.KW_ATTRIBUTE, 0);
	};

	enclosedExpression() {
	    return this.getTypedRuleContext(EnclosedExpressionContext,0);
	};

	eqName() {
	    return this.getTypedRuleContext(EqNameContext,0);
	};

	LBRACE() {
	    return this.getToken(XQueryParser.LBRACE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RBRACE() {
	    return this.getToken(XQueryParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCompAttrConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCompAttrConstructor(this);
		}
	}


}



class CompNamespaceConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_compNamespaceConstructor;
    }

	KW_NAMESPACE() {
	    return this.getToken(XQueryParser.KW_NAMESPACE, 0);
	};

	enclosedURIExpr() {
	    return this.getTypedRuleContext(EnclosedURIExprContext,0);
	};

	prefix() {
	    return this.getTypedRuleContext(PrefixContext,0);
	};

	enclosedPrefixExpr() {
	    return this.getTypedRuleContext(EnclosedPrefixExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCompNamespaceConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCompNamespaceConstructor(this);
		}
	}


}



class PrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_prefix;
    }

	ncName() {
	    return this.getTypedRuleContext(NcNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterPrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitPrefix(this);
		}
	}


}



class EnclosedPrefixExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_enclosedPrefixExpr;
    }

	enclosedExpression() {
	    return this.getTypedRuleContext(EnclosedExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterEnclosedPrefixExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitEnclosedPrefixExpr(this);
		}
	}


}



class EnclosedURIExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_enclosedURIExpr;
    }

	enclosedExpression() {
	    return this.getTypedRuleContext(EnclosedExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterEnclosedURIExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitEnclosedURIExpr(this);
		}
	}


}



class CompTextConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_compTextConstructor;
    }

	KW_TEXT() {
	    return this.getToken(XQueryParser.KW_TEXT, 0);
	};

	enclosedExpression() {
	    return this.getTypedRuleContext(EnclosedExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCompTextConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCompTextConstructor(this);
		}
	}


}



class CompCommentConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_compCommentConstructor;
    }

	KW_COMMENT() {
	    return this.getToken(XQueryParser.KW_COMMENT, 0);
	};

	enclosedExpression() {
	    return this.getTypedRuleContext(EnclosedExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCompCommentConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCompCommentConstructor(this);
		}
	}


}



class CompPIConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_compPIConstructor;
    }

	KW_PI() {
	    return this.getToken(XQueryParser.KW_PI, 0);
	};

	enclosedExpression() {
	    return this.getTypedRuleContext(EnclosedExpressionContext,0);
	};

	ncName() {
	    return this.getTypedRuleContext(NcNameContext,0);
	};

	LBRACE() {
	    return this.getToken(XQueryParser.LBRACE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RBRACE() {
	    return this.getToken(XQueryParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCompPIConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCompPIConstructor(this);
		}
	}


}



class FunctionItemExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_functionItemExpr;
    }

	namedFunctionRef() {
	    return this.getTypedRuleContext(NamedFunctionRefContext,0);
	};

	inlineFunctionRef() {
	    return this.getTypedRuleContext(InlineFunctionRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterFunctionItemExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitFunctionItemExpr(this);
		}
	}


}



class NamedFunctionRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_namedFunctionRef;
    }

	eqName() {
	    return this.getTypedRuleContext(EqNameContext,0);
	};

	HASH() {
	    return this.getToken(XQueryParser.HASH, 0);
	};

	IntegerLiteral() {
	    return this.getToken(XQueryParser.IntegerLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterNamedFunctionRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitNamedFunctionRef(this);
		}
	}


}



class InlineFunctionRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_inlineFunctionRef;
    }

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	KW_FUNCTION() {
	    return this.getToken(XQueryParser.KW_FUNCTION, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	functionParams() {
	    return this.getTypedRuleContext(FunctionParamsContext,0);
	};

	KW_AS() {
	    return this.getToken(XQueryParser.KW_AS, 0);
	};

	sequenceType() {
	    return this.getTypedRuleContext(SequenceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterInlineFunctionRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitInlineFunctionRef(this);
		}
	}


}



class FunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_functionBody;
    }

	enclosedExpression() {
	    return this.getTypedRuleContext(EnclosedExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitFunctionBody(this);
		}
	}


}



class MapConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_mapConstructor;
    }

	KW_MAP() {
	    return this.getToken(XQueryParser.KW_MAP, 0);
	};

	LBRACE() {
	    return this.getToken(XQueryParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(XQueryParser.RBRACE, 0);
	};

	mapConstructorEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MapConstructorEntryContext);
	    } else {
	        return this.getTypedRuleContext(MapConstructorEntryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COMMA);
	    } else {
	        return this.getToken(XQueryParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterMapConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitMapConstructor(this);
		}
	}


}



class MapConstructorEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_mapConstructorEntry;
        this.mapKey = null;
        this.mapValue = null;
    }

	exprSingle = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprSingleContext);
	    } else {
	        return this.getTypedRuleContext(ExprSingleContext,i);
	    }
	};

	COLON() {
	    return this.getToken(XQueryParser.COLON, 0);
	};

	COLON_EQ() {
	    return this.getToken(XQueryParser.COLON_EQ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterMapConstructorEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitMapConstructorEntry(this);
		}
	}


}



class ArrayConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_arrayConstructor;
    }

	squareArrayConstructor() {
	    return this.getTypedRuleContext(SquareArrayConstructorContext,0);
	};

	curlyArrayConstructor() {
	    return this.getTypedRuleContext(CurlyArrayConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterArrayConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitArrayConstructor(this);
		}
	}


}



class SquareArrayConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_squareArrayConstructor;
    }

	LBRACKET() {
	    return this.getToken(XQueryParser.LBRACKET, 0);
	};

	RBRACKET() {
	    return this.getToken(XQueryParser.RBRACKET, 0);
	};

	exprSingle = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprSingleContext);
	    } else {
	        return this.getTypedRuleContext(ExprSingleContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COMMA);
	    } else {
	        return this.getToken(XQueryParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterSquareArrayConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitSquareArrayConstructor(this);
		}
	}


}



class CurlyArrayConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_curlyArrayConstructor;
    }

	KW_ARRAY() {
	    return this.getToken(XQueryParser.KW_ARRAY, 0);
	};

	enclosedExpression() {
	    return this.getTypedRuleContext(EnclosedExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCurlyArrayConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCurlyArrayConstructor(this);
		}
	}


}



class StringConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_stringConstructor;
    }

	ENTER_STRING() {
	    return this.getToken(XQueryParser.ENTER_STRING, 0);
	};

	stringConstructorContent() {
	    return this.getTypedRuleContext(StringConstructorContentContext,0);
	};

	EXIT_STRING() {
	    return this.getToken(XQueryParser.EXIT_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterStringConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitStringConstructor(this);
		}
	}


}



class StringConstructorContentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_stringConstructorContent;
    }

	stringConstructorChars = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringConstructorCharsContext);
	    } else {
	        return this.getTypedRuleContext(StringConstructorCharsContext,i);
	    }
	};

	stringConstructorInterpolation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringConstructorInterpolationContext);
	    } else {
	        return this.getTypedRuleContext(StringConstructorInterpolationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterStringConstructorContent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitStringConstructorContent(this);
		}
	}


}



class CharNoGraveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_charNoGrave;
    }

	BASIC_CHAR() {
	    return this.getToken(XQueryParser.BASIC_CHAR, 0);
	};

	LBRACE() {
	    return this.getToken(XQueryParser.LBRACE, 0);
	};

	RBRACKET() {
	    return this.getToken(XQueryParser.RBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCharNoGrave(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCharNoGrave(this);
		}
	}


}



class CharNoLBraceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_charNoLBrace;
    }

	BASIC_CHAR() {
	    return this.getToken(XQueryParser.BASIC_CHAR, 0);
	};

	GRAVE() {
	    return this.getToken(XQueryParser.GRAVE, 0);
	};

	RBRACKET() {
	    return this.getToken(XQueryParser.RBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCharNoLBrace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCharNoLBrace(this);
		}
	}


}



class CharNoRBrackContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_charNoRBrack;
    }

	BASIC_CHAR() {
	    return this.getToken(XQueryParser.BASIC_CHAR, 0);
	};

	GRAVE() {
	    return this.getToken(XQueryParser.GRAVE, 0);
	};

	LBRACE() {
	    return this.getToken(XQueryParser.LBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCharNoRBrack(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCharNoRBrack(this);
		}
	}


}



class StringConstructorCharsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_stringConstructorChars;
    }

	BASIC_CHAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.BASIC_CHAR);
	    } else {
	        return this.getToken(XQueryParser.BASIC_CHAR, i);
	    }
	};


	charNoGrave = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CharNoGraveContext);
	    } else {
	        return this.getTypedRuleContext(CharNoGraveContext,i);
	    }
	};

	charNoLBrace = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CharNoLBraceContext);
	    } else {
	        return this.getTypedRuleContext(CharNoLBraceContext,i);
	    }
	};

	charNoRBrack = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CharNoRBrackContext);
	    } else {
	        return this.getTypedRuleContext(CharNoRBrackContext,i);
	    }
	};

	LBRACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.LBRACE);
	    } else {
	        return this.getToken(XQueryParser.LBRACE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterStringConstructorChars(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitStringConstructorChars(this);
		}
	}


}



class StringConstructorInterpolationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_stringConstructorInterpolation;
    }

	ENTER_INTERPOLATION() {
	    return this.getToken(XQueryParser.ENTER_INTERPOLATION, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	EXIT_INTERPOLATION() {
	    return this.getToken(XQueryParser.EXIT_INTERPOLATION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterStringConstructorInterpolation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitStringConstructorInterpolation(this);
		}
	}


}



class UnaryLookupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_unaryLookup;
    }

	QUESTION() {
	    return this.getToken(XQueryParser.QUESTION, 0);
	};

	keySpecifier() {
	    return this.getTypedRuleContext(KeySpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterUnaryLookup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitUnaryLookup(this);
		}
	}


}



class SingleTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_singleType;
    }

	simpleTypeName() {
	    return this.getTypedRuleContext(SimpleTypeNameContext,0);
	};

	QUESTION() {
	    return this.getToken(XQueryParser.QUESTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterSingleType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitSingleType(this);
		}
	}


}



class TypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_typeDeclaration;
    }

	KW_AS() {
	    return this.getToken(XQueryParser.KW_AS, 0);
	};

	sequenceType() {
	    return this.getTypedRuleContext(SequenceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitTypeDeclaration(this);
		}
	}


}



class SequenceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_sequenceType;
        this.occurrence = null;
    }

	KW_EMPTY_SEQUENCE() {
	    return this.getToken(XQueryParser.KW_EMPTY_SEQUENCE, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	itemType() {
	    return this.getTypedRuleContext(ItemTypeContext,0);
	};

	QUESTION() {
	    return this.getToken(XQueryParser.QUESTION, 0);
	};

	STAR() {
	    return this.getToken(XQueryParser.STAR, 0);
	};

	PLUS() {
	    return this.getToken(XQueryParser.PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterSequenceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitSequenceType(this);
		}
	}


}



class ItemTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_itemType;
    }

	kindTest() {
	    return this.getTypedRuleContext(KindTestContext,0);
	};

	KW_ITEM() {
	    return this.getToken(XQueryParser.KW_ITEM, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	functionTest() {
	    return this.getTypedRuleContext(FunctionTestContext,0);
	};

	mapTest() {
	    return this.getTypedRuleContext(MapTestContext,0);
	};

	arrayTest() {
	    return this.getTypedRuleContext(ArrayTestContext,0);
	};

	atomicOrUnionType() {
	    return this.getTypedRuleContext(AtomicOrUnionTypeContext,0);
	};

	parenthesizedItemTest() {
	    return this.getTypedRuleContext(ParenthesizedItemTestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterItemType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitItemType(this);
		}
	}


}



class AtomicOrUnionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_atomicOrUnionType;
    }

	eqName() {
	    return this.getTypedRuleContext(EqNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAtomicOrUnionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAtomicOrUnionType(this);
		}
	}


}



class KindTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_kindTest;
    }

	documentTest() {
	    return this.getTypedRuleContext(DocumentTestContext,0);
	};

	elementTest() {
	    return this.getTypedRuleContext(ElementTestContext,0);
	};

	attributeTest() {
	    return this.getTypedRuleContext(AttributeTestContext,0);
	};

	schemaElementTest() {
	    return this.getTypedRuleContext(SchemaElementTestContext,0);
	};

	schemaAttributeTest() {
	    return this.getTypedRuleContext(SchemaAttributeTestContext,0);
	};

	piTest() {
	    return this.getTypedRuleContext(PiTestContext,0);
	};

	commentTest() {
	    return this.getTypedRuleContext(CommentTestContext,0);
	};

	textTest() {
	    return this.getTypedRuleContext(TextTestContext,0);
	};

	namespaceNodeTest() {
	    return this.getTypedRuleContext(NamespaceNodeTestContext,0);
	};

	mlNodeTest() {
	    return this.getTypedRuleContext(MlNodeTestContext,0);
	};

	binaryNodeTest() {
	    return this.getTypedRuleContext(BinaryNodeTestContext,0);
	};

	anyKindTest() {
	    return this.getTypedRuleContext(AnyKindTestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterKindTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitKindTest(this);
		}
	}


}



class AnyKindTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_anyKindTest;
    }

	KW_NODE() {
	    return this.getToken(XQueryParser.KW_NODE, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	STAR() {
	    return this.getToken(XQueryParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAnyKindTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAnyKindTest(this);
		}
	}


}



class BinaryNodeTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_binaryNodeTest;
    }

	KW_BINARY() {
	    return this.getToken(XQueryParser.KW_BINARY, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterBinaryNodeTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitBinaryNodeTest(this);
		}
	}


}



class DocumentTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_documentTest;
    }

	KW_DOCUMENT_NODE() {
	    return this.getToken(XQueryParser.KW_DOCUMENT_NODE, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	elementTest() {
	    return this.getTypedRuleContext(ElementTestContext,0);
	};

	schemaElementTest() {
	    return this.getTypedRuleContext(SchemaElementTestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterDocumentTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitDocumentTest(this);
		}
	}


}



class TextTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_textTest;
    }

	TEXT_FUNCTION() {
	    return this.getToken(XQueryParser.TEXT_FUNCTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterTextTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitTextTest(this);
		}
	}


}



class CommentTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_commentTest;
    }

	KW_COMMENT() {
	    return this.getToken(XQueryParser.KW_COMMENT, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterCommentTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitCommentTest(this);
		}
	}


}



class NamespaceNodeTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_namespaceNodeTest;
    }

	KW_NAMESPACE_NODE() {
	    return this.getToken(XQueryParser.KW_NAMESPACE_NODE, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterNamespaceNodeTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitNamespaceNodeTest(this);
		}
	}


}



class PiTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_piTest;
    }

	KW_PI() {
	    return this.getToken(XQueryParser.KW_PI, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	ncName() {
	    return this.getTypedRuleContext(NcNameContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterPiTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitPiTest(this);
		}
	}


}



class AttributeTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_attributeTest;
        this.type = null;
    }

	KW_ATTRIBUTE() {
	    return this.getToken(XQueryParser.KW_ATTRIBUTE, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	attributeNameOrWildcard() {
	    return this.getTypedRuleContext(AttributeNameOrWildcardContext,0);
	};

	COMMA() {
	    return this.getToken(XQueryParser.COMMA, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAttributeTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAttributeTest(this);
		}
	}


}



class AttributeNameOrWildcardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_attributeNameOrWildcard;
    }

	attributeName() {
	    return this.getTypedRuleContext(AttributeNameContext,0);
	};

	STAR() {
	    return this.getToken(XQueryParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAttributeNameOrWildcard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAttributeNameOrWildcard(this);
		}
	}


}



class SchemaAttributeTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_schemaAttributeTest;
    }

	KW_SCHEMA_ATTR() {
	    return this.getToken(XQueryParser.KW_SCHEMA_ATTR, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	attributeDeclaration() {
	    return this.getTypedRuleContext(AttributeDeclarationContext,0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterSchemaAttributeTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitSchemaAttributeTest(this);
		}
	}


}



class ElementTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_elementTest;
        this.optional = null;
    }

	KW_ELEMENT() {
	    return this.getToken(XQueryParser.KW_ELEMENT, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	elementNameOrWildcard() {
	    return this.getTypedRuleContext(ElementNameOrWildcardContext,0);
	};

	COMMA() {
	    return this.getToken(XQueryParser.COMMA, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	QUESTION() {
	    return this.getToken(XQueryParser.QUESTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterElementTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitElementTest(this);
		}
	}


}



class ElementNameOrWildcardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_elementNameOrWildcard;
    }

	elementName() {
	    return this.getTypedRuleContext(ElementNameContext,0);
	};

	STAR() {
	    return this.getToken(XQueryParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterElementNameOrWildcard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitElementNameOrWildcard(this);
		}
	}


}



class SchemaElementTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_schemaElementTest;
    }

	KW_SCHEMA_ELEM() {
	    return this.getToken(XQueryParser.KW_SCHEMA_ELEM, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	elementDeclaration() {
	    return this.getTypedRuleContext(ElementDeclarationContext,0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterSchemaElementTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitSchemaElementTest(this);
		}
	}


}



class ElementDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_elementDeclaration;
    }

	elementName() {
	    return this.getTypedRuleContext(ElementNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterElementDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitElementDeclaration(this);
		}
	}


}



class AttributeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_attributeName;
    }

	eqName() {
	    return this.getTypedRuleContext(EqNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAttributeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAttributeName(this);
		}
	}


}



class ElementNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_elementName;
    }

	eqName() {
	    return this.getTypedRuleContext(EqNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterElementName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitElementName(this);
		}
	}


}



class SimpleTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_simpleTypeName;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterSimpleTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitSimpleTypeName(this);
		}
	}


}



class TypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_typeName;
    }

	eqName() {
	    return this.getTypedRuleContext(EqNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitTypeName(this);
		}
	}


}



class FunctionTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_functionTest;
    }

	anyFunctionTest() {
	    return this.getTypedRuleContext(AnyFunctionTestContext,0);
	};

	typedFunctionTest() {
	    return this.getTypedRuleContext(TypedFunctionTestContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterFunctionTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitFunctionTest(this);
		}
	}


}



class AnyFunctionTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_anyFunctionTest;
    }

	KW_FUNCTION() {
	    return this.getToken(XQueryParser.KW_FUNCTION, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	STAR() {
	    return this.getToken(XQueryParser.STAR, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAnyFunctionTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAnyFunctionTest(this);
		}
	}


}



class TypedFunctionTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_typedFunctionTest;
    }

	KW_FUNCTION() {
	    return this.getToken(XQueryParser.KW_FUNCTION, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	KW_AS() {
	    return this.getToken(XQueryParser.KW_AS, 0);
	};

	sequenceType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SequenceTypeContext);
	    } else {
	        return this.getTypedRuleContext(SequenceTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COMMA);
	    } else {
	        return this.getToken(XQueryParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterTypedFunctionTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitTypedFunctionTest(this);
		}
	}


}



class MapTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_mapTest;
    }

	anyMapTest() {
	    return this.getTypedRuleContext(AnyMapTestContext,0);
	};

	typedMapTest() {
	    return this.getTypedRuleContext(TypedMapTestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterMapTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitMapTest(this);
		}
	}


}



class AnyMapTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_anyMapTest;
    }

	KW_MAP() {
	    return this.getToken(XQueryParser.KW_MAP, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	STAR() {
	    return this.getToken(XQueryParser.STAR, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAnyMapTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAnyMapTest(this);
		}
	}


}



class TypedMapTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_typedMapTest;
    }

	KW_MAP() {
	    return this.getToken(XQueryParser.KW_MAP, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	eqName() {
	    return this.getTypedRuleContext(EqNameContext,0);
	};

	COMMA() {
	    return this.getToken(XQueryParser.COMMA, 0);
	};

	sequenceType() {
	    return this.getTypedRuleContext(SequenceTypeContext,0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterTypedMapTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitTypedMapTest(this);
		}
	}


}



class ArrayTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_arrayTest;
    }

	anyArrayTest() {
	    return this.getTypedRuleContext(AnyArrayTestContext,0);
	};

	typedArrayTest() {
	    return this.getTypedRuleContext(TypedArrayTestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterArrayTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitArrayTest(this);
		}
	}


}



class AnyArrayTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_anyArrayTest;
    }

	KW_ARRAY() {
	    return this.getToken(XQueryParser.KW_ARRAY, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	STAR() {
	    return this.getToken(XQueryParser.STAR, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAnyArrayTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAnyArrayTest(this);
		}
	}


}



class TypedArrayTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_typedArrayTest;
    }

	KW_ARRAY() {
	    return this.getToken(XQueryParser.KW_ARRAY, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	sequenceType() {
	    return this.getTypedRuleContext(SequenceTypeContext,0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterTypedArrayTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitTypedArrayTest(this);
		}
	}


}



class ParenthesizedItemTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_parenthesizedItemTest;
    }

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	itemType() {
	    return this.getTypedRuleContext(ItemTypeContext,0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterParenthesizedItemTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitParenthesizedItemTest(this);
		}
	}


}



class AttributeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_attributeDeclaration;
    }

	attributeName() {
	    return this.getTypedRuleContext(AttributeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterAttributeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitAttributeDeclaration(this);
		}
	}


}



class MlNodeTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_mlNodeTest;
    }

	mlArrayNodeTest() {
	    return this.getTypedRuleContext(MlArrayNodeTestContext,0);
	};

	mlObjectNodeTest() {
	    return this.getTypedRuleContext(MlObjectNodeTestContext,0);
	};

	mlNumberNodeTest() {
	    return this.getTypedRuleContext(MlNumberNodeTestContext,0);
	};

	mlBooleanNodeTest() {
	    return this.getTypedRuleContext(MlBooleanNodeTestContext,0);
	};

	mlNullNodeTest() {
	    return this.getTypedRuleContext(MlNullNodeTestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterMlNodeTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitMlNodeTest(this);
		}
	}


}



class MlArrayNodeTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_mlArrayNodeTest;
    }

	KW_ARRAY_NODE() {
	    return this.getToken(XQueryParser.KW_ARRAY_NODE, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterMlArrayNodeTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitMlArrayNodeTest(this);
		}
	}


}



class MlObjectNodeTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_mlObjectNodeTest;
    }

	KW_OBJECT_NODE() {
	    return this.getToken(XQueryParser.KW_OBJECT_NODE, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterMlObjectNodeTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitMlObjectNodeTest(this);
		}
	}


}



class MlNumberNodeTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_mlNumberNodeTest;
    }

	KW_NUMBER_NODE() {
	    return this.getToken(XQueryParser.KW_NUMBER_NODE, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterMlNumberNodeTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitMlNumberNodeTest(this);
		}
	}


}



class MlBooleanNodeTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_mlBooleanNodeTest;
    }

	KW_BOOLEAN_NODE() {
	    return this.getToken(XQueryParser.KW_BOOLEAN_NODE, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterMlBooleanNodeTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitMlBooleanNodeTest(this);
		}
	}


}



class MlNullNodeTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_mlNullNodeTest;
    }

	KW_NULL_NODE() {
	    return this.getToken(XQueryParser.KW_NULL_NODE, 0);
	};

	LPAREN() {
	    return this.getToken(XQueryParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(XQueryParser.RPAREN, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterMlNullNodeTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitMlNullNodeTest(this);
		}
	}


}



class EqNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_eqName;
    }

	qName() {
	    return this.getTypedRuleContext(QNameContext,0);
	};

	URIQualifiedName() {
	    return this.getToken(XQueryParser.URIQualifiedName, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterEqName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitEqName(this);
		}
	}


}



class QNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_qName;
    }

	FullQName() {
	    return this.getToken(XQueryParser.FullQName, 0);
	};

	ncName() {
	    return this.getTypedRuleContext(NcNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterQName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitQName(this);
		}
	}


}



class NcNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_ncName;
    }

	NCName() {
	    return this.getToken(XQueryParser.NCName, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterNcName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitNcName(this);
		}
	}


}



class FunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_functionName;
    }

	FullQName() {
	    return this.getToken(XQueryParser.FullQName, 0);
	};

	NCName() {
	    return this.getToken(XQueryParser.NCName, 0);
	};

	URIQualifiedName() {
	    return this.getToken(XQueryParser.URIQualifiedName, 0);
	};

	keywordOKForFunction() {
	    return this.getTypedRuleContext(KeywordOKForFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitFunctionName(this);
		}
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_keyword;
    }

	keywordOKForFunction() {
	    return this.getTypedRuleContext(KeywordOKForFunctionContext,0);
	};

	keywordNotOKForFunction() {
	    return this.getTypedRuleContext(KeywordNotOKForFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitKeyword(this);
		}
	}


}



class KeywordNotOKForFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_keywordNotOKForFunction;
    }

	KW_ATTRIBUTE() {
	    return this.getToken(XQueryParser.KW_ATTRIBUTE, 0);
	};

	KW_COMMENT() {
	    return this.getToken(XQueryParser.KW_COMMENT, 0);
	};

	KW_DOCUMENT_NODE() {
	    return this.getToken(XQueryParser.KW_DOCUMENT_NODE, 0);
	};

	KW_ELEMENT() {
	    return this.getToken(XQueryParser.KW_ELEMENT, 0);
	};

	KW_EMPTY_SEQUENCE() {
	    return this.getToken(XQueryParser.KW_EMPTY_SEQUENCE, 0);
	};

	KW_IF() {
	    return this.getToken(XQueryParser.KW_IF, 0);
	};

	KW_ITEM() {
	    return this.getToken(XQueryParser.KW_ITEM, 0);
	};

	KW_CONTEXT() {
	    return this.getToken(XQueryParser.KW_CONTEXT, 0);
	};

	KW_NODE() {
	    return this.getToken(XQueryParser.KW_NODE, 0);
	};

	KW_PI() {
	    return this.getToken(XQueryParser.KW_PI, 0);
	};

	KW_SCHEMA_ATTR() {
	    return this.getToken(XQueryParser.KW_SCHEMA_ATTR, 0);
	};

	KW_SCHEMA_ELEM() {
	    return this.getToken(XQueryParser.KW_SCHEMA_ELEM, 0);
	};

	KW_BINARY() {
	    return this.getToken(XQueryParser.KW_BINARY, 0);
	};

	KW_TEXT() {
	    return this.getToken(XQueryParser.KW_TEXT, 0);
	};

	KW_TYPESWITCH() {
	    return this.getToken(XQueryParser.KW_TYPESWITCH, 0);
	};

	KW_SWITCH() {
	    return this.getToken(XQueryParser.KW_SWITCH, 0);
	};

	KW_NAMESPACE_NODE() {
	    return this.getToken(XQueryParser.KW_NAMESPACE_NODE, 0);
	};

	KW_TYPE() {
	    return this.getToken(XQueryParser.KW_TYPE, 0);
	};

	KW_TUMBLING() {
	    return this.getToken(XQueryParser.KW_TUMBLING, 0);
	};

	KW_TRY() {
	    return this.getToken(XQueryParser.KW_TRY, 0);
	};

	KW_CATCH() {
	    return this.getToken(XQueryParser.KW_CATCH, 0);
	};

	KW_ONLY() {
	    return this.getToken(XQueryParser.KW_ONLY, 0);
	};

	KW_WHEN() {
	    return this.getToken(XQueryParser.KW_WHEN, 0);
	};

	KW_SLIDING() {
	    return this.getToken(XQueryParser.KW_SLIDING, 0);
	};

	KW_DECIMAL_FORMAT() {
	    return this.getToken(XQueryParser.KW_DECIMAL_FORMAT, 0);
	};

	KW_WINDOW() {
	    return this.getToken(XQueryParser.KW_WINDOW, 0);
	};

	KW_COUNT() {
	    return this.getToken(XQueryParser.KW_COUNT, 0);
	};

	KW_MAP() {
	    return this.getToken(XQueryParser.KW_MAP, 0);
	};

	KW_END() {
	    return this.getToken(XQueryParser.KW_END, 0);
	};

	KW_ALLOWING() {
	    return this.getToken(XQueryParser.KW_ALLOWING, 0);
	};

	KW_ARRAY() {
	    return this.getToken(XQueryParser.KW_ARRAY, 0);
	};

	DFPropertyName() {
	    return this.getToken(XQueryParser.DFPropertyName, 0);
	};

	KW_ARRAY_NODE() {
	    return this.getToken(XQueryParser.KW_ARRAY_NODE, 0);
	};

	KW_BOOLEAN_NODE() {
	    return this.getToken(XQueryParser.KW_BOOLEAN_NODE, 0);
	};

	KW_NULL_NODE() {
	    return this.getToken(XQueryParser.KW_NULL_NODE, 0);
	};

	KW_NUMBER_NODE() {
	    return this.getToken(XQueryParser.KW_NUMBER_NODE, 0);
	};

	KW_OBJECT_NODE() {
	    return this.getToken(XQueryParser.KW_OBJECT_NODE, 0);
	};

	KW_UPDATE() {
	    return this.getToken(XQueryParser.KW_UPDATE, 0);
	};

	KW_REPLACE() {
	    return this.getToken(XQueryParser.KW_REPLACE, 0);
	};

	KW_WITH() {
	    return this.getToken(XQueryParser.KW_WITH, 0);
	};

	KW_VALUE() {
	    return this.getToken(XQueryParser.KW_VALUE, 0);
	};

	KW_INSERT() {
	    return this.getToken(XQueryParser.KW_INSERT, 0);
	};

	KW_INTO() {
	    return this.getToken(XQueryParser.KW_INTO, 0);
	};

	KW_DELETE() {
	    return this.getToken(XQueryParser.KW_DELETE, 0);
	};

	KW_NEXT() {
	    return this.getToken(XQueryParser.KW_NEXT, 0);
	};

	KW_RENAME() {
	    return this.getToken(XQueryParser.KW_RENAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterKeywordNotOKForFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitKeywordNotOKForFunction(this);
		}
	}


}



class KeywordOKForFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_keywordOKForFunction;
    }

	KW_ANCESTOR() {
	    return this.getToken(XQueryParser.KW_ANCESTOR, 0);
	};

	KW_ANCESTOR_OR_SELF() {
	    return this.getToken(XQueryParser.KW_ANCESTOR_OR_SELF, 0);
	};

	KW_AND() {
	    return this.getToken(XQueryParser.KW_AND, 0);
	};

	KW_AS() {
	    return this.getToken(XQueryParser.KW_AS, 0);
	};

	KW_ASCENDING() {
	    return this.getToken(XQueryParser.KW_ASCENDING, 0);
	};

	KW_AT() {
	    return this.getToken(XQueryParser.KW_AT, 0);
	};

	KW_BASE_URI() {
	    return this.getToken(XQueryParser.KW_BASE_URI, 0);
	};

	KW_BOUNDARY_SPACE() {
	    return this.getToken(XQueryParser.KW_BOUNDARY_SPACE, 0);
	};

	KW_BY() {
	    return this.getToken(XQueryParser.KW_BY, 0);
	};

	KW_CASE() {
	    return this.getToken(XQueryParser.KW_CASE, 0);
	};

	KW_CAST() {
	    return this.getToken(XQueryParser.KW_CAST, 0);
	};

	KW_CASTABLE() {
	    return this.getToken(XQueryParser.KW_CASTABLE, 0);
	};

	KW_CHILD() {
	    return this.getToken(XQueryParser.KW_CHILD, 0);
	};

	KW_COLLATION() {
	    return this.getToken(XQueryParser.KW_COLLATION, 0);
	};

	KW_CONSTRUCTION() {
	    return this.getToken(XQueryParser.KW_CONSTRUCTION, 0);
	};

	KW_COPY_NS() {
	    return this.getToken(XQueryParser.KW_COPY_NS, 0);
	};

	KW_DECLARE() {
	    return this.getToken(XQueryParser.KW_DECLARE, 0);
	};

	KW_DEFAULT() {
	    return this.getToken(XQueryParser.KW_DEFAULT, 0);
	};

	KW_DESCENDANT() {
	    return this.getToken(XQueryParser.KW_DESCENDANT, 0);
	};

	KW_DESCENDANT_OR_SELF() {
	    return this.getToken(XQueryParser.KW_DESCENDANT_OR_SELF, 0);
	};

	KW_DESCENDING() {
	    return this.getToken(XQueryParser.KW_DESCENDING, 0);
	};

	KW_DIV() {
	    return this.getToken(XQueryParser.KW_DIV, 0);
	};

	KW_DOCUMENT() {
	    return this.getToken(XQueryParser.KW_DOCUMENT, 0);
	};

	KW_ELSE() {
	    return this.getToken(XQueryParser.KW_ELSE, 0);
	};

	KW_EMPTY() {
	    return this.getToken(XQueryParser.KW_EMPTY, 0);
	};

	KW_ENCODING() {
	    return this.getToken(XQueryParser.KW_ENCODING, 0);
	};

	KW_EQ() {
	    return this.getToken(XQueryParser.KW_EQ, 0);
	};

	KW_EVERY() {
	    return this.getToken(XQueryParser.KW_EVERY, 0);
	};

	KW_EXCEPT() {
	    return this.getToken(XQueryParser.KW_EXCEPT, 0);
	};

	KW_EXTERNAL() {
	    return this.getToken(XQueryParser.KW_EXTERNAL, 0);
	};

	KW_FOLLOWING() {
	    return this.getToken(XQueryParser.KW_FOLLOWING, 0);
	};

	KW_FOLLOWING_SIBLING() {
	    return this.getToken(XQueryParser.KW_FOLLOWING_SIBLING, 0);
	};

	KW_FOR() {
	    return this.getToken(XQueryParser.KW_FOR, 0);
	};

	KW_FUNCTION() {
	    return this.getToken(XQueryParser.KW_FUNCTION, 0);
	};

	KW_GE() {
	    return this.getToken(XQueryParser.KW_GE, 0);
	};

	KW_GREATEST() {
	    return this.getToken(XQueryParser.KW_GREATEST, 0);
	};

	KW_GROUP() {
	    return this.getToken(XQueryParser.KW_GROUP, 0);
	};

	KW_GT() {
	    return this.getToken(XQueryParser.KW_GT, 0);
	};

	KW_IDIV() {
	    return this.getToken(XQueryParser.KW_IDIV, 0);
	};

	KW_IMPORT() {
	    return this.getToken(XQueryParser.KW_IMPORT, 0);
	};

	KW_IN() {
	    return this.getToken(XQueryParser.KW_IN, 0);
	};

	KW_INHERIT() {
	    return this.getToken(XQueryParser.KW_INHERIT, 0);
	};

	KW_INSTANCE() {
	    return this.getToken(XQueryParser.KW_INSTANCE, 0);
	};

	KW_INTERSECT() {
	    return this.getToken(XQueryParser.KW_INTERSECT, 0);
	};

	KW_IS() {
	    return this.getToken(XQueryParser.KW_IS, 0);
	};

	KW_LAX() {
	    return this.getToken(XQueryParser.KW_LAX, 0);
	};

	KW_LE() {
	    return this.getToken(XQueryParser.KW_LE, 0);
	};

	KW_LEAST() {
	    return this.getToken(XQueryParser.KW_LEAST, 0);
	};

	KW_LET() {
	    return this.getToken(XQueryParser.KW_LET, 0);
	};

	KW_LT() {
	    return this.getToken(XQueryParser.KW_LT, 0);
	};

	KW_MOD() {
	    return this.getToken(XQueryParser.KW_MOD, 0);
	};

	KW_MODULE() {
	    return this.getToken(XQueryParser.KW_MODULE, 0);
	};

	KW_NAMESPACE() {
	    return this.getToken(XQueryParser.KW_NAMESPACE, 0);
	};

	KW_NE() {
	    return this.getToken(XQueryParser.KW_NE, 0);
	};

	KW_NO_INHERIT() {
	    return this.getToken(XQueryParser.KW_NO_INHERIT, 0);
	};

	KW_NO_PRESERVE() {
	    return this.getToken(XQueryParser.KW_NO_PRESERVE, 0);
	};

	KW_OF() {
	    return this.getToken(XQueryParser.KW_OF, 0);
	};

	KW_OPTION() {
	    return this.getToken(XQueryParser.KW_OPTION, 0);
	};

	KW_OR() {
	    return this.getToken(XQueryParser.KW_OR, 0);
	};

	KW_ORDER() {
	    return this.getToken(XQueryParser.KW_ORDER, 0);
	};

	KW_ORDERED() {
	    return this.getToken(XQueryParser.KW_ORDERED, 0);
	};

	KW_ORDERING() {
	    return this.getToken(XQueryParser.KW_ORDERING, 0);
	};

	KW_PARENT() {
	    return this.getToken(XQueryParser.KW_PARENT, 0);
	};

	KW_PRECEDING() {
	    return this.getToken(XQueryParser.KW_PRECEDING, 0);
	};

	KW_PRECEDING_SIBLING() {
	    return this.getToken(XQueryParser.KW_PRECEDING_SIBLING, 0);
	};

	KW_PRESERVE() {
	    return this.getToken(XQueryParser.KW_PRESERVE, 0);
	};

	KW_RETURN() {
	    return this.getToken(XQueryParser.KW_RETURN, 0);
	};

	KW_SATISFIES() {
	    return this.getToken(XQueryParser.KW_SATISFIES, 0);
	};

	KW_SCHEMA() {
	    return this.getToken(XQueryParser.KW_SCHEMA, 0);
	};

	KW_SELF() {
	    return this.getToken(XQueryParser.KW_SELF, 0);
	};

	KW_SOME() {
	    return this.getToken(XQueryParser.KW_SOME, 0);
	};

	KW_STABLE() {
	    return this.getToken(XQueryParser.KW_STABLE, 0);
	};

	KW_START() {
	    return this.getToken(XQueryParser.KW_START, 0);
	};

	KW_STRICT() {
	    return this.getToken(XQueryParser.KW_STRICT, 0);
	};

	KW_STRIP() {
	    return this.getToken(XQueryParser.KW_STRIP, 0);
	};

	KW_THEN() {
	    return this.getToken(XQueryParser.KW_THEN, 0);
	};

	KW_TO() {
	    return this.getToken(XQueryParser.KW_TO, 0);
	};

	KW_TREAT() {
	    return this.getToken(XQueryParser.KW_TREAT, 0);
	};

	KW_UNION() {
	    return this.getToken(XQueryParser.KW_UNION, 0);
	};

	KW_UNORDERED() {
	    return this.getToken(XQueryParser.KW_UNORDERED, 0);
	};

	KW_VALIDATE() {
	    return this.getToken(XQueryParser.KW_VALIDATE, 0);
	};

	KW_VARIABLE() {
	    return this.getToken(XQueryParser.KW_VARIABLE, 0);
	};

	KW_VERSION() {
	    return this.getToken(XQueryParser.KW_VERSION, 0);
	};

	KW_WHERE() {
	    return this.getToken(XQueryParser.KW_WHERE, 0);
	};

	KW_XQUERY() {
	    return this.getToken(XQueryParser.KW_XQUERY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterKeywordOKForFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitKeywordOKForFunction(this);
		}
	}


}



class UriLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_uriLiteral;
    }

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterUriLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitUriLiteral(this);
		}
	}


}



class StringLiteralQuotContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_stringLiteralQuot;
    }

	Quot = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.Quot);
	    } else {
	        return this.getToken(XQueryParser.Quot, i);
	    }
	};


	PredefinedEntityRef = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.PredefinedEntityRef);
	    } else {
	        return this.getToken(XQueryParser.PredefinedEntityRef, i);
	    }
	};


	CharRef = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.CharRef);
	    } else {
	        return this.getToken(XQueryParser.CharRef, i);
	    }
	};


	EscapeQuot = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.EscapeQuot);
	    } else {
	        return this.getToken(XQueryParser.EscapeQuot, i);
	    }
	};


	stringContentQuot = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContentQuotContext);
	    } else {
	        return this.getTypedRuleContext(StringContentQuotContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterStringLiteralQuot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitStringLiteralQuot(this);
		}
	}


}



class StringLiteralAposContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_stringLiteralApos;
    }

	Apos = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.Apos);
	    } else {
	        return this.getToken(XQueryParser.Apos, i);
	    }
	};


	PredefinedEntityRef = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.PredefinedEntityRef);
	    } else {
	        return this.getToken(XQueryParser.PredefinedEntityRef, i);
	    }
	};


	CharRef = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.CharRef);
	    } else {
	        return this.getToken(XQueryParser.CharRef, i);
	    }
	};


	EscapeApos = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.EscapeApos);
	    } else {
	        return this.getToken(XQueryParser.EscapeApos, i);
	    }
	};


	stringContentApos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContentAposContext);
	    } else {
	        return this.getTypedRuleContext(StringContentAposContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterStringLiteralApos(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitStringLiteralApos(this);
		}
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_stringLiteral;
    }

	stringLiteralQuot() {
	    return this.getTypedRuleContext(StringLiteralQuotContext,0);
	};

	stringLiteralApos() {
	    return this.getTypedRuleContext(StringLiteralAposContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitStringLiteral(this);
		}
	}


}



class StringContentQuotContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_stringContentQuot;
    }

	ContentChar = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.ContentChar);
	    } else {
	        return this.getToken(XQueryParser.ContentChar, i);
	    }
	};


	LBRACE() {
	    return this.getToken(XQueryParser.LBRACE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RBRACE() {
	    return this.getToken(XQueryParser.RBRACE, 0);
	};

	DOUBLE_LBRACE() {
	    return this.getToken(XQueryParser.DOUBLE_LBRACE, 0);
	};

	DOUBLE_RBRACE() {
	    return this.getToken(XQueryParser.DOUBLE_RBRACE, 0);
	};

	noQuotesNoBracesNoAmpNoLAng() {
	    return this.getTypedRuleContext(NoQuotesNoBracesNoAmpNoLAngContext,0);
	};

	stringLiteralApos() {
	    return this.getTypedRuleContext(StringLiteralAposContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterStringContentQuot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitStringContentQuot(this);
		}
	}


}



class StringContentAposContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_stringContentApos;
    }

	ContentChar = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.ContentChar);
	    } else {
	        return this.getToken(XQueryParser.ContentChar, i);
	    }
	};


	LBRACE() {
	    return this.getToken(XQueryParser.LBRACE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RBRACE() {
	    return this.getToken(XQueryParser.RBRACE, 0);
	};

	DOUBLE_LBRACE() {
	    return this.getToken(XQueryParser.DOUBLE_LBRACE, 0);
	};

	DOUBLE_RBRACE() {
	    return this.getToken(XQueryParser.DOUBLE_RBRACE, 0);
	};

	noQuotesNoBracesNoAmpNoLAng() {
	    return this.getTypedRuleContext(NoQuotesNoBracesNoAmpNoLAngContext,0);
	};

	stringLiteralQuot() {
	    return this.getTypedRuleContext(StringLiteralQuotContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterStringContentApos(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitStringContentApos(this);
		}
	}


}



class NoQuotesNoBracesNoAmpNoLAngContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = XQueryParser.RULE_noQuotesNoBracesNoAmpNoLAng;
    }

	keyword = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeywordContext);
	    } else {
	        return this.getTypedRuleContext(KeywordContext,i);
	    }
	};

	IntegerLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.IntegerLiteral);
	    } else {
	        return this.getToken(XQueryParser.IntegerLiteral, i);
	    }
	};


	DecimalLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.DecimalLiteral);
	    } else {
	        return this.getToken(XQueryParser.DecimalLiteral, i);
	    }
	};


	DoubleLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.DoubleLiteral);
	    } else {
	        return this.getToken(XQueryParser.DoubleLiteral, i);
	    }
	};


	PRAGMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.PRAGMA);
	    } else {
	        return this.getToken(XQueryParser.PRAGMA, i);
	    }
	};


	EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.EQUAL);
	    } else {
	        return this.getToken(XQueryParser.EQUAL, i);
	    }
	};


	HASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.HASH);
	    } else {
	        return this.getToken(XQueryParser.HASH, i);
	    }
	};


	NOT_EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.NOT_EQUAL);
	    } else {
	        return this.getToken(XQueryParser.NOT_EQUAL, i);
	    }
	};


	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.LPAREN);
	    } else {
	        return this.getToken(XQueryParser.LPAREN, i);
	    }
	};


	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.RPAREN);
	    } else {
	        return this.getToken(XQueryParser.RPAREN, i);
	    }
	};


	LBRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.LBRACKET);
	    } else {
	        return this.getToken(XQueryParser.LBRACKET, i);
	    }
	};


	RBRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.RBRACKET);
	    } else {
	        return this.getToken(XQueryParser.RBRACKET, i);
	    }
	};


	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.STAR);
	    } else {
	        return this.getToken(XQueryParser.STAR, i);
	    }
	};


	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.PLUS);
	    } else {
	        return this.getToken(XQueryParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.MINUS);
	    } else {
	        return this.getToken(XQueryParser.MINUS, i);
	    }
	};


	TILDE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.TILDE);
	    } else {
	        return this.getToken(XQueryParser.TILDE, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COMMA);
	    } else {
	        return this.getToken(XQueryParser.COMMA, i);
	    }
	};


	ARROW = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.ARROW);
	    } else {
	        return this.getToken(XQueryParser.ARROW, i);
	    }
	};


	KW_NEXT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.KW_NEXT);
	    } else {
	        return this.getToken(XQueryParser.KW_NEXT, i);
	    }
	};


	KW_PREVIOUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.KW_PREVIOUS);
	    } else {
	        return this.getToken(XQueryParser.KW_PREVIOUS, i);
	    }
	};


	MOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.MOD);
	    } else {
	        return this.getToken(XQueryParser.MOD, i);
	    }
	};


	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.DOT);
	    } else {
	        return this.getToken(XQueryParser.DOT, i);
	    }
	};


	GRAVE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.GRAVE);
	    } else {
	        return this.getToken(XQueryParser.GRAVE, i);
	    }
	};


	DDOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.DDOT);
	    } else {
	        return this.getToken(XQueryParser.DDOT, i);
	    }
	};


	XQDOC_COMMENT_START = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.XQDOC_COMMENT_START);
	    } else {
	        return this.getToken(XQueryParser.XQDOC_COMMENT_START, i);
	    }
	};


	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COLON);
	    } else {
	        return this.getToken(XQueryParser.COLON, i);
	    }
	};


	CARAT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.CARAT);
	    } else {
	        return this.getToken(XQueryParser.CARAT, i);
	    }
	};


	COLON_EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COLON_EQ);
	    } else {
	        return this.getToken(XQueryParser.COLON_EQ, i);
	    }
	};


	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.SEMICOLON);
	    } else {
	        return this.getToken(XQueryParser.SEMICOLON, i);
	    }
	};


	SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.SLASH);
	    } else {
	        return this.getToken(XQueryParser.SLASH, i);
	    }
	};


	DSLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.DSLASH);
	    } else {
	        return this.getToken(XQueryParser.DSLASH, i);
	    }
	};


	BACKSLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.BACKSLASH);
	    } else {
	        return this.getToken(XQueryParser.BACKSLASH, i);
	    }
	};


	COMMENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.COMMENT);
	    } else {
	        return this.getToken(XQueryParser.COMMENT, i);
	    }
	};


	VBAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.VBAR);
	    } else {
	        return this.getToken(XQueryParser.VBAR, i);
	    }
	};


	RANGLE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.RANGLE);
	    } else {
	        return this.getToken(XQueryParser.RANGLE, i);
	    }
	};


	QUESTION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.QUESTION);
	    } else {
	        return this.getToken(XQueryParser.QUESTION, i);
	    }
	};


	AT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.AT);
	    } else {
	        return this.getToken(XQueryParser.AT, i);
	    }
	};


	DOLLAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.DOLLAR);
	    } else {
	        return this.getToken(XQueryParser.DOLLAR, i);
	    }
	};


	BANG = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.BANG);
	    } else {
	        return this.getToken(XQueryParser.BANG, i);
	    }
	};


	FullQName = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.FullQName);
	    } else {
	        return this.getToken(XQueryParser.FullQName, i);
	    }
	};


	URIQualifiedName = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.URIQualifiedName);
	    } else {
	        return this.getToken(XQueryParser.URIQualifiedName, i);
	    }
	};


	NCNameWithLocalWildcard = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.NCNameWithLocalWildcard);
	    } else {
	        return this.getToken(XQueryParser.NCNameWithLocalWildcard, i);
	    }
	};


	NCNameWithPrefixWildcard = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.NCNameWithPrefixWildcard);
	    } else {
	        return this.getToken(XQueryParser.NCNameWithPrefixWildcard, i);
	    }
	};


	NCName = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.NCName);
	    } else {
	        return this.getToken(XQueryParser.NCName, i);
	    }
	};


	ContentChar = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(XQueryParser.ContentChar);
	    } else {
	        return this.getToken(XQueryParser.ContentChar, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.enterNoQuotesNoBracesNoAmpNoLAng(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof XQueryParserListener ) {
	        listener.exitNoQuotesNoBracesNoAmpNoLAng(this);
		}
	}


}




XQueryParser.ModuleContext = ModuleContext; 
XQueryParser.XqDocCommentContext = XqDocCommentContext; 
XQueryParser.VersionDeclContext = VersionDeclContext; 
XQueryParser.MainModuleContext = MainModuleContext; 
XQueryParser.QueryBodyContext = QueryBodyContext; 
XQueryParser.LibraryModuleContext = LibraryModuleContext; 
XQueryParser.ModuleDeclContext = ModuleDeclContext; 
XQueryParser.PrologContext = PrologContext; 
XQueryParser.DefaultNamespaceDeclContext = DefaultNamespaceDeclContext; 
XQueryParser.SetterContext = SetterContext; 
XQueryParser.BoundarySpaceDeclContext = BoundarySpaceDeclContext; 
XQueryParser.DefaultCollationDeclContext = DefaultCollationDeclContext; 
XQueryParser.BaseURIDeclContext = BaseURIDeclContext; 
XQueryParser.ConstructionDeclContext = ConstructionDeclContext; 
XQueryParser.OrderingModeDeclContext = OrderingModeDeclContext; 
XQueryParser.EmptyOrderDeclContext = EmptyOrderDeclContext; 
XQueryParser.CopyNamespacesDeclContext = CopyNamespacesDeclContext; 
XQueryParser.PreserveModeContext = PreserveModeContext; 
XQueryParser.InheritModeContext = InheritModeContext; 
XQueryParser.DecimalFormatDeclContext = DecimalFormatDeclContext; 
XQueryParser.SchemaImportContext = SchemaImportContext; 
XQueryParser.SchemaPrefixContext = SchemaPrefixContext; 
XQueryParser.ModuleImportContext = ModuleImportContext; 
XQueryParser.NamespaceDeclContext = NamespaceDeclContext; 
XQueryParser.VarDeclContext = VarDeclContext; 
XQueryParser.VarValueContext = VarValueContext; 
XQueryParser.VarDefaultValueContext = VarDefaultValueContext; 
XQueryParser.ContextItemDeclContext = ContextItemDeclContext; 
XQueryParser.FunctionDeclContext = FunctionDeclContext; 
XQueryParser.FunctionParamsContext = FunctionParamsContext; 
XQueryParser.FunctionParamContext = FunctionParamContext; 
XQueryParser.AnnotationsContext = AnnotationsContext; 
XQueryParser.AnnotationContext = AnnotationContext; 
XQueryParser.AnnotListContext = AnnotListContext; 
XQueryParser.AnnotationParamContext = AnnotationParamContext; 
XQueryParser.FunctionReturnContext = FunctionReturnContext; 
XQueryParser.OptionDeclContext = OptionDeclContext; 
XQueryParser.MappingDeclContext = MappingDeclContext; 
XQueryParser.ExprContext = ExprContext; 
XQueryParser.ExprSingleContext = ExprSingleContext; 
XQueryParser.FlworExprContext = FlworExprContext; 
XQueryParser.InitialClauseContext = InitialClauseContext; 
XQueryParser.IntermediateClauseContext = IntermediateClauseContext; 
XQueryParser.ForClauseContext = ForClauseContext; 
XQueryParser.ForBindingContext = ForBindingContext; 
XQueryParser.AllowingEmptyContext = AllowingEmptyContext; 
XQueryParser.PositionalVarContext = PositionalVarContext; 
XQueryParser.LetClauseContext = LetClauseContext; 
XQueryParser.LetBindingContext = LetBindingContext; 
XQueryParser.WindowClauseContext = WindowClauseContext; 
XQueryParser.TumblingWindowClauseContext = TumblingWindowClauseContext; 
XQueryParser.SlidingWindowClauseContext = SlidingWindowClauseContext; 
XQueryParser.WindowStartConditionContext = WindowStartConditionContext; 
XQueryParser.WindowEndConditionContext = WindowEndConditionContext; 
XQueryParser.WindowVarsContext = WindowVarsContext; 
XQueryParser.CountClauseContext = CountClauseContext; 
XQueryParser.WhereClauseContext = WhereClauseContext; 
XQueryParser.GroupByClauseContext = GroupByClauseContext; 
XQueryParser.GroupingSpecListContext = GroupingSpecListContext; 
XQueryParser.GroupingSpecContext = GroupingSpecContext; 
XQueryParser.OrderByClauseContext = OrderByClauseContext; 
XQueryParser.OrderSpecContext = OrderSpecContext; 
XQueryParser.ReturnClauseContext = ReturnClauseContext; 
XQueryParser.QuantifiedExprContext = QuantifiedExprContext; 
XQueryParser.QuantifiedVarContext = QuantifiedVarContext; 
XQueryParser.SwitchExprContext = SwitchExprContext; 
XQueryParser.SwitchCaseClauseContext = SwitchCaseClauseContext; 
XQueryParser.SwitchCaseOperandContext = SwitchCaseOperandContext; 
XQueryParser.TypeswitchExprContext = TypeswitchExprContext; 
XQueryParser.CaseClauseContext = CaseClauseContext; 
XQueryParser.SequenceUnionTypeContext = SequenceUnionTypeContext; 
XQueryParser.IfExprContext = IfExprContext; 
XQueryParser.TryCatchExprContext = TryCatchExprContext; 
XQueryParser.TryClauseContext = TryClauseContext; 
XQueryParser.EnclosedTryTargetExpressionContext = EnclosedTryTargetExpressionContext; 
XQueryParser.CatchClauseContext = CatchClauseContext; 
XQueryParser.EnclosedExpressionContext = EnclosedExpressionContext; 
XQueryParser.CatchErrorListContext = CatchErrorListContext; 
XQueryParser.ExistUpdateExprContext = ExistUpdateExprContext; 
XQueryParser.ExistReplaceExprContext = ExistReplaceExprContext; 
XQueryParser.ExistValueExprContext = ExistValueExprContext; 
XQueryParser.ExistInsertExprContext = ExistInsertExprContext; 
XQueryParser.ExistDeleteExprContext = ExistDeleteExprContext; 
XQueryParser.ExistRenameExprContext = ExistRenameExprContext; 
XQueryParser.OrExprContext = OrExprContext; 
XQueryParser.AndExprContext = AndExprContext; 
XQueryParser.ComparisonExprContext = ComparisonExprContext; 
XQueryParser.StringConcatExprContext = StringConcatExprContext; 
XQueryParser.RangeExprContext = RangeExprContext; 
XQueryParser.AdditiveExprContext = AdditiveExprContext; 
XQueryParser.MultiplicativeExprContext = MultiplicativeExprContext; 
XQueryParser.UnionExprContext = UnionExprContext; 
XQueryParser.IntersectExceptExprContext = IntersectExceptExprContext; 
XQueryParser.InstanceOfExprContext = InstanceOfExprContext; 
XQueryParser.TreatExprContext = TreatExprContext; 
XQueryParser.CastableExprContext = CastableExprContext; 
XQueryParser.CastExprContext = CastExprContext; 
XQueryParser.ArrowExprContext = ArrowExprContext; 
XQueryParser.UnaryExpressionContext = UnaryExpressionContext; 
XQueryParser.ValueExprContext = ValueExprContext; 
XQueryParser.GeneralCompContext = GeneralCompContext; 
XQueryParser.ValueCompContext = ValueCompContext; 
XQueryParser.NodeCompContext = NodeCompContext; 
XQueryParser.ValidateExprContext = ValidateExprContext; 
XQueryParser.ValidationModeContext = ValidationModeContext; 
XQueryParser.ExtensionExprContext = ExtensionExprContext; 
XQueryParser.SimpleMapExprContext = SimpleMapExprContext; 
XQueryParser.PathExprContext = PathExprContext; 
XQueryParser.RelativePathExprContext = RelativePathExprContext; 
XQueryParser.DescendantPathContext = DescendantPathContext; 
XQueryParser.StepExprContext = StepExprContext; 
XQueryParser.AxisStepContext = AxisStepContext; 
XQueryParser.ForwardStepContext = ForwardStepContext; 
XQueryParser.ForwardAxisContext = ForwardAxisContext; 
XQueryParser.AbbrevForwardStepContext = AbbrevForwardStepContext; 
XQueryParser.ReverseStepContext = ReverseStepContext; 
XQueryParser.ReverseAxisContext = ReverseAxisContext; 
XQueryParser.AbbrevReverseStepContext = AbbrevReverseStepContext; 
XQueryParser.NodeTestContext = NodeTestContext; 
XQueryParser.NameTestContext = NameTestContext; 
XQueryParser.WildcardContext = WildcardContext; 
XQueryParser.PostfixExprContext = PostfixExprContext; 
XQueryParser.ArgumentListContext = ArgumentListContext; 
XQueryParser.PredicateListContext = PredicateListContext; 
XQueryParser.PredicateContext = PredicateContext; 
XQueryParser.LookupContext = LookupContext; 
XQueryParser.KeySpecifierContext = KeySpecifierContext; 
XQueryParser.ArrowFunctionSpecifierContext = ArrowFunctionSpecifierContext; 
XQueryParser.PrimaryExprContext = PrimaryExprContext; 
XQueryParser.LiteralContext = LiteralContext; 
XQueryParser.NumericLiteralContext = NumericLiteralContext; 
XQueryParser.VarRefContext = VarRefContext; 
XQueryParser.VarNameContext = VarNameContext; 
XQueryParser.ParenthesizedExprContext = ParenthesizedExprContext; 
XQueryParser.ContextItemExprContext = ContextItemExprContext; 
XQueryParser.OrderedExprContext = OrderedExprContext; 
XQueryParser.UnorderedExprContext = UnorderedExprContext; 
XQueryParser.FunctionCallContext = FunctionCallContext; 
XQueryParser.ArgumentContext = ArgumentContext; 
XQueryParser.NodeConstructorContext = NodeConstructorContext; 
XQueryParser.DirectConstructorContext = DirectConstructorContext; 
XQueryParser.DirElemConstructorOpenCloseContext = DirElemConstructorOpenCloseContext; 
XQueryParser.DirElemConstructorSingleTagContext = DirElemConstructorSingleTagContext; 
XQueryParser.DirAttributeListContext = DirAttributeListContext; 
XQueryParser.DirAttributeValueAposContext = DirAttributeValueAposContext; 
XQueryParser.DirAttributeValueQuotContext = DirAttributeValueQuotContext; 
XQueryParser.DirAttributeValueContext = DirAttributeValueContext; 
XQueryParser.DirAttributeContentQuotContext = DirAttributeContentQuotContext; 
XQueryParser.DirAttributeContentAposContext = DirAttributeContentAposContext; 
XQueryParser.DirElemContentContext = DirElemContentContext; 
XQueryParser.CommonContentContext = CommonContentContext; 
XQueryParser.ComputedConstructorContext = ComputedConstructorContext; 
XQueryParser.CompMLJSONConstructorContext = CompMLJSONConstructorContext; 
XQueryParser.CompMLJSONArrayConstructorContext = CompMLJSONArrayConstructorContext; 
XQueryParser.CompMLJSONObjectConstructorContext = CompMLJSONObjectConstructorContext; 
XQueryParser.CompMLJSONNumberConstructorContext = CompMLJSONNumberConstructorContext; 
XQueryParser.CompMLJSONBooleanConstructorContext = CompMLJSONBooleanConstructorContext; 
XQueryParser.CompMLJSONNullConstructorContext = CompMLJSONNullConstructorContext; 
XQueryParser.CompBinaryConstructorContext = CompBinaryConstructorContext; 
XQueryParser.CompDocConstructorContext = CompDocConstructorContext; 
XQueryParser.CompElemConstructorContext = CompElemConstructorContext; 
XQueryParser.EnclosedContentExprContext = EnclosedContentExprContext; 
XQueryParser.CompAttrConstructorContext = CompAttrConstructorContext; 
XQueryParser.CompNamespaceConstructorContext = CompNamespaceConstructorContext; 
XQueryParser.PrefixContext = PrefixContext; 
XQueryParser.EnclosedPrefixExprContext = EnclosedPrefixExprContext; 
XQueryParser.EnclosedURIExprContext = EnclosedURIExprContext; 
XQueryParser.CompTextConstructorContext = CompTextConstructorContext; 
XQueryParser.CompCommentConstructorContext = CompCommentConstructorContext; 
XQueryParser.CompPIConstructorContext = CompPIConstructorContext; 
XQueryParser.FunctionItemExprContext = FunctionItemExprContext; 
XQueryParser.NamedFunctionRefContext = NamedFunctionRefContext; 
XQueryParser.InlineFunctionRefContext = InlineFunctionRefContext; 
XQueryParser.FunctionBodyContext = FunctionBodyContext; 
XQueryParser.MapConstructorContext = MapConstructorContext; 
XQueryParser.MapConstructorEntryContext = MapConstructorEntryContext; 
XQueryParser.ArrayConstructorContext = ArrayConstructorContext; 
XQueryParser.SquareArrayConstructorContext = SquareArrayConstructorContext; 
XQueryParser.CurlyArrayConstructorContext = CurlyArrayConstructorContext; 
XQueryParser.StringConstructorContext = StringConstructorContext; 
XQueryParser.StringConstructorContentContext = StringConstructorContentContext; 
XQueryParser.CharNoGraveContext = CharNoGraveContext; 
XQueryParser.CharNoLBraceContext = CharNoLBraceContext; 
XQueryParser.CharNoRBrackContext = CharNoRBrackContext; 
XQueryParser.StringConstructorCharsContext = StringConstructorCharsContext; 
XQueryParser.StringConstructorInterpolationContext = StringConstructorInterpolationContext; 
XQueryParser.UnaryLookupContext = UnaryLookupContext; 
XQueryParser.SingleTypeContext = SingleTypeContext; 
XQueryParser.TypeDeclarationContext = TypeDeclarationContext; 
XQueryParser.SequenceTypeContext = SequenceTypeContext; 
XQueryParser.ItemTypeContext = ItemTypeContext; 
XQueryParser.AtomicOrUnionTypeContext = AtomicOrUnionTypeContext; 
XQueryParser.KindTestContext = KindTestContext; 
XQueryParser.AnyKindTestContext = AnyKindTestContext; 
XQueryParser.BinaryNodeTestContext = BinaryNodeTestContext; 
XQueryParser.DocumentTestContext = DocumentTestContext; 
XQueryParser.TextTestContext = TextTestContext; 
XQueryParser.CommentTestContext = CommentTestContext; 
XQueryParser.NamespaceNodeTestContext = NamespaceNodeTestContext; 
XQueryParser.PiTestContext = PiTestContext; 
XQueryParser.AttributeTestContext = AttributeTestContext; 
XQueryParser.AttributeNameOrWildcardContext = AttributeNameOrWildcardContext; 
XQueryParser.SchemaAttributeTestContext = SchemaAttributeTestContext; 
XQueryParser.ElementTestContext = ElementTestContext; 
XQueryParser.ElementNameOrWildcardContext = ElementNameOrWildcardContext; 
XQueryParser.SchemaElementTestContext = SchemaElementTestContext; 
XQueryParser.ElementDeclarationContext = ElementDeclarationContext; 
XQueryParser.AttributeNameContext = AttributeNameContext; 
XQueryParser.ElementNameContext = ElementNameContext; 
XQueryParser.SimpleTypeNameContext = SimpleTypeNameContext; 
XQueryParser.TypeNameContext = TypeNameContext; 
XQueryParser.FunctionTestContext = FunctionTestContext; 
XQueryParser.AnyFunctionTestContext = AnyFunctionTestContext; 
XQueryParser.TypedFunctionTestContext = TypedFunctionTestContext; 
XQueryParser.MapTestContext = MapTestContext; 
XQueryParser.AnyMapTestContext = AnyMapTestContext; 
XQueryParser.TypedMapTestContext = TypedMapTestContext; 
XQueryParser.ArrayTestContext = ArrayTestContext; 
XQueryParser.AnyArrayTestContext = AnyArrayTestContext; 
XQueryParser.TypedArrayTestContext = TypedArrayTestContext; 
XQueryParser.ParenthesizedItemTestContext = ParenthesizedItemTestContext; 
XQueryParser.AttributeDeclarationContext = AttributeDeclarationContext; 
XQueryParser.MlNodeTestContext = MlNodeTestContext; 
XQueryParser.MlArrayNodeTestContext = MlArrayNodeTestContext; 
XQueryParser.MlObjectNodeTestContext = MlObjectNodeTestContext; 
XQueryParser.MlNumberNodeTestContext = MlNumberNodeTestContext; 
XQueryParser.MlBooleanNodeTestContext = MlBooleanNodeTestContext; 
XQueryParser.MlNullNodeTestContext = MlNullNodeTestContext; 
XQueryParser.EqNameContext = EqNameContext; 
XQueryParser.QNameContext = QNameContext; 
XQueryParser.NcNameContext = NcNameContext; 
XQueryParser.FunctionNameContext = FunctionNameContext; 
XQueryParser.KeywordContext = KeywordContext; 
XQueryParser.KeywordNotOKForFunctionContext = KeywordNotOKForFunctionContext; 
XQueryParser.KeywordOKForFunctionContext = KeywordOKForFunctionContext; 
XQueryParser.UriLiteralContext = UriLiteralContext; 
XQueryParser.StringLiteralQuotContext = StringLiteralQuotContext; 
XQueryParser.StringLiteralAposContext = StringLiteralAposContext; 
XQueryParser.StringLiteralContext = StringLiteralContext; 
XQueryParser.StringContentQuotContext = StringContentQuotContext; 
XQueryParser.StringContentAposContext = StringContentAposContext; 
XQueryParser.NoQuotesNoBracesNoAmpNoLAngContext = NoQuotesNoBracesNoAmpNoLAngContext; 
